{"cells":[{"metadata":{"_uuid":"91a95e52e5b5b5e9eadadb1f3fe6ca86edc29495","_execution_state":"idle","trusted":true},"cell_type":"code","source":"# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.\n\n#read data\nlibrary(tidyverse)\ntrainT <-\n  read_csv(file = \"../input/train.csv\")\ntestT <-\n  read_csv(file = \"../input/test.csv\")\nglimpse(trainT)\nglimpse(testT)\ntestT$Survived <- NA\ntestT$Survived <- as.integer(testT$Survived)\nt <- testT[, c(1, 12, 2:11)]\ntestT <- t\ntrainT$set <- \"training\"\ntestT$set <- \"test\"\ncmbT_new <- rbind(trainT, testT)\nglimpse(cmbT_new)\nsummary(cmbT_new)\n\ncmbT_new$Sex <- as.factor(cmbT_new$Sex)\ncmbT_new$Embarked <- as.factor(cmbT_new$Embarked)\ncmbT_new$Survived <- as.factor(cmbT_new$Survived)\ncmbT_new %>%\n  filter(set == \"training\") %>%\n  select(Survived) %>% table() %>%\n  addmargins()\n\ncmbT_new %>%\n  filter(set == \"training\") %>%\n  select(Survived) %>% table() %>%\n  prop.table() %>%\n  addmargins()\n\nsummary(cmbT_new)\n\ncabinIntial <- ((str_extract(cmbT_new$Cabin, \"^.\")))\ncmbT_new$CabinInitial <- cabinIntial\ncmbT_new$CabinInitial[which(is.na(cmbT_new$CabinInitial))] <- \"NoCabin\"\ncmbT_new$CabinInitial <- as.factor(cmbT_new$CabinInitial)\n\ncmbT_new %>% ggplot(aes(x=Embarked, fill=as.factor(Pclass))) + geom_bar(position= \"fill\")\ncmbT_new %>%  ggplot(aes(x=Embarked, fill=CabinInitial)) + geom_bar(position= \"fill\")\ncmbT_new$Embarked[which(is.na(cmbT_new$Embarked))] <- \"C\"\ncmbT_new$Title <- str_extract(cmbT_new$Name, \"[A-Z][a-z]+\\\\.\")\nNameMedAge <-\n  cmbT_new %>% filter(!is.na(Age)) %>% group_by(Title) %>% summarise(med = median(Age))\n\nplugMedAge <- function(x, NameMedAge) {\n  for (i in 1:nrow(x)) {\n    if (is.na(x$Age[i])) {\n      x$Age[i] <-\n        as.numeric(NameMedAge[which(NameMedAge$Title == x$Title[i]), 2])\n    }\n  }\n  return(x)\n}\ncmbT_new <- plugMedAge(cmbT_new, NameMedAge)\ncmbT_new$FamSize <- cmbT_new$SibSp + cmbT_new$Parch + 1\n\nplugTitleType <- function(x) {\n  if (x %in% c(\"Capt.\", \"Col.\", \"Major.\")) {\n    return(\"officer\")\n  } else if (x %in% c(\"Countess.\",\n                      \"Don.\",\n                      \"Dona.\",\n                      \"Jonkheer.\",\n                      \"Lady.\",\n                      \"Mlle.\",\n                      \"Mme.\",\n                      \"Sir.\")) {\n    return(\"Royalty\")\n  } else if (x %in% c(\"Dr.\")) {\n    return(\"Professional\")\n  } else if (x %in% c(\"Master.\")) {\n    return(\"boy\")\n  } else if (x %in% c(\"Rev.\")) {\n    return(\"Priest\")\n  } else if (x %in% c(\"Miss.\")) {\n    return(\"Comm_YoungWomen\")\n  } else{\n    return(\"Commoner\")\n  }\n}\n\ncmbT_new$TType <- as.factor(sapply(cmbT_new$Title, plugTitleType))\n\nFamSizeBucket <- function(x) {\n  if (x <= 2) {\n    return(\"small\")\n  }\n  else if (x <= 4) {\n    return(\"mid\")\n  }\n  else if (x <= 8) {\n    return(\"big\")\n  }\n  else{\n    return(\"vbig\")\n  }\n}\ncmbT_new$FamSizeCat <- sapply((cmbT_new$Parch + cmbT_new$SibSp + 1), FamSizeBucket)\ncmbT_new$alone <- sapply(cmbT_new$FamSize, function(x){if(x==1){1}else{0}})\n\ndf_fare_evaluation <- cmbT_new %>% filter(cmbT_new$Fare < boxplot.stats(cmbT_new$Fare)$stats[4] & is.na(cmbT_new$Fare) == FALSE )\n\n#df_fare_evaluation_train <- sample_frac(df_fare_evaluation, 0.7 )\n#df_fare_evaluation_test <- df_fare_evaluation %>% filter(!(PassengerId %in% df_fare_evaluation_train$PassengerId))\n#names(df_fare_evaluation)\n\nfare_model <- lm(Fare~ Pclass + Sex + Age + FamSize + Embarked +TType, data = df_fare_evaluation)\ncmbT_new$Fare[which(is.na(cmbT_new$Fare))] <- predict(fare_model, cmbT_new[ which(is.na(cmbT_new$Fare)), ])\ncmbT_new$FareCat <- cut(cmbT_new$Fare, c(boxplot.stats(cmbT_new$Fare)$stats, max(cmbT_new$Fare)))\ncmbT_new$FareCat[which(is.na(cmbT_new$FareCat))] <- \"(0,7.9]\"\nsummary(cmbT_new$FareCat)\ncmbT_new$Cabin[(which(is.na(cmbT_new$Cabin)))] <- \"No Cabin\"\n\ncmbT_new %>% ggplot(aes(y=Survived, x = Age, color = Sex)) + geom_jitter(aes(size = Fare, alpha = .00005)) + facet_grid(Pclass ~ Embarked)\n\n#discarding field tht obviouly doesnt cotribute to prediction/outocome (Name, Ticket)\ntit <- cmbT_new[, -c(4, 9, 15)]\nx <- data.frame(sapply(tit[which(sapply(tit, is.character))], as.factor))\ny <- tit[which(!sapply(tit, is.character))]\ntit <- cbind(y, x)\ntit$Cabin[(which(is.na(tit$Cabin)))] <- \"No Cabin\"\ntit_train <- tit[which(tit$set == \"training\"), ]\ntit_train$set <- NULL\ntit_train$PassengerId <- NULL\ntit_train$Cabin <- NULL\n\n\ntit_test <- tit[which(tit$set == \"test\"), ]\ntit_test$set <- NULL\n\n\nnull_model <- glm(Survived ~ 1 , data = tit_train, family = \"binomial\")\nfull_model <- glm(Survived ~ . , data = tit_train, family = \"binomial\")\n\n#cmbT$Cabin <- as.factor(cmbT$Cabin)\n#cmbT$Ticket <- as.factor(cmbT$Ticket)\n#cmbT$Name <- as.factor(cmbT$Name)\n\nstep_model <- step(null_model, scope = list(lower = null_model, upper = full_model), direction = \"forward\")\n\nstep_prob <- predict(step_model, type = \"response\")\n\nlibrary(pROC)\nROC <- roc(tit_train$Survived, step_prob)\nplot(ROC, col = \"red\")\nauc(ROC)\n\n#confuion matrix on Training set\nindexTrain <- which((predict(step_model, tit_train, type = \"response\") < 0.55))\nSurvivedTrain <- vector(mode=\"integer\", length=nrow(tit_train))\nSurvivedTrain[indexTrain] <- 0\nSurvivedTrain[-indexTrain] <- 1\n\nconfusionMatrix(as.factor(SurvivedTrain), as.factor(tit_train$Survived))\n\n\nindex <- which((predict(step_model, tit_test, type = \"response\") < 0.6))\nSurvived <- vector(mode=\"numeric\", length=nrow(tit_test))\nSurvived[index] <- 0\nSurvived[-index] <- 1\n\ntitLogiSub <- cbind(PassengerId = tit_test$PassengerId, Survived)\n\nwrite.csv(titLogiSub, \"titLogiSub.csv\", row.names = FALSE)\n\n\n\n\n\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}