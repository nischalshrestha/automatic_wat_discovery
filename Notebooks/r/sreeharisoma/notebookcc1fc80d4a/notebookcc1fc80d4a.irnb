{
  "metadata": {
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "16ffcd22-c7b1-dfb6-dae5-0785deab9c9c",
        "_active": true
      },
      "outputs": [],
      "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(stringi) # string functions\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.\n\n# staging train and test data which are stored in the ../input directory\ntrain <- read.csv(\"../input/train.csv\")\ntest  <- read.csv(\"../input/test.csv\")\n\n # add a new column to test data set so that train and test will comined\ntest.survived <- data.frame(Survived = rep(\"None\", nrow(test)), test[,])\n\n#cmonined data set for Train and test.survived\ntrain.combined <- rbind(train, test.survived)\n\n#getting titles from name\nextractile <- function(Name){\n Name <- as.character(Name)\n  \n if(length(grep(\" Miss.\", Name)) >0 ){\n   return(\"Miss.\") }\nelse  if (length(grep(\"Master.\", Name)) >0 ){\n   return(\"Master.\")}\nelse  if(length(grep(\"Mrs.\", Name)) >0 ){\n   return(\"Mrs.\")}\nelse  if(length(grep(\"Mr.\", Name)) >0 ){\n   return(\"Mr.\")}\n  else{\n    return(\"Other\")\n }\n}\n    \ntitles <- NULL\nfor(i in 1:nrow(train.combined)){\n  titles <- c( titles, extractile(train.combined[i, \"Name\"]))\n}\ntrain.combined$titles <- as.factor(titles)\n    \n#family Size calaculations\n temp.sibsp <- c(train$SibSp, test$SibSp)\n temp.parch <- c(train$Parch, test$Parch)\n train.combined$family.size <- as.factor(temp.sibsp+temp.parch+1)\n    \nsummary(train.combined)    \n \n #visualize Family by Pclass and title\n ggplot(train.survived[1:891,],aes(x=family.size, fill = Survived))+\n   geom_bar(width = 0.5)+\n   facet_wrap(~Pclass + titles)+\n   ggtitle(\"Pclass, Titles\")+\n   xlab(\"family.size\")+\n   ylab(\"Total Count\")+\n   ylim(0,1000)+\n   labs(fill = \"Survived\")\n\n    \n# Apply randomForest analysis on train.combined data frame\nrf.table1 <- as.factor(train$Survived)\n    \n#train randomForecast on Pclass, Titles, sibsp & family.size\nrf.train <- train.combined[1:891,c(\"Pclass\",\"titles\", \"SibSp\",\"family.size\")]\n\nset.seed(1000)\nrf <- randomForest(x = rf.train, y = rf.table1, importance = TRUE, ntree = 100)\nrf\nvarImpPlot(rf)\n \n  ",
      "execution_state": "idle"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "858671bc-ceb4-a2ef-8381-bf43227a6a60",
        "_active": false
      },
      "outputs": [],
      "source": null,
      "execution_state": "idle"
    }
  ]
}