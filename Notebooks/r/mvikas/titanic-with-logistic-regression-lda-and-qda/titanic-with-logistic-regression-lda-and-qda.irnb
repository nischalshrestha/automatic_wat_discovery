{"cells":[{"metadata":{"_uuid":"4b94ed5359bf9a6b38fd3702b0e7cc5557323b12","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.\n\n\n\n## In this script we will solve the titanic problem\n\n## Problem Defination :  using data find out which passenger is likely to serviev\n\n## Loading libraries required ##\n# so we are solving this problem with three methods of classification\n# 1. Logistic regression \n# 2. Linear Descrimental Analysis\n# 3. Quadratic descrimental analysis \n\nlibrary(MASS)\nlibrary(class)\nlibrary(caret)\nlibrary(tidyverse)\nlibrary(fields)\n\n## now we will load the Data files\ntrain_data = read_csv(\"../input/train.csv\")\nhead(train_data)\ntest_data = read_csv(\"../input/test.csv\")\nhead(test_data)\ndim(test_data)\n\ntrain_data$Survived = factor(train_data$Survived)\nattach(train_data)\ntrain_data\n\n##next step is to select feature : Feature selection is the most important part\n##of your Analysis\ntable(Survived, Pclass)\ntable(Survived, PassengerId) \ntable(Survived, Age)\ntable(Survived, SibSp)\n\n## Graphics is the most useful way to do this ..\n# We will use the conditional box plot\nbplot.xy(Survived, Age)\n\n##comparing survival and Pclass\nbplot.xy(Survived, Pclass)\n\n\n\n## comparing survival rate and fair\nbplot.xy(Survived, Fare)\n\n# so as we decided to choose the Pclass, Age and Fair to predict servival\n#First we will solve by logistic regression\n\nlog_reg = glm(formula = Survived ~ Pclass+Age+Fare, family = binomial, data = train_data)\nsummary(log_reg)\n\n#predicting the values \ntest_data_mod = test_data[c('PassengerId', 'Pclass', 'Age', 'Fare')]\nsummary(test_data_mod)\n\n## removing the null values\ntest_data_mod$Age = ifelse(is.na(test_data_mod$Age), mean(test_data_mod$Age, na.rm=TRUE), test_data_mod$Age)\ntest_data_mod$Fare = ifelse(is.na(test_data_mod$Fare), mean(test_data_mod$Age, na.rm = TRUE), test_data_mod$Fare)\n\n\nlog_predic = predict(log_reg, newdata = test_data_mod, type = \"response\")\nglm_pred = rep(0, 418)\nglm_pred[log_predic > .5] = 1\ntest_data_mod$Survived = glm_pred\n\n#writing result in the Kaggle format\nsubmission = test_data_mod[, c(\"PassengerId\", \"Survived\")]\n\nhead(test_data_mod)\nwrite_csv(submission,\"data/submission_logistic.csv\" )\n\n\n#now we will solve the same problem with the LDA\n#to solve this problme we will check the model accurary by spliting the training data into \n# 80:20\n\n# first we will clearn the data \nnames(train_data)\n\n# we are working with PassengerId, Survived, Pclass, And Fare column\ntrain_new = train_data[,c(\"PassengerId\", \"Survived\", \"Pclass\", \"Fare\", \"Age\")]\nsummary(train_new)\nbplot(train_new$Age)\n\n#first we needd to remove the null values form the Age column\n# We will replace those values with mean \ntrain_new$Age = ifelse(is.na(train_new$Age), mean(train_new$Age, na.rm = TRUE), train_new$Age)\nsummary(train_new)\n\n#now next thing we will split the train data so we can validate our mode\ntrain = (train_new$PassengerId < 800)\ntrain_new_train = train_new[train,]\ntrain_new_test = train_new[!train, c(\"PassengerId\", \"Pclass\", \"Fare\", \"Age\")]\ndim(train_new_test)\ntrain_new_test\ntrain_new_test_val = train_new[!train, c(\"Survived\")]\ndim(train_new_test_val)\n\n\n#as our data is ready now we will pass it to the model\n\n# we will evaluate both model \n#LDA and QDA\n\nlda_fit = lda(Survived~Pclass+Fare+Age, data = train_new_train)\nlda_fit\n\n#now prediction\nlda_pred = predict(lda_fit, train_new_test)\nlda_pre_class = lda_pred$class\ntest_data_lda = test_data[,c(\"PassengerId\", \"Pclass\", \"Fare\", \"Age\")]\nsummary(test_data_lda)\ntest_data_lda$Fare = ifelse(is.na(test_data_lda$Fare), mean(test_data_lda$Fare, na.rm = TRUE), test_data_lda$Fare)\ntest_data_lda$Age = ifelse(is.na(test_data_lda$Age), mean(test_data_lda$Age, na.rm = TRUE), test_data_lda$Age)\ntable(lda_pre_class, train_new_test_val$Survived)\nmean(lda_pre_class == train_new_test_val$Survived)\n# so our model is 71.73% accurate\n# now let's try to train it on the entire file and now this time we will pass it the actual test file\nsummary(train_new)\nlda_fit = lda(Survived~Pclass+Fare+Age, data = train_new)\n\nlda_pred = predict(lda_fit, test_data_lda)\nlda_pred_class = lda_pred$class\ntest_data_lda$Survived = lda_pred_class\nsubmission = test_data_lda[, c(\"PassengerId\", \"Survived\")]\ndim(submission)\ndim(test_data)\n\nhead(submission)\nwrite_csv(submission, \"data/submission_LDA.csv\")\n\n\n\n\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}