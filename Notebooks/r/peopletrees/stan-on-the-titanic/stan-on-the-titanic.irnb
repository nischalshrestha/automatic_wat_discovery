{"cells":[{"metadata":{"_uuid":"1c3376fd21f2182d093cf3b3564d11a69a176aee"},"cell_type":"markdown","source":"# Using Stan to predict survival on the Titanic \n\nStan is a probabilistic programming language that allows the user to specify Bayesian statistical models. We're going to fit a logistic regression model with priors to predict survival. Our choice of prior for the regression coefficients (double exponential) yields LASSO regularization.\n\n"},{"metadata":{"_uuid":"3dfb0cfcfc243a3ad00728813de8c2d98a89b75d","_execution_state":"idle","trusted":true,"scrolled":true,"_kg_hide-output":true},"cell_type":"code","source":"library(ggplot2); library(ggthemes) # Data visualization\nlibrary(caret); library(dplyr)  # for preprocessing\nlibrary(rstan) # load stan\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n#list.files(\"../input\")\ntrain <- read_csv(\"../input/train.csv\")\ntest <- read_csv(\"../input/test.csv\")\nfull <- bind_rows(train,test)","execution_count":16,"outputs":[]},{"metadata":{"_uuid":"0161efcc37c5c55bf4669bfeec0275cc6610766c"},"cell_type":"markdown","source":"First, let's look at the data."},{"metadata":{"trusted":true,"_uuid":"a2b4e2905a2304647194baf4bc50f0bb4a49959c"},"cell_type":"code","source":"head(train)","execution_count":165,"outputs":[]},{"metadata":{"_uuid":"4b097c4b2598e97e2d1b86be18585972370bd5d0"},"cell_type":"markdown","source":"# Data prep\nSet some variables to factors."},{"metadata":{"trusted":true,"_uuid":"14481ba1786ea5c621d17654b8e17d0d2c9403a9"},"cell_type":"code","source":"full$Cabin <- as.factor(full$Cabin)\nfull$Embarked <- as.factor(full$Embarked)\nfull$Sex <- as.factor(full$Sex)\nfull$Pclass <- as.factor(full$Pclass) #no reason to assume this variable is linear with survival","execution_count":2,"outputs":[]},{"metadata":{"_uuid":"fea24708598695bfa79c1da1ac7ec4ae0257a0b7"},"cell_type":"markdown","source":"Two people in the training dataset had missing embarcation location."},{"metadata":{"trusted":true,"_uuid":"a6cc87fe1f044236ea7a356875f2ba5db3d44bb6"},"cell_type":"code","source":"full <- full[complete.cases(full$Embarked),]\ntrain.size <- nrow(train) - sum(!complete.cases(train$Embarked))","execution_count":3,"outputs":[]},{"metadata":{"_uuid":"6b873273fce3ff16b9759d7162866401addde7e6"},"cell_type":"markdown","source":"## Title\nWe'll construct a Title variable (e.g., Mrs., Miss., Mr., Capt.) following some tutorial I found here on Kaggle."},{"metadata":{"trusted":true,"_uuid":"b6642252b4547d4efb5ddd2939986a52ea1f8532"},"cell_type":"code","source":"# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Show title counts by sex\ntable(full$Sex, full$Title)\n\n# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\nfull$Title <- as.factor(full$Title)","execution_count":18,"outputs":[]},{"metadata":{"_uuid":"1bf77ac4badc3ead23fc8f384718877416e6ae81"},"cell_type":"markdown","source":"## Family size\n\nWe'll make a family size variable, too."},{"metadata":{"trusted":true,"_uuid":"f66ff82c7edb618e56c6a40d1cf618ac97b4cfd6"},"cell_type":"code","source":"# Create a family size variable including the passenger themselves\nfull$Fsize <- full$SibSp + full$Parch + 1\nfull$FsizeD <- NA\nfull$FsizeD[full$Fsize == 1] <- 'singleton'\nfull$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$FsizeD[full$Fsize > 4] <- 'large'\nmosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)","execution_count":5,"outputs":[]},{"metadata":{"_uuid":"e737cb3a4c51b8adf5cb72941395eb2d73493bbd"},"cell_type":"markdown","source":"## Fare\nThe \"Fare\" variable is extremely skewed, so we log transform."},{"metadata":{"trusted":true,"_uuid":"50aa519771b1eeadb989a1589ca4d066dbbc2e8a","scrolled":true},"cell_type":"code","source":"hist(full$Fare, main=\"original Fare variable\")\nfull$Fare <- log(full$Fare + 1)\nhist(full$Fare, main=\"log transformed Fare variable\")","execution_count":6,"outputs":[]},{"metadata":{"_uuid":"546857361cc72a9170e44625c0b32369f83e4d30"},"cell_type":"markdown","source":"## Age\nTake a look at how age relates to survival."},{"metadata":{"trusted":true,"_uuid":"2bd2717055a5c50337b9fbd922ce727e6ad5e9b6"},"cell_type":"code","source":"ggplot(subset(full[1:train.size,], complete.cases(Age))) + \n    aes(x = as.vector(Age), y = factor(Survived), color=Sex) + \n    geom_jitter(alpha=.5,height=.1,width=0) + \n    ylab(\"Survived\") + xlab(\"Age\") +\n    facet_wrap(~Sex) + ggtitle(\"for men, age 18 was a death sentence\")","execution_count":7,"outputs":[]},{"metadata":{"_uuid":"323a4e6ee39d63653f1e21ff05ac85d5d5aafb42"},"cell_type":"markdown","source":"The age of 18 appears to be meaningful, and there is an interaction between age and sex.\n\nSo, we'll be creating a variable for people who are 18+, and a variable for the interaction between between 18+ and being male. But not yet. Too many people are missing age information. "},{"metadata":{"_uuid":"85d4102be1af7f1946dce8f0f722f4c10a9648f6"},"cell_type":"markdown","source":"# Imputation of missing data \n\nSome people have missing Age and Fare data. We're going to try to make sensible guesses about the ages and fares of these people. \n\n### Age\nWe'll start by predicting age using the person's title (e.g., whether the person is referred to as \"Miss\" versus \"Mrs\"). "},{"metadata":{"trusted":true,"_uuid":"624aa000c55549524c6f760eb34adc16e100ecbf"},"cell_type":"code","source":"#build a model for age\nage.model <- lm(Age ~ 0 + Title, data=full)","execution_count":9,"outputs":[]},{"metadata":{"_uuid":"d9ae8410e3efd8cec5e6654af9f67f9698a140f7"},"cell_type":"markdown","source":"The results of the model are sensible. People who are referred to as \"Miss\" tend to be younger than people referred to as \"Mrs.\" People with rare titles like Duke and Countess tend to be older.  "},{"metadata":{"trusted":true,"_uuid":"dc5f96212b8b255cbe75028bcbb09455bb35439a"},"cell_type":"code","source":"summary(age.model)","execution_count":10,"outputs":[]},{"metadata":{"_uuid":"6c355f749cc0cffbe8bdc3d58f4230b47583357b"},"cell_type":"markdown","source":"I didn't know this beforehand, but the title \"Master\" was apparently used to refer to young men. Our model says that the average age of a \"Master\" is 5 years. And you can see from the distribution that none of the Masters in the dataset are older than 15."},{"metadata":{"trusted":true,"_uuid":"f3dfb0da109cc50484ee98d2c385b53d9f8adcd3","scrolled":false},"cell_type":"code","source":"ggplot(subset(full,Title == \"Master\" & complete.cases(Age))) + aes(Age) + \nggtitle(\"\\\"Masters\\\" tend to be very young\") + xlab(\"Age\") + \ngeom_histogram(bins=15, alpha=.8) + theme_minimal()","execution_count":11,"outputs":[]},{"metadata":{"_uuid":"ff5007c6344a73702d3bd663f37398f410715e42"},"cell_type":"markdown","source":"\"Masters\" are always male, but not necessarily upper class."},{"metadata":{"trusted":true,"_uuid":"9c668dd2deb55c8858523ed92199ba6c0a0100ef"},"cell_type":"code","source":"with(subset(full,Title == \"Master\" & complete.cases(Age)),\n    table(Sex, Pclass))","execution_count":20,"outputs":[]},{"metadata":{"_uuid":"cbf214d44ae688b3345a338dcbd1d422c9a6ca9a"},"cell_type":"markdown","source":"In any case, we use the above model to impute missing ages, and print the result so we can make sure the predictions look reasonable."},{"metadata":{"trusted":true,"scrolled":false,"_uuid":"9cb35a0bf8e6157a52c72e5e0b4868db3f354f8c"},"cell_type":"code","source":"unknown.age <- full[is.na(full$Age),]\npred.age <- as.matrix(predict(age.model, unknown.age))\ndata.frame(predictedAge=round(pred.age,1),unknown.age)","execution_count":176,"outputs":[]},{"metadata":{"_uuid":"085de21c5da7885eba4785979105d6777eb03c7f"},"cell_type":"markdown","source":"### Fare\n\nOnly one person was missing a Fare. We predict their fare using their Title, their cabin class, and the port from which they embarked."},{"metadata":{"trusted":true,"_uuid":"f942557f3b962db787251f91847726b4b914315b","scrolled":false},"cell_type":"code","source":"# predict fare from your title, your class, and where you embarked\nfare.model <- lm(Fare ~ Title + Pclass + Embarked, data=full)\nsummary(fare.model)","execution_count":177,"outputs":[]},{"metadata":{"_uuid":"904a3a916dfe7a6b2709a2e89f0cab2020c2ceca"},"cell_type":"markdown","source":"The person with missing Fare was riding third class, so we'd expect their fare to be lower than average, and it is."},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"c7cd3bdf44d7c6a4e7f859988ef1309463f537e0"},"cell_type":"code","source":"unknown.fare <- full[is.na(full$Fare),]\npred.fare <- as.matrix(predict(fare.model, unknown.fare))\ndata.frame(predictedLogFare=round(pred.fare,2),unknown.fare)\ncat(\"avg (log) fare for the dataset:\",round(mean(full$Fare, na.rm=T),2)) \ncat(\"\\navg fare for a person in 3rd class:\",round(mean(subset(full,Pclass==3)$Fare, na.rm=T),2))\ncat(\"\\npredicted fare for *this* person in 3rd class:\", round(mean(pred.fare),2))","execution_count":178,"outputs":[]},{"metadata":{"_uuid":"3455cbfb02c27b2e8224270931d8d112851fd6dc"},"cell_type":"markdown","source":"The results of the imputation make sense so we plug them into the main dataframe."},{"metadata":{"trusted":true,"_uuid":"73ba95e5edcc3fcea3942aa72f4370c45b4bd254"},"cell_type":"code","source":"full$Fare[is.na(full$Fare)] <- pred.fare\nfull$Age[is.na(full$Age)] <- pred.age","execution_count":179,"outputs":[]},{"metadata":{"_uuid":"cd800f4a852654685ba614e43e9c4c9a4bc9674d"},"cell_type":"markdown","source":"Also, now that we've got sensible predictions for age, let's create that age and age*sex variable we mentioned earlier. These seem to have a strong relationship with survival."},{"metadata":{"trusted":true,"_uuid":"b6208d2dbfbe7fbac83d7172a1312ebae251b785"},"cell_type":"code","source":"full$Young <- as.numeric(full$Age < 18)\nfull$OldMen <- ifelse(full$Young == 0 & full$Sex == \"male\",1,-1)\nmosaicplot(table( factor(full$OldMen,levels=c(-1,1),labels=c(\"Not over 18 and male\",\"Over 18 and Male\")), \n                 factor(full$Survived,levels=c(0,1),labels=c(\"Died\",\"Survived\"))),main=\"\")","execution_count":180,"outputs":[]},{"metadata":{"_uuid":"b14aa81759aed049af9f7b2792d048b8a263bf84"},"cell_type":"markdown","source":"> > > "},{"metadata":{"_uuid":"11b5b2c96a96621eeb93b13bd5798c63e010039e"},"cell_type":"markdown","source":"# Setting things up for Stan\nStan works best when variables approach unit normal. So we z-score Age."},{"metadata":{"trusted":true,"_uuid":"4db28287840cea5136ab01ab1d7b77cef714e190"},"cell_type":"code","source":"full$AgeZ <- scale(full$Age)","execution_count":181,"outputs":[]},{"metadata":{"_uuid":"93eb86bb2236a8562becddf3cbfd495897221591"},"cell_type":"markdown","source":"Save a vector for the outcome measure, and a vector for the passenger IDs of the test set for later prediction submissions. "},{"metadata":{"trusted":true,"_uuid":"dcba3b9a1bd7f8ab54503d1e3d2d8b90dc20aa58"},"cell_type":"code","source":"y <- full[1:train.size,]$Survived # outcome\nIDs <- full[(train.size + 1): nrow(full),]$PassengerId # ID for predictions","execution_count":182,"outputs":[]},{"metadata":{"_uuid":"f31429cd0c8e79df26532b6f2ca9effef5987926"},"cell_type":"markdown","source":"Reduce data frames to the variables we're using for prediction, and break dataset up into training and test sets.."},{"metadata":{"trusted":true,"_uuid":"9e06ba0099a563f0b2871ce8ab41ebd437dc0579"},"cell_type":"code","source":"predictor.variables <- c(\"Pclass\",\"Sex\",\"AgeZ\",\"SibSp\",\"Parch\",\"Fare\",\n                          \"Embarked\",\"Title\",\"FsizeD\",\"Young\",\"OldMen\")\ntosplit <- subset(full, select=predictor.variables)\n\ntrain <- tosplit[1:train.size,]\ntest <- tosplit[(train.size + 1):nrow(tosplit),]","execution_count":183,"outputs":[]},{"metadata":{"_uuid":"b5a1f2acfca0930e59e2334335f6a09b5698dd31"},"cell_type":"markdown","source":"Create model matrices for training and tests sets."},{"metadata":{"trusted":true,"_uuid":"85fa91ae22a663d890e61fd420f1359ee09713bb","scrolled":true},"cell_type":"code","source":"X <- model.matrix(y~., train)[,-1] #drop int\nhead(X)","execution_count":184,"outputs":[]},{"metadata":{"_uuid":"eaa72ecc77e68551ce1b46d26a67de2c3ded9e2c"},"cell_type":"markdown","source":"Make a model matrix for the test set."},{"metadata":{"trusted":true,"_uuid":"75ef39736cd135fb095c9e8c23b3e0d1d5109279"},"cell_type":"code","source":"test <- subset(test, select=predictor.variables)\nX_test <- model.matrix(~., test)[,-1] #drop int\nhead(X_test)","execution_count":185,"outputs":[]},{"metadata":{"_uuid":"bb7c2202a95b9ff515004bf57f7c67ec32248c54"},"cell_type":"markdown","source":"Write up a logistic regression model in Stan, generating predictions directly using the generated quantities block. We put a double exponential(0,1) prior on the regression coefficients to reduce risk of overfitting. This prior approximates LASSO regression. "},{"metadata":{"trusted":true,"_uuid":"d93db04b238c67ff4bdf57ae029d1a7c0f732230"},"cell_type":"code","source":"model_string <- \"\ndata {\n  int<lower=0> N; // number of data items\n  int<lower=0> N_pred; // number of items to be predicted\n  int<lower=0> K; // number of predictors\n  matrix[N, K] X; // predictor matrix\n  matrix[N_pred, K] X_test; // predictor matrix for test data\n  int y[N]; // outcome vector\n}\nparameters {\n  real alpha; // intercept\n  vector[K] beta; // coefficients for predictors\n}\nmodel {\n  alpha ~ normal(0,5); // prior for intercept\n  beta ~ double_exponential(0,1); // like a LASSO prior\n  y ~ bernoulli_logit(X * beta + alpha); // likelihood\n}\ngenerated quantities{\n  vector[N_pred] y_pred;\n  for (n in 1:N_pred)\n    y_pred[n] = bernoulli_rng(inv_logit(X_test[n] * beta + alpha));\n}\n\"","execution_count":186,"outputs":[]},{"metadata":{"_uuid":"7b29d905390eea55f1895cbca2962223207eb8a3"},"cell_type":"markdown","source":"We feed variables into Stan using a list."},{"metadata":{"trusted":true,"_uuid":"ef0eda44aff86f5b203d9bd8d0acef0926fe5171"},"cell_type":"code","source":"stan_dat <- list(X=X, X_test=X_test, y = y, N = nrow(X), K=ncol(X), N_pred = nrow(X_test))","execution_count":187,"outputs":[]},{"metadata":{"_uuid":"bbc21116392e9afb00872a7e529182cfc220cdd5"},"cell_type":"markdown","source":"Fit the Stan model, running multiple chains so we can verify convergence."},{"metadata":{"trusted":true,"_uuid":"4e8a4fa6a31eb23f6ffe015ab618a4dd4e42dd99","_kg_hide-output":true},"cell_type":"code","source":"m <- stan(model_code = model_string, data = stan_dat, iter=4000, warmup=1000, chains=4, cores=4)","execution_count":188,"outputs":[]},{"metadata":{"_uuid":"38de112e205dd6bf4a304a7756a4abe9e26d49e7"},"cell_type":"markdown","source":"Here's the model output"},{"metadata":{"trusted":true,"_uuid":"b00a963604879095aadc204402c50898c3ba9bd0"},"cell_type":"code","source":"# plot beta coefficients with labels\nbeta.posteriors <- plot(m, pars=\"beta\")\nbeta.posteriors + scale_y_continuous(breaks=1:ncol(X), labels=rev(colnames(X)))","execution_count":233,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"18ff15a00e56d9833484c0e39a6e67ff65462ad5"},"cell_type":"code","source":"# and print full fit (reminding me what the beta coefficients were)\ndata.frame(betaCoefficientNumber=1:ncol(X),Predictor=colnames(X))\nm","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"249c9a148d37801621f0d1beedf1691ffaa3051b"},"cell_type":"markdown","source":"# Make predictions\n\nFirst, extract and process the samples from the model."},{"metadata":{"trusted":true,"_uuid":"bf1e5d5cd781cad0fa3b34411797d6da92fde1a9","scrolled":true},"cell_type":"code","source":"smps <- extract(m)\ny_pred <- smps$y_pred\nprobs <- apply(y_pred, 2, mean)","execution_count":190,"outputs":[]},{"metadata":{"_uuid":"f89cfd99f7399f83840d1ea74d54e026d91cd910"},"cell_type":"markdown","source":"For the purposes of the competition, we'll predict survival for anyone with average predicted survival probability of >50%. This is our \"point prediction\" for who survives."},{"metadata":{"trusted":true,"_uuid":"a48381de9381bb54cefe06d9a0e14852344d5378"},"cell_type":"code","source":"preds <- ifelse(probs > .5, 1, 0)","execution_count":191,"outputs":[]},{"metadata":{"_uuid":"6591001ee92d447fd14b0bd1a04a0e8b68c9c224"},"cell_type":"markdown","source":"## Point predictions or posterior distributions?\n\nOne of the major benefits of fully Bayesian methods like Stan is that we don't have to settle for point predictions. It's interesting to look at the uncertainty quantified by the model.\n\nLet's take a look at the model's predictions for a couple passengers from the test set. \n\nHere is a young married woman, riding first class with a small-sized family. She will almost certainly make it out alive."},{"metadata":{"trusted":true,"_uuid":"8be08b59f8f474349e459a9125eb3a66b51d8cd5"},"cell_type":"code","source":"test <- cbind(data.frame(Age=round((test$AgeZ * sd(full$Age)) + mean(full$Age))),test) # get un-Z-scored age back real quick\n\ntestPassenger <- 13\ntest[testPassenger,]\n\na <- smps$alpha\nbetas <- smps$beta\n\nplotPosterior <- function(testPassenger){\nbetasTimesCovariates <- t(t(betas) * X_test[testPassenger,])\nposterior <- rowSums(cbind(a,betasTimesCovariates))\nposterior <- 1 / (1 + exp(-posterior)) # take logistic to get a probability\nplot(density(posterior),xlab=\"probability of survival\",main=\"\",xlim=0:1)\n}\n\nplotPosterior(testPassenger)\ntitle(\"estimated probability of survival\\nfor 23 year old female in first class\")","execution_count":307,"outputs":[]},{"metadata":{"_uuid":"b32188a849eaa1bccf42bd6144d5e0596e439a1e"},"cell_type":"markdown","source":"And here is a 62 year old man who is riding alone in 2nd class. Unfortunately, the odds are against him."},{"metadata":{"trusted":true,"_uuid":"999c92c80e3e9a4f3b4c4c1239d19bf7886d07e1"},"cell_type":"code","source":"testPassenger <- 3\ntest[testPassenger,]\n\nplotPosterior(testPassenger)\ntitle(\"estimated probability of survival\\nfor 62 year old male in second class\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bb5228537beae2b9c5b56b30cabbfc256d56fe52"},"cell_type":"markdown","source":"But now consider the fate of this six year old boy, riding third class. The point prediction is that he has a good chance of surviving--around 70%--but we're much less certain about our estimate here. The posterior probability distribution is very wide, and the model is basically telling us that it's not clear how optimistic we should be, if at all. Maybe his true odds of survival are closer to 40%. Or they could be as high as 90%. It's hard to say. Our training set doesn't include a lot of people like him."},{"metadata":{"trusted":true,"_uuid":"7a45bdae68f1d6192fbad14f79767ef89127354a"},"cell_type":"code","source":"testPassenger <- 81\ntest[testPassenger,]\n\nplotPosterior(testPassenger)\ntitle(\"estimated probability of survival\\nfor 6 year old boy in third class\")","execution_count":290,"outputs":[]},{"metadata":{"_uuid":"d143c9875b63445c18aba74437ad85debd40d384"},"cell_type":"markdown","source":"None of these subtleties will matter to the scoring protocol for this particular competition, but they do qualify the predictions. \n\nStill, the model does pretty well based on point predictions alone. It correctly classifies 78% of the unknown data points."},{"metadata":{"trusted":true,"_uuid":"16c95245bc2639840de86f1ca2dd713fc6da4342"},"cell_type":"code","source":"# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = IDs, Survived = preds)\ncat(\"Est. survival rate for test set:\", round(mean(preds),2)*100,\"%\")\n# Write the solution to file.\nwrite.csv(solution, file = 'Solution.csv', row.names = F)\n","execution_count":74,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}