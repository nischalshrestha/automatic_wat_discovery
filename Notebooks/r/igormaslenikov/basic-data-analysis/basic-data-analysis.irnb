{"metadata": {"kernelspec": {"name": "ir", "language": "R", "display_name": "R"}, "language_info": {"mimetype": "text/x-r-source", "codemirror_mode": "r", "name": "R", "version": "3.4.1", "pygments_lexer": "r", "file_extension": ".r"}}, "nbformat": 4, "cells": [{"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "88e5f2249ea65f65e983a84a149fcc11b90436ab", "_cell_guid": "edd1b90b-81f3-47c2-be20-1aea2db90d7f"}, "source": "This is my first kernel, which shows basic analysis of survival chance vs main parameters. The chance is defined by the ratio of those who survived to those who didn't. \n\nAs the amount of data is not infinite, to show the reliability of the dependencies each plot has an error bars.\n\nFirst step is the data and libraries loading:", "execution_count": null}, {"outputs": [], "cell_type": "code", "metadata": {"_execution_state": "idle", "collapsed": true, "trusted": false, "_cell_guid": "bb16399b-d3a9-4efe-bcdd-1c079836ce2b", "_uuid": "0a7f626c4f84a264d04320cc80bd33f910f73370"}, "source": "library('ggplot2')\ntrain <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)", "execution_count": 1}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "7e243ea1987874a12d5a54a6b646677abd1a2339", "_cell_guid": "10796574-2f8f-4745-9351-19bcacc1349b"}, "source": "Let's parch be the first parameter of interest. So the first additional array survival chance vs parch.", "execution_count": null}, {"outputs": [], "cell_type": "code", "metadata": {"_execution_state": "idle", "_uuid": "9b978bcbe8d9c9c949ace10c78c951385221f596", "trusted": false, "_cell_guid": "dcb98c0f-f2be-4a96-8161-69bfb514f352", "collapsed": true}, "source": "SurvivalVsParch<-aggregate(list(ChanceToSurvive=train$Survived),list(Parch=train$Parch),FUN=function(x)c(mean(x),sd(x)))\n\n\nggplot(SurvivalVsParch,aes(x=SurvivalVsParch$Parch,SurvivalVsParch$ChanceToSurvive[,1]))+geom_line()+\n  labs(x = 'Parch',y='Chance')  +\n  geom_errorbar(aes(x=SurvivalVsParch$Parch,\n                    ymin =ChanceToSurvive[,1]-ChanceToSurvive[,2],\n                    ymax =ChanceToSurvive[,1]+ChanceToSurvive[,2]))", "execution_count": 1}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "eb98e7b9dfcf11e033ea827ab6eebc12f78fa9bc", "_cell_guid": "62cbe063-8462-49db-8169-995a00e97ac1"}, "source": "Looks like the amount of people with parch=6 and 4 was not sufficient even to calculate the error bar. Though there is a tendency to survive for those who have three children (we don't consider the case of two spouses).\n\nNext parameter is the age. To analyse the data let's sort into the bins and create corresponding array.", "execution_count": null}, {"outputs": [], "cell_type": "code", "metadata": {"_execution_state": "idle", "collapsed": true, "trusted": false, "_cell_guid": "f638866a-687c-4eeb-a839-b791bc70f6eb", "_uuid": "16125b84401a70f487c2a80d8d4a05b41c4b88ef"}, "source": "ageRanges=c(2,5,15,20,30,40,50,60,70,90)\nindex=findInterval(train$Age,ageRanges)\nSurvivalVsAge<-aggregate(list(ChanceToSurvive=train$Survived),list(Age=index),\n                         FUN=function(x)c(mean(x),sd(x)))\nSurvivalVsAgeRanges=cbind(SurvivalVsAge,Ranges=ageRanges)", "execution_count": 1}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "fb7d2a2770db0e09266f214cfc89243e9bf84dce", "_cell_guid": "8b983b94-01d7-401c-86ae-1dc5e6d14bd1"}, "source": "the plot looks like this", "execution_count": null}, {"outputs": [], "cell_type": "code", "metadata": {"_execution_state": "idle", "_uuid": "67ac183f29b345c19353cd8adf0cbbb11bacec8d", "trusted": false, "_cell_guid": "38ba4584-db36-46b3-bd43-d0f2a648ad22", "collapsed": true}, "source": "ggplot(SurvivalVsAgeRanges,aes(x=SurvivalVsAgeRanges$Ranges,SurvivalVsAgeRanges$ChanceToSurvive[,1]))+\ngeom_line()+\n  labs(x = 'Age',y='Chance') +\n  geom_errorbar(aes(x=SurvivalVsAgeRanges$Ranges,\n                    ymin =ChanceToSurvive[,1]-ChanceToSurvive[,2],\n                    ymax =ChanceToSurvive[,1]+ChanceToSurvive[,2]))", "execution_count": 1}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "c995df47977514e6286ce9abf60996b805f8adee", "_cell_guid": "ddad05eb-f43e-4252-abe7-fbd49deb8068"}, "source": "Hmm... Babies below 2 tend to survive! Taking errors into consideration, I would consider the data between 20 and 60 as roughly constant about 0.4.", "execution_count": null}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "8c92263048925e960e0b473ed2fd60dae3b56276", "_cell_guid": "f93fa477-b194-4fdd-a69e-628df9c8607a"}, "source": "Obviously, it is intersting to inspect the correlation between fare and surviving.... Let's group the data and create the array and plot..", "execution_count": null}, {"outputs": [], "cell_type": "code", "metadata": {"_execution_state": "idle", "_uuid": "9ae6c415a117c00ecb825463d93013dda9bd9428", "trusted": false, "_cell_guid": "03a9f65a-2d6e-4c50-a87f-fc3bb92530ca", "collapsed": true}, "source": "FareRanges=c(10,20,50,100,150,300,450)\nindex=findInterval(train$Fare,FareRanges)\nSurvivalVsFare<-aggregate(list(ChanceToSurvive=train$Survived),list(Fare=index), FUN=function(x)c(mean(x),sd(x)))\n\nSurvivalVsFare=cbind(SurvivalVsFare,Ranges=FareRanges)\n\nggplot(SurvivalVsFare,aes(x=SurvivalVsFare$Ranges,SurvivalVsFare$ChanceToSurvive[,1]))+geom_line()+\n  labs(x = 'Fare',y='Chance')  +\n  geom_errorbar(aes(x=SurvivalVsFare$Ranges,\n                    ymin =ChanceToSurvive[,1]-ChanceToSurvive[,2],\n                    ymax =ChanceToSurvive[,1]+ChanceToSurvive[,2]))", "execution_count": 1}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "57914d75a03b7b2348febf127df43b22ef065447", "_cell_guid": "c4ab22bb-db65-4a85-bfad-7ffd452cb67d"}, "source": "I would say that the correlation between the ticket fare and chance is clear!", "execution_count": null}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "c47bd3507b1af87e1af4df748c97e1600cfeedb6", "_cell_guid": "99004717-5f5b-45c2-bb7d-89c269225774"}, "source": "Finally I'd like to check is there any depency of the surving on the deck. Let's sepparate deck letter from the cabin number and create the plot/", "execution_count": null}, {"outputs": [], "cell_type": "code", "metadata": {"_execution_state": "idle", "_uuid": "1672d70b042761f38190447a7985e0aa682908dd", "trusted": false, "_cell_guid": "475c8c95-f6d3-4b92-afa4-dd82b3508a60", "collapsed": true}, "source": "train$CabinLetter<- substring(train$Cabin,1,1)\nSurvivalVsCabin<-aggregate(list(ChanceToSurvive=train$Survived),list(Deck=train$CabinLetter), FUN=function(x)c(mean(x),sd(x)))\n\nggplot(SurvivalVsCabin,aes(x=SurvivalVsCabin$Deck,SurvivalVsCabin$ChanceToSurvive[,1]))+geom_point()+\n  labs(x = 'Deck',y='Chance')  +\n  geom_errorbar(aes(x=SurvivalVsCabin$Deck,\n                    ymin =ChanceToSurvive[,1]-ChanceToSurvive[,2],\n                    ymax =ChanceToSurvive[,1]+ChanceToSurvive[,2]))", "execution_count": 1}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "7500be6421ca3a9e25760cbddde0998a2b077baf", "_cell_guid": "624ca0e7-19a1-4404-ae6d-bdfce5105853"}, "source": "There is slight a tendency for the low survivng chance for the low decks.. and this correlates with the ticket price", "execution_count": null}, {"outputs": [], "cell_type": "markdown", "metadata": {"_uuid": "5e7a967eeff6c3b5c4fb234b5e98db2ddb495ee4", "_cell_guid": "b436ba2b-e9a7-4fd4-ad92-472b8ea4e8ce"}, "source": "To sum up, stastically there is good chance to survive for the babies with three siblings and expensive ticket :)", "execution_count": null}], "nbformat_minor": 1}