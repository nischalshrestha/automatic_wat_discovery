{"cells":[{"metadata":{"_uuid":"d034e98f2fe040f35ae60190d0170a0f374194f4","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0e9b9221a630f65fd822239370c2ddf325bd22d4"},"cell_type":"markdown","source":"Reading data into the kernal"},{"metadata":{"trusted":true,"_uuid":"8c78e1fc94901504e24260defb713155f889afa4"},"cell_type":"code","source":"train = read_csv(\"../input/train.csv\")\ntest = read_csv(\"../input/test.csv\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f879918085eb56c3149fad325fc42afbb199ee78"},"cell_type":"code","source":"train$NamePrefix = gsub(\".*,(.*)\\\\..*\", \"\\\\1\", train$Name)\nhead(train, n = 10)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3364e58f33347091bb48e9283878fedc1bf8b46a"},"cell_type":"code","source":"test$NamePrefix = gsub(\".*,(.*)\\\\..*\", \"\\\\1\", test$Name)\nhead(test, n = 10)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d8199abd066fb407cd262baeadabd1712960f80a"},"cell_type":"markdown","source":"### Steps in the EDA\n1. Summary of data, missing values"},{"metadata":{"trusted":true,"_uuid":"25f4568aa2e6de8fbc9c4544c1dbc048b02127d2"},"cell_type":"code","source":"by(data = train[, c('Survived', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin', 'Embarked')], INDICES = train[, c('Pclass')], summary)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1dd5b7d116e9208dda12624e184d101cf2492b26"},"cell_type":"code","source":"by(data = train[, c('Survived', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin', 'Embarked')], INDICES = train[, c('Sex')], summary)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"55dddfdf06b9cee16f251ed9f49e2cb76f3aaaaf","scrolled":false},"cell_type":"code","source":"by(data = train[, c('Survived', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin', 'Embarked')], INDICES = train[, c('Pclass', 'Sex')], summary)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0fcd3d3d4f4e53e131c79b7d2421b9eba8ca08c6"},"cell_type":"markdown","source":"The above summaries at the Pclass level, Gender level and Pclass+Gender level gives very interesting inferences\n1. Survival rate in female is higher than male\n2. SurvivalRate(Pclass1) > SurvivalRate(Pclass2) > SurvivalRate(Pclass3)\n3. age(Pclass1) > age(Pclass2) > age(Pclass3)\n\nPoint 2 and 3 tells a very interesting story. Younger people had less survival rate than older people. \n\nLet's plot some cool graphs and see visualise the numbers"},{"metadata":{"trusted":true,"_uuid":"7af47dc7f649b17cbe4540d39c9344414be56038"},"cell_type":"code","source":"unique(train$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":false,"_uuid":"b50ce60657327c882d9a5a31983d69c21671ef40"},"cell_type":"code","source":"library(gridExtra)\n# Survived vs Pclass\nplot1 = ggplot(data = train, aes(x = Pclass)) + geom_bar(aes(fill=factor(Survived)), stat = \"count\") #+ theme(aspect.ratio = 0.5)\n# plot1\n# Survived vs Sex\nplot2 = ggplot(data = train, aes(x = Sex)) + geom_bar(aes(fill=factor(Survived))) #+ theme(aspect.ratio = 0.5)\n# plot2\n# class vs sex\nplot3 = ggplot(data = train, aes(x = Pclass)) + geom_bar(aes(fill=Sex)) #+ theme(aspect.ratio = 0.5)\n# plot3\n# Survived vs Age\nplot4 = ggplot(data = train, aes(x = Age)) + geom_density(aes(fill=factor(Survived)), alpha=0.5, na.rm = TRUE) #+ theme(aspect.ratio = 0.5)\n# plot4\n# Survived vs SibSP\nplot5 = ggplot(data = train, aes(x = SibSp)) + geom_bar(aes(fill=factor(Survived)), alpha=0.5) #+ theme(aspect.ratio = 0.5)\n# plot5\n# Survived vs parch\nplot6 = ggplot(data = train, aes(x = Parch)) + geom_bar(aes(fill=factor(Survived)), alpha=1) # theme(aspect.ratio = 0.5)\n# plot6\n# Fair vs Survived\nplot7 = ggplot(data = train, aes(x = Fare)) + geom_density(aes(fill=factor(Survived)), alpha=0.5) #+ theme(aspect.ratio = 0.5)\n# plot7\n# # Embarked vs Survived\nplot8 = ggplot(data = train, aes(x = Embarked)) + geom_bar(aes(fill=factor(Survived))) #+ theme(aspect.ratio = 0.5)\n# plot8\ngrid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, plot7, plot8, nrow=4, ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"19e213a03c168583b4ba79402cb68c95b112ce18"},"cell_type":"markdown","source":"# Logistic Regression"},{"metadata":{"trusted":true,"_uuid":"fb00ca31de2c23380bc385ac5683ab45cfedeecd"},"cell_type":"code","source":"train = transform(train, Pclass = as.character(Pclass),\n                  SibSp = as.character(SibSp),\n                  Parch = as.character(Parch),\n                  Sex_encoded = as.character(ifelse(Sex=='male', 1, 0)), Embarked_encoded = as.character(ifelse(Embarked=='C', 1, ifelse(Embarked=='Q', 2, ifelse(Embarked=='S', 3, '')))))\nhead(train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fcbd8501773f83ccfdcc597cb53c2f5298d1fd49"},"cell_type":"code","source":"my_logit = glm(factor(Survived) ~ (Pclass)*(Sex_encoded)*Age*(SibSp)*(Parch)*Fare*(Embarked_encoded),\n               family = \"binomial\", data = train)\nsummary(my_logit)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8a79dc3a66d4ce0dea74680800970c39f0160333","scrolled":true},"cell_type":"code","source":"my_logit2 = glm(factor(Survived) ~ (Pclass) + (Sex_encoded) + Age,\n               family = \"binomial\", data = train)\nsummary(my_logit2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"803b1bf6e96d6330112f3570c4b63e8c10b6e726"},"cell_type":"code","source":"by(data =train[, c('Survived', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin', 'Embarked')], INDICES = train[, c('NamePrefix')], summary)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ee840ee7fa41218a7c1129ec5990d8f8da5f980f"},"cell_type":"code","source":"test = transform(test, Pclass = as.character(Pclass),\n                  SibSp = as.character(SibSp),\n                  Parch = as.character(Parch),\n                  Sex_encoded = as.character(ifelse(Sex=='male', 1, 0)), \n                  Embarked_encoded = as.character(ifelse(Embarked=='C', 1, ifelse(Embarked=='Q', 2, ifelse(Embarked=='S', 3, '')))))\n\n# for Master\ntest$Age <- ifelse(is.na(test$Age) == TRUE & test$NamePrefix=='Master', 4.574, test$Age) \ntest$Age <- ifelse(is.na(test$Age) == TRUE & test$NamePrefix=='Miss', 21.77, test$Age)\ntest$Age <- ifelse(is.na(test$Age) == TRUE & test$NamePrefix=='Mr', 32.37, test$Age)\ntest$Age <- ifelse(is.na(test$Age) == TRUE & test$NamePrefix=='Mrs', 35.73, test$Age)\ntest$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='male', 30.73, test$Age)\ntest$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='female', 27.92, test$Age)\n\n# # for male\n# test$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='male' & test$Pclass=='1', 40, test$Age) # Pclass=1\n# test$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='male' & test$Pclass=='2', 30, test$Age) # Pclass=2\n# test$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='male' & test$Pclass=='3', 25, test$Age) # Pclass=3\n\n# # for female\n# test$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='female' & test$Pclass=='1', 35, test$Age) #Pclass=1\n# test$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='female' & test$Pclass=='2', 28, test$Age) #Pclass=2\n# test$Age <- ifelse(is.na(test$Age) == TRUE & test$Sex=='female' & test$Pclass=='3', 21.5, test$Age) #Pclass=3\n# head(test, n = 10)\nsapply(test, function(x){sum(is.na(x))})","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"96ed4e49767f5e1748114b4d6bcf8cbf5b4a74b7"},"cell_type":"code","source":"# test[, 1:13][is.na(test[,1:13])] <- 0\npred = data.frame(pred = predict(my_logit2, newdata = test, type = \"response\"))\npred = transform(pred, Survived = ifelse(pred>0.5, 1, 0), PassengerId = seq(from = 892, length.out = 418))\ngender_submission = pred[, c('PassengerId', 'Survived')]\n# gender_submission[, 2][is.na(gender_submission[, 2])] <-0\nhead(gender_submission)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"aaf9b7f222b8336178914a92cb3056e538249553"},"cell_type":"markdown","source":"## Extreme Gradient Boosting (XGB)\n\nRef - https://cran.r-project.org/web/packages/xgboost/vignettes/xgboostPresentation.html#xgboost-r-tutorial"},{"metadata":{"trusted":true,"_uuid":"89b53d9f7be6e99ce40d2af876b5dfa54c0519c2"},"cell_type":"code","source":"install.packages(\"xgboost\")\nrequire(xgboost)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bd87875e3046e8a1ca2622f2c502f0dc8e3e9e64"},"cell_type":"code","source":"data(agaricus.train, package='xgboost')\ndata(agaricus.test, package='xgboost')\ntrain <- agaricus.train\ntest <- agaricus.test","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}