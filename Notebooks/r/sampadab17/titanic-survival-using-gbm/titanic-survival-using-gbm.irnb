{"cells":[{"metadata":{"_uuid":"fcb9ea22136b03dfd88a9e4e1cfdb378cefe75ff","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.\n\n#loading and exploring datasets\ntrain <- read.csv('../input/train.csv')\ntest <- read.csv('../input/train.csv')\n\nstr(train)\nstr(test)\nsummary(train)\nsummary(test)\n\n#check if data has any missing values\nlibrary(Amelia)\nmissmap(train, main='Missing Map for Training Data')\nmissmap(test, main='Missing Map for testing Data')\n\n#Imputing the NA's\ntrain[which(is.na(train$Age)),\"Age\"] <- mean(train$Age,na.rm = T)\ntest[which(is.na(test$Age)),\"Age\"] <- mean(test$Age,na.rm = T)\ntest[which(is.na(test$Fare)),\"Fare\"] <- 36\n\n#data transformation\ntrain$Sex <- as.numeric( ifelse(train$Sex==\"male\",2,1))\ntrain$Fare <- as.numeric(train$Fare)\ntrain$Ticket <- as.numeric(train$Ticket)\ntrain$Embarked <- as.numeric(train$Embarked)\ntrain$Survived <-as.factor(train$Survived)\ntrain$PassengerId <- NULL\ntrain$Name <-NULL\ntrain$Cabin <- as.numeric(train$Cabin)\nstr(train)\n\ntest$Sex <- as.numeric( ifelse(test$Sex==\"male\",2,1))\ntest$Fare <- as.numeric(test$Fare)\ntest$Ticket <- as.numeric(test$Ticket)\ntest$Embarked <- as.numeric(test$Embarked)\ntest$Name <- NULL\nPASS <- test$PassengerId\ntest$PassengerId <- NULL\ntest$Cabin <- as.numeric(test$Cabin)\nstr(test)\n\n#fitting model\nlibrary(caret)\nlibrary(gbm)\nfitControl <- trainControl(method = \"repeatedcv\",number = 10, repeats = 10)\nset.seed(22)\nmodel <- train(train[,2:10],train$Survived, method=\"gbm\", trControl=fitControl,verbose=F)\nsummary(model)\n\npre_train <- predict(model, newdata = train, type = \"raw\")\n#accuracy for training dataset\nmean(pre_train==train$Survived)      #0.8945\n\n#predictions for Test Dataset\npred_test <- predict(model, newdata = test, type = \"raw\")\ntable(pred_test)\nresult <- data.frame(PassengerId=PASS,Survived=pred_test)\nhead(result)\n#write.csv(result,\"Titanic Survival(gbm).csv\",row.names = F)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"202184b611032c35c5e92db03f669b14f9b5ebe6"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}