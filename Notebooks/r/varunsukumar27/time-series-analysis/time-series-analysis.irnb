{"cells":[{"metadata":{"_uuid":"c309dc58b7423fee848ec53b3e95607556279025"},"cell_type":"markdown","source":"**1.1 INTRODUCTION**\n\nThis has nothing to do with the titanic problem. This notebook provides a quick introduction to time series analysis and the various forecasting techniques involved in the process. \n\n**About the data**\n\nThe data is from the [time series data library](http://datamarket.com/data/list/?q=provider%3Atsdl).\nThe data contains the car sales information in Quebec."},{"metadata":{"_uuid":"f7a060fbf3ac33d4c4b8fca16d6e27afde0a5847"},"cell_type":"markdown","source":"**2.1 LOADING THE DATASET**"},{"metadata":{"_uuid":"7fb580ce0ae41ebf3c0aa7dfb1d70e361320169d","_execution_state":"idle","trusted":true},"cell_type":"code","source":"# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(stringr) \nlibrary(dplyr)\nlibrary(forecast)\nlibrary(MLmetrics)\nlibrary(tseries)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\ncars <- read.csv(\"../input/monthly-car-sales-in-quebec/monthly-car-sales-in-quebec-1960.csv\", stringsAsFactor = F)\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e5f932a1d971d6bb2f3c6770d7b55f2c714ca3eb"},"cell_type":"markdown","source":"**Lets have a look into the data**"},{"metadata":{"trusted":true,"_uuid":"3169039364ec55ce61c630e8353efd260d3a2497"},"cell_type":"code","source":"head(cars)\ntail(cars)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c98f0a0e104c9bc9b547a7c757ee1e6db5ef8403"},"cell_type":"markdown","source":"- The dataset contains month and year with the respective sales number.\n- The sales numbers are from January 1960 to December 1968.\n\n\nFirst thing we will do is to rename the columns."},{"metadata":{"trusted":true,"_uuid":"c20392899abc33e00599fabae4b49954620cbab6"},"cell_type":"code","source":"colnames(cars) <- c(\"Date\", \"Sales\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4728c855144ad87e7ef18f6f817abcd39fa005a7"},"cell_type":"markdown","source":"We can remove the last row of the dataset as it does not add value to our analysis."},{"metadata":{"trusted":true,"_uuid":"817a2299947790c2b6267c80c59962e89b79144d"},"cell_type":"code","source":"cars <- cars[1:108,]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e9550bfacfc1318c0adc7d32166696ed8f4908db"},"cell_type":"code","source":"class(cars$Date)\n\nyear_month <- data.frame(str_split_fixed(cars$Date,\"-\",2))\ncolnames(year_month) <- c(\"Year\", \"Month\")\n\ncars <- cbind(cars, year_month)\n\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"848e52fde6fbbbd1b62172c88f53c93b66ce7886"},"cell_type":"markdown","source":"**3. Exploring the time series data.**\n\nVisualizing the data."},{"metadata":{"trusted":true,"_uuid":"c00cd14e40eda694fb632d1962dd420de3645760"},"cell_type":"code","source":"cars %>%\nggplot(aes(x = factor(Date), y = Sales, group = 1)) +\ngeom_line() +\ntheme(axis.text.x = element_text(angle = 90, hjust = 1)) +\nlabs(x = \"Date in Year - Month\", y = \"Sales of Cars in Quebec\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"95c1f29db9ef8e1a485d14064aa7a12ea72630f0"},"cell_type":"markdown","source":"We can see an increasing trend in the data. **LET'S CONFIRM THAT.**"},{"metadata":{"trusted":true,"_uuid":"35a4ef729a383694c653bd9e5b93accb5f610eba"},"cell_type":"code","source":"cars %>%\ngroup_by(Year) %>%\ndplyr::summarise(Total_Buyers = sum(Sales)) %>%\nggplot(aes(x = factor(Year), y = Total_Buyers, group = 1)) +\ngeom_line() +\nlabs(x = \"Year\", y = \"Total Sales\") +\ntheme_bw()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9354e50d373425a87fba2fe83063161a4cda3d49"},"cell_type":"markdown","source":"We can clearly see the total sales have increased through the years."},{"metadata":{"trusted":true,"_uuid":"8c3e2ff1b0942e92c1c0c18fd73348e432c51339"},"cell_type":"code","source":"cars %>%\ngroup_by(Year, Month) %>%\ndplyr::summarise(Total_Buyers = sum(Sales)) %>%\nggplot(aes(x = factor(Month), y = Total_Buyers, group = 1)) +\ngeom_line() +\nfacet_wrap(~factor(Year))+\nlabs(x = \"Months\", y = \"Total Sales\") +\ntheme_bw()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"84a385bd002f672c9ad18fa5e92589792c828627"},"cell_type":"markdown","source":"There is a peak every year in the 5th month and a drop in the 9th month."},{"metadata":{"_uuid":"1a8009716c8f20e34bbc3611168ed25a416873ca"},"cell_type":"markdown","source":"**4. PARTITIONING DATA FOR PERFORMANCE EVALUATION******"},{"metadata":{"_uuid":"ed505b46c1a01ca1a671cda099de985aa785e454"},"cell_type":"markdown","source":"Create a time series object.\nUse the **ts** function from the **forecast** library."},{"metadata":{"trusted":true,"_uuid":"c82320c2b33214a58e3f389b4a5da36f49abe080"},"cell_type":"code","source":"cars.ts <- ts(cars$Sales, start = c(1960,1), end = c(1968,12), frequency = 12)\ntime <- time(cars.ts)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c6868ef2a1b3bb39aea2bb61f3905938a87929f4"},"cell_type":"markdown","source":"As the data is affected by seasonality, lets take the last 12 months of data as the testing set.\n\nSince there is a clear trend and seasonality, I have differenced the time series data."},{"metadata":{"trusted":true,"_uuid":"9be22c666ce93d070ae43a4ef7b871605d106d23"},"cell_type":"code","source":"test.length <- 12\nn.train <- length(cars.ts) - test.length\ntrain.ts <- window(cars.ts, start = time[1], end = time[n.train])\ntest.ts <- window(cars.ts, start = time[n.train+1], end = time[n.train+test.length])","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d7d3fc611fbe4430fa5076e3bbd2c0aa359517a4"},"cell_type":"markdown","source":"**5. PERFORMANCE EVALUATION METRICS**\n\nTo evaluate the performance of the algorithms we will be using.\n\n1. CHARTS:\n    - Compare Actual vs Forecast.\n    - Examine Forecast Errors.\n2. METRICS:\n    - MAPE(Mean Absolute Percentage Error)\n    \n    "},{"metadata":{"_uuid":"7ba6c9e433e4221615402f727301b0eb6eb2efa5"},"cell_type":"markdown","source":"**6. DICKEY FULLER TEST**\n\nTest to identify whether the time series data is stationary or not."},{"metadata":{"trusted":true,"_uuid":"f53c8323673adf71f3468a91e31f17425b78312b"},"cell_type":"code","source":"adf.test(cars.ts, alternative=\"stationary\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fa56866dea6f84d4c509e587cd598810ca0027df"},"cell_type":"markdown","source":"According to the results of the test, the series is stationary enough to perform any time series modelling."},{"metadata":{"_uuid":"2d000ef9babe03f248005c5d05173fa6c058faf2"},"cell_type":"markdown","source":"**7. MOVING AVERAGE FORECASTING**\n\nForecasting based on the average of several past points.\n\nImportant Parameter: Window Width, W.\n    - If W = length of training period then it is called over smoothing.\n    - if W = 1 then it is called under smoothing."},{"metadata":{"trusted":true,"_uuid":"f196e3c6d084f1e8432bbf8ee941500cde682ede","scrolled":true},"cell_type":"code","source":"library(zoo)\n\nma.trailing <- rollmean(train.ts, k=4, align = \"right\")\nlast.ma <- tail(ma.trailing, 1)\nma.trailing.pred <- ts(rep(last.ma, 4), start = c(1968, 1), end = c(1968,12), frequency = 12)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7282ba32bff369f940dd390056a7eb9930a449af"},"cell_type":"code","source":"plot(cars.ts,col = \"red\")\nlines(ma.trailing.pred, col = \"blue\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"95db336060299b67cdc1f88d244e99577849eb96"},"cell_type":"markdown","source":"*The lines in red are the original car sales value. The line in blue is the forecast.*\n\nIt is quite clear that the forecast from the moving average is just the average of the selected window.\n"},{"metadata":{"trusted":true,"_uuid":"d323a5d03080a9db93cf3a243cc410cef5a9db6d"},"cell_type":"code","source":"mape.ma <- round(MAPE(ma.trailing.pred, test.ts)*100,2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ebd677f4221f9b0494b079df4894ab970c85906a"},"cell_type":"markdown","source":"The Mean Percentage Error is 18.46%, which is not a bad value but our forecast is not good. so it is better to look at our error value plot."},{"metadata":{"trusted":true,"_uuid":"1bfccdb318a043d0edefb6aed842e76b73679bc0"},"cell_type":"code","source":"plot(test.ts - ma.trailing.pred)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6503f0b988698402dd61cacd46430c86f1ababa9"},"cell_type":"markdown","source":"1. The plot shows us how exactly our forecasts are."},{"metadata":{"_uuid":"51936e0735f5d4cd81e1efce0804704f8481c872"},"cell_type":"markdown","source":"**8. SIMPLE EXPONENTIAL SMOOTHING**\n\n- Forecast future values using a weighted averages of the future values.\n- Forecast using data that has no trend and no seasonality.\n\nForecast F(t+1) = F(t) + (alpha)(E(t))\n\nwhere F(t+1) is the forecast,\n            F(t) is the previous value,\n            E(t) is the error from the previous forecast.            \n            alpha is the smoothing constant,\n                - alpha = 1 will result in under smoothing.\n                - alpha  = 0 will result in over smoothing.\n            \n"},{"metadata":{"trusted":true,"_uuid":"2840e238f68f80b66901a27bb9236db5379fe9db"},"cell_type":"code","source":"mse <- list()\n\nfor(i in seq(0.1,0.9,0.1)){\nses <- ets(train.ts, model = \"ANN\", alpha = i)\nses.forecast <- forecast(ses, h=12)\nmse[as.integer(i*10)] <- MSE(as.numeric(test.ts), as.numeric(ses.forecast$mean))\n}\n\nmse.plot <- data.frame(Alpha = seq(0.1,0.9,0.1), Mse = unlist(mse))\n\nmse.plot %>%\nggplot(aes(x = Alpha,y = Mse, group = 1)) +\ngeom_line() +\ntheme_bw()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c5d03aff2bc3887e8c34246470c18872c84d40bb"},"cell_type":"markdown","source":"The alpha value with the smallest MSE is 0.1. Let's build the final model with **alpha = 0.1**."},{"metadata":{"trusted":true,"_uuid":"42d1c77155cf91df192af76044b408eebea83ce2"},"cell_type":"code","source":"final.ses <- ets(train.ts, model = \"ANN\", alpha = i)\nses.forecast <- forecast(final.ses, h=12)\nplot(cars.ts,col = \"red\")\nlines(ses.forecast$mean, col = \"blue\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"33af95d159cc891e0555ca132a8698e327e5a258"},"cell_type":"code","source":"plot(ses.forecast)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"474112c58e3a84533c7f9d4e91b134391f391a70"},"cell_type":"code","source":"mape.ma <- round(MAPE(ses.forecast$mean, test.ts)*100,2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"98afe30869d02a78350c773105a443bc6dde8a41"},"cell_type":"markdown","source":"The Mean Percentage Error is 21.17%, which is not better than the moving averages model."},{"metadata":{"trusted":true,"_uuid":"47588ea85beeeacb4bd8a26b4a28f75b243670a1"},"cell_type":"code","source":"plot(test.ts - ma.trailing.pred, col = \"red\")\nlines(test.ts - ses.forecast$mean, col = \"blue\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f85925386ca4e5a8941dbbac977d027df22eb0e6"},"cell_type":"markdown","source":"From the graph it is clear that SES makes a lot of forecasts closer to the actual value. "},{"metadata":{"_uuid":"c5373d675b30a3fb1338c2fc69f778017b74d05c"},"cell_type":"markdown","source":"MORE to Continue."},{"metadata":{"_uuid":"69860b91fa21d667063c1e53b66ac6c606636385"},"cell_type":"markdown","source":"**9. HOLT'S EXPONENTIAL SMOOTHING**\n\n- Forecast using data that has trend and no seasonality."},{"metadata":{"_uuid":"c263f82d5b1ea7732189221ec21c2a0df85280ca"},"cell_type":"markdown","source":"**10. WINTER'S EXPONENTIAL SMOOTHING**\n\n- Forecast using data that has trend and seasonality."},{"metadata":{"_uuid":"ea61f92e61aba8ac5b720c62d8f0ea17bab57b36"},"cell_type":"markdown","source":""}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}