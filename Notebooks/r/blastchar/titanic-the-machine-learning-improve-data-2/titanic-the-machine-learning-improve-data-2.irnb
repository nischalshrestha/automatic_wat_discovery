{"cells": [{"cell_type": "markdown", "metadata": {}, "source": ["## Index ##\n", "\n", "1. Assign Necessary Libraries\n", "2. Loadind the Data\n", "    + Data Info\n", "    + Loading the files \n", "    + Check some info about structure\n", "    + Check some info about the columns\n", "3. Data Cleaning\n", "    + Missing data is Bad\n", "    + Titles are Important"]}, {"cell_type": "markdown", "metadata": {}, "source": ["# **Assign Necessary Libraries**"]}, {"cell_type": "code", "metadata": {"_cell_guid": "8ea14161-58d4-4b83-8ee4-ca807d2056ec", "_uuid": "407b6b0442e295de42f653c5b9ef3bebe8e0f8bc"}, "outputs": [], "execution_count": null, "source": ["# supress anoing warnings for now\n", "options(warn=-1)\n", "\n", "# Necessary Libraries \n", "library(ggplot2)\n", "library(cowplot)\n", "\n", "library(lattice)\n", "library(caret)\n", "library(MASS)\n", "\n", "# for describe the data\n", "library(psych)\n", "\n", "# need for the vim library \n", "library(colorspace)\n", "library(grid)\n", "library(data.table)\n", "\n", "# for validate missing data \n", "library(mice) \n", "library(VIM)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "37e66f04-8a34-4c6e-ada4-246d33c7acdd", "_uuid": "dfae87eb3d9853e09763e2618a0f42ed4a883760"}, "source": ["# **Loadind the Data**\n", "**Data Info:**\n", "\n", "survival -- If survived\t(0 = No, 1 = Yes)\n", "\n", "pclass -- Ticket class\t(1 = 1st, 2 = 2nd, 3 = 3rd)\n", "\n", "embarked -- Port of Embarkation  (C = Cherbourg, Q = Queenstown, S = Southampton)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["** Loading the files **"]}, {"cell_type": "code", "metadata": {"_cell_guid": "f28eb44b-fd9b-4845-ad49-6ebbace75898", "_uuid": "3a3036713571a7fd9baa69ae2998888d52ae50d3"}, "outputs": [], "execution_count": null, "source": ["# load train.csv\n", "DstTrain <- read.csv('../input/train.csv', stringsAsFactors = FALSE)\n", "# load test.csv\n", "DstTest  <- read.csv('../input/test.csv', stringsAsFactors = FALSE)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["** Check some info about structure **"]}, {"cell_type": "code", "metadata": {"_cell_guid": "746f4c27-df06-48f9-b0f2-9cee63b0a8b0", "_uuid": "13ebf515d1bb3794061390ec2b1ce9e9f39d2561"}, "outputs": [], "execution_count": null, "source": ["# check data sample \n", "head(DstTrain, n=5L)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "fb588268-c8b8-417c-b27c-e8a74f7621dd", "_uuid": "866d873331428163a5f48f73a38644b9a10e4243"}, "outputs": [], "execution_count": null, "source": ["# dimensions of dataset\n", "dim(DstTrain)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "4a1dc97e-0b6c-4538-aec0-cae8d36666c3", "_uuid": "0815d93dc0a5f3566087a3a4c863fb60aea274c7"}, "outputs": [], "execution_count": null, "source": ["# check column type\n", "sapply(DstTrain, typeof)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["** Check some info about the columns **"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["# show columns info\n", "str(DstTrain)"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["# Describe the load data only numerics\n", "describeBy(DstTrain[,sapply(DstTrain, is.numeric)], na.rm = TRUE)"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["# unique to validate if \"\" exist\n", "unique(DstTrain$Sex)\n", "unique(DstTrain$Embarked)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "a6ed0a80-355e-466a-8587-275a795ec252", "_uuid": "fca6c32f90714d7e2e8d97c52fafa789f3401adf"}, "source": ["## **Data Cleaning**"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "a03921ae-51e9-4912-954b-649de60da827", "_uuid": "02ea9b292394541d7f71d1f14476413489bfe48c"}, "source": ["**Missing data is Bad**\n", "\n", "Lets check the missing data and try to complete it"]}, {"cell_type": "code", "metadata": {"_cell_guid": "98cf4cf4-6046-48ca-b028-3ea04d616436", "_uuid": "965cdf52765e21788ff2fa617604fe0c74262e07"}, "outputs": [], "execution_count": null, "source": ["# check for the pattern of missing data\n", "md.pattern(DstTrain)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "d1e3d22c-d24a-4b34-8f92-6f7d878f48e3", "_uuid": "a89844b830d4d9262f03e1b1232ca93d5858007e"}, "outputs": [], "execution_count": null, "source": ["# let check who have missing data\n", "pMiss <- function(x){sum(is.na(x))/length(x)*100}\n", "apply(DstTrain,2,pMiss)\n", "#apply(DstTrain,1,pMiss)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "1dffa9d5-68a7-45d1-ad9a-c7f2897f2063", "_uuid": "f57509eb852c74e9faa2baabcc81b6edc300a790"}, "outputs": [], "execution_count": null, "source": ["# more helpful visual representation\n", "aggr_plot <- aggr(DstTrain, col=c('#8cb3d9','#4d0000'), \n", "                  numbers=TRUE, sortVars=TRUE, labels=names(DstTrain), \n", "                  cex.axis=.7, gap=3, ylab=c(\"Histogram of missing data\",\"Pattern\"))"]}, {"cell_type": "code", "metadata": {"_cell_guid": "f1d24bcf-9995-4f8a-8249-b6314dc6eb5a", "_uuid": "b04fc73404f4da5ff96bb6f825f04dc0fc550d7e"}, "outputs": [], "execution_count": null, "source": ["# more helpful visual representation\n", "marginplot(DstTrain[c(1,6)], col=c('#8cb3d9','#4d0000'))"]}, {"cell_type": "code", "metadata": {"_cell_guid": "7a638711-c479-4653-9f6d-42e906187674", "_uuid": "03d1062d09d12b22817deb1b97e62713ffdc1070"}, "outputs": [], "execution_count": null, "source": ["# let focus on the age column for now\n", "summary(DstTrain$Age)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "219453c5-d1f5-4f17-be51-449a59760c79", "_uuid": "6d0240f8e14e22d27b9635c7c5e0503c4a4160cd"}, "outputs": [], "execution_count": null, "source": ["# Imputing the missing data\n", "# The mice() function takes care of the imputing process\n", "newAgeData <- mice(DstTrain,m=5,maxit=50,meth='pmm',seed=500)\n", "summary(newAgeData)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "6a6bd9bd-90fa-4283-9b27-b5cce1b35033", "_uuid": "8229d837c2be619b657009f0f17c45ae43486511"}, "outputs": [], "execution_count": null, "source": ["# the complete clean dataset\n", "DstTrainClean <- complete(newAgeData,1)\n", "\n", "#check for missing\n", "apply(DstTrainClean,2,pMiss)"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["# Compute the largest y value used in the Age remove NA\n", "NoNAAge <- DstTrain[!is.na(DstTrain$Age),c(\"Age\")]\n", "hist(NoNAAge, col=heat.colors(10), breaks=10, main=\"Original ages\")"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["#Clean Ages dataset\n", "hist(DstTrainClean$Age, col=heat.colors(10), breaks=10, main=\"Clean NA ages\")"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["# check DstTest\n", "apply(DstTest,2,pMiss)"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["newData <- mice(DstTest,m=5,maxit=50,meth='pmm',seed=500)"]}, {"cell_type": "code", "metadata": {}, "outputs": [], "execution_count": null, "source": ["# the complete clean dataset\n", "DstTestClean <- complete(newData,1)\n", "\n", "# check DstTestClean\n", "apply(DstTestClean,2,pMiss)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "31be3a68-beb5-4659-b8a1-247b9ee37e6a", "_uuid": "3682f1ed90536d3cd3009fcb9dc24f6852389bc1"}, "source": ["**The Titles are Important**\n", "\n", "Take care of people titles and check how important they are for survive"]}, {"cell_type": "code", "metadata": {"_cell_guid": "dee37427-f951-42ab-b350-59dc8dfdf862", "_uuid": "ee76c971ea3feab3a9a82cc9d18d5b4659ab2f9c"}, "outputs": [], "execution_count": null, "source": ["# get the title from name\n", "DstTrainClean$Title <- gsub('(.*, )|(\\\\..*)', '', DstTrainClean$Name)\n", "DstTestClean$Title <- gsub('(.*, )|(\\\\..*)', '', DstTestClean$Name)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "6e04a96a-d078-474e-906c-032c5f197d8d", "_uuid": "1bc35f940d1fcfdd412cfd3791a31b8e76281314"}, "outputs": [], "execution_count": null, "source": ["# histogram of Title\n", "ggplot(DstTrainClean, aes(Title,fill = factor(Survived))) + \n", "geom_histogram(stat=\"count\") + \n", "theme(axis.text.x = element_text(angle = 60, hjust = 1))"]}, {"cell_type": "code", "metadata": {"_cell_guid": "8602efcd-cbef-4147-a702-a7ed37314acb", "_uuid": "202032e70c9be9e32bb7a9833bffa1e2848c91ee"}, "outputs": [], "execution_count": null, "source": ["# Titles by Sex\n", "table(DstTrainClean$Sex, DstTrainClean$Title)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "70101250-4662-4e02-9986-65f0edd9c21f", "_uuid": "e465d76c76361629fd01cf68169f759ec7c102fd"}, "outputs": [], "execution_count": null, "source": ["# 'Mr', 'Mrs', 'Miss', 'Mme', 'Ms', 'Mlle'\n", "# 'Master', 'Major', 'Capt', 'Col', 'Rev', 'Dr'\n", "# 'the Countess', 'Jonkheer', 'Lady', 'Sir', 'Don', 'Dona'\n", "\n", "Nobility.woman <- c('the Countess', 'Lady', 'Dona')\n", "Nobility.man <- c('Jonkheer', 'Sir', 'Don')\n", "Crew <- c('Master', 'Major', 'Capt', 'Col', 'Rev', 'Dr')\n", "Passenger.woman <- c('Mrs', 'Miss', 'Mme', 'Ms', 'Mlle')\n", "Passenger.man <- c('Mr')\n", "\n", "DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Nobility.woman, 'Nobility.woman','')\n", "DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Nobility.man, 'Nobility.man',DstTestClean$TitleType)\n", "DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Crew, 'Crew',DstTestClean$TitleType)\n", "DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Passenger.woman, 'Passenger.woman',DstTestClean$TitleType)\n", "DstTestClean$TitleType <- ifelse(DstTestClean$Title %in% Passenger.man, 'Passenger.man',DstTestClean$TitleType)\n", "\n", "DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Nobility.woman, 'Nobility.woman','')\n", "DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Nobility.man, 'Nobility.man',DstTrainClean$TitleType)\n", "DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Crew, 'Crew',DstTrainClean$TitleType)\n", "DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Passenger.woman, 'Passenger.woman',DstTrainClean$TitleType)\n", "DstTrainClean$TitleType <- ifelse(DstTrainClean$Title %in% Passenger.man, 'Passenger.man',DstTrainClean$TitleType)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "0cca96b9-7d5d-4e4d-8300-64af72b227de", "_uuid": "888f9ab679c79e98f547ee6d30e2476c63855f60"}, "outputs": [], "execution_count": null, "source": ["# clean NA values\n", "#DstTrain[is.na(DstTrain)] <- 0\n", "#DstTest[is.na(DstTest)] <- 0"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "4c51c93c-df99-4499-9410-83ddeea9a3ea", "_uuid": "2cccd29b0dc236ce2406c98f0ece2daa1cf40967"}, "source": ["**Explore Data**"]}, {"cell_type": "code", "metadata": {"_cell_guid": "446bc194-9aee-4f59-bae6-c3d82a62a130", "_uuid": "01fdb0b414bd722626b2259a85245a1751acdd2b"}, "outputs": [], "execution_count": null, "source": ["# histogram of SibSp\n", "plot.SibSp <- ggplot(DstTrainClean, aes(SibSp,fill = factor(Survived))) +\n", "    geom_histogram(stat = \"count\")\n", "\n", "# histogram of Pclass\n", "plot.Pclass <- ggplot(DstTrainClean, aes(Pclass,fill = factor(Survived))) +\n", "    geom_histogram(stat = \"count\")\n", "\n", "# histogram of Sex\n", "plot.Sex <- ggplot(DstTrainClean, aes(Sex,fill = factor(Survived))) +\n", "    geom_histogram(stat = \"count\")\n", "\n", "# histogram of Embarked\n", "plot.Embarked <- ggplot(DstTrainClean, aes(Embarked,fill = factor(Survived))) +\n", "    geom_histogram(stat = \"count\")\n", "\n", "# create the plot grid with all\n", "plot_grid(plot.SibSp, plot.Pclass, plot.Sex, plot.Embarked )"]}, {"cell_type": "code", "metadata": {"_cell_guid": "9a323415-e8d5-43ba-ac88-090577ca3ac9", "_uuid": "fb6aac260cde1e13e28112756f1394f59b0182f6"}, "outputs": [], "execution_count": null, "source": ["# histogram of Title Type\n", "ggplot(DstTrainClean, aes(TitleType,fill = factor(Survived))) + \n", "geom_histogram(stat=\"count\") + \n", "theme(axis.text.x = element_text(angle = 60, hjust = 1))"]}, {"cell_type": "code", "metadata": {"_cell_guid": "b1322d18-84ec-495e-895f-675398765205", "_uuid": "81cc0b2babc2417fdbc516e733e7e51358d634f2"}, "outputs": [], "execution_count": null, "source": ["# histogram of Age\n", "ggplot(DstTrainClean, aes(Age,fill = factor(Survived))) + \n", "geom_histogram(bins = 40)\n", "\n", "# histogram of Fare\n", "ggplot(DstTrainClean, aes(Fare,fill = factor(Survived))) + \n", "geom_histogram(bins = 40)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "e8d18a0f-bb0d-49f3-896e-18b04378c83f", "_uuid": "71de50750ef3823b042e2de51d85438d3b0ed164"}, "source": ["**Test Harness**\n", "\n", "Set-up the test harness to use 10-fold cross validation"]}, {"cell_type": "code", "metadata": {"_cell_guid": "9540e383-5c60-493d-89b2-02b66d3eb24d", "_uuid": "a5ed801800763df5048ff0959b9d10d7ba133db6"}, "outputs": [], "execution_count": null, "source": ["# Run algorithms using 10-fold cross validation\n", "control <- trainControl(method=\"cv\", number=10)\n", "metric <- \"Accuracy\""]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "fb033b80-5cbb-4eed-a657-843bc2146cf9", "_uuid": "8323a1e48a2507519613357199a1438d1e9cf3b8"}, "source": ["**Build Models**\n", "\n", "Let\u2019s evaluate 6 different algorithms:\n", "* Logistic Regression\n", "* Linear Discriminant Analysis (LDA)\n", "* Classification and Regression Trees (CART).\n", "* k-Nearest Neighbors (kNN).\n", "* Support Vector Machines (SVM) with a linear kernel.\n", "* Random Forest (RF)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "57456d86-0101-4183-8b93-235e838a33d1", "_uuid": "2b958d9b65d78e664f39c9b62e8d22801a06efcc"}, "outputs": [], "execution_count": null, "source": ["# create the test dataset with only the testing columns\n", "varsToKeep <- c(\"Survived\", \"TitleType\", \"Sex\", \"Age\", \"Pclass\", \"Embarked\", \"Fare\", \"SibSp\")\n", "DstTrainTest <- DstTrainClean[varsToKeep]\n", "\n", "# convert Survived to factor\n", "DstTrainTest$Survived <- as.factor(DstTrainTest$Survived)\n", "\n", "# logistic regression\n", "set.seed(7)\n", "fit.glm <- train(Survived ~ ., data=DstTrainTest, method=\"glm\", metric=metric, trControl=control)\n", "\n", "# linear algorithms\n", "set.seed(7)\n", "fit.lda <- train(Survived ~ ., data=DstTrainTest, method=\"lda\", metric=metric, trControl=control)\n", "\n", "# CART\n", "set.seed(7)\n", "fit.cart <- train(Survived ~ ., data=DstTrainTest, method=\"rpart\", metric=metric, trControl=control)\n", "\n", "# kNN\n", "set.seed(7)\n", "fit.knn <- train(Survived ~ ., data=DstTrainTest, method=\"knn\", metric=metric, trControl=control)\n", "\n", "# SVM\n", "set.seed(7)\n", "fit.svm <- train(Survived ~ ., data=DstTrainTest, method=\"svmRadial\", metric=metric, trControl=control)\n", "\n", "# Random Forest\n", "set.seed(7)\n", "fit.rf <- train(Survived ~ ., data=DstTrainTest, method=\"rf\", metric=metric, trControl=control)\n"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "b837b46e-2fc2-4901-89a5-5b01c86a55f1", "_uuid": "01014408e055e496622b840b1de65ca2304ba484"}, "source": ["**Select Best Model**"]}, {"cell_type": "code", "metadata": {"_cell_guid": "1e9ae740-bc88-4607-b571-ef5149456a2e", "_uuid": "15d994e2d12dbc84f7a1c157e4c0fe85b8797552"}, "outputs": [], "execution_count": null, "source": ["# summarize accuracy of models\n", "results <- resamples(list(\n", "    glm=fit.glm, \n", "    lda=fit.lda, \n", "    cart=fit.cart, \n", "    knn=fit.knn, \n", "    svm=fit.svm, \n", "    rf=fit.rf\n", "))\n", "summary(results)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "80737fc6-2774-4492-b7ae-9827402b308d", "_uuid": "ce5193bb420d4d8e3a3465387df69c567a4a2e9b"}, "outputs": [], "execution_count": null, "source": ["# compare accuracy of models\n", "dotplot(results)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "99ad6bc2-b3e3-47e7-83e4-6015b82551ab", "_uuid": "b049985d5ef13e0b4750456368455cafab920b8e"}, "source": ["**Testing the model accuracy**\n", "\n", "For the most accurate, Random Forest in this case"]}, {"cell_type": "code", "metadata": {"_cell_guid": "57517eb6-4675-4e0d-83ec-1fb3b0ebaa29", "_uuid": "b8d76f2f0147867361c31b6d663478feb284f4e9"}, "outputs": [], "execution_count": null, "source": ["# summarize Best Model\n", "print(fit.rf)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "32d89361-98fc-4013-a66c-ecf9b634a061", "_uuid": "85366e4c777b31f9f0ad099cd5d9c9bc94d70abd"}, "outputs": [], "execution_count": null, "source": ["# prediction \n", "predictedval <- predict(fit.rf, newdata=DstTrainTest)\n", "\n", "# summarize results with confusion matrix\n", "cm <- confusionMatrix(predictedval, DstTrainClean$Survived)\n", "cm$table\n", "\n", "# calculate accuracy of the model\n", "Accuracy<-round(cm$overall[1],2)\n", "Accuracy\n"]}, {"cell_type": "markdown", "metadata": {}, "source": ["![confusion matrix.](https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix_files/confusion_matrix_1.png)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "7bffcca1-14f8-47e3-b777-b3e90a469517", "_uuid": "cb38b2dd0845d56fc11e0977ead2be354baf357f"}, "source": ["**Submit the Prediction**"]}, {"cell_type": "code", "metadata": {"_cell_guid": "f5faf79a-d0f2-49a5-8546-e5dd96f3743b", "_uuid": "ba5a15eff243c83527a6416d0d812ee50a54bee7"}, "outputs": [], "execution_count": null, "source": ["# prediction \n", "predictedval <- predict(fit.rf, newdata=DstTestClean)"]}, {"cell_type": "code", "metadata": {"_cell_guid": "aebd45dc-3956-4472-b191-50a74c788354", "_uuid": "d59b23221af5ebe3138d08f8e001227412a01ebd"}, "outputs": [], "execution_count": null, "source": ["# create a csv file for submittion\n", "TitanicResult <- data.frame(PassengerId = DstTestClean$PassengerId, Survived = predictedval)\n", "table(TitanicResult$Survived)\n", "write.csv(TitanicResult,file = \"TitanicResult.csv\",row.names = FALSE)"]}], "metadata": {"language_info": {"codemirror_mode": "r", "version": "3.4.2", "mimetype": "text/x-r-source", "file_extension": ".r", "pygments_lexer": "r", "name": "R"}, "kernelspec": {"display_name": "R", "language": "R", "name": "ir"}}, "nbformat": 4, "nbformat_minor": 1}