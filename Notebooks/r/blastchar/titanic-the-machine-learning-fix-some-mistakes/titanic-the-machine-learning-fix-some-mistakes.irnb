{"cells":[{"metadata":{"_uuid":"3dfaf190d505548761b4bb9439719a58ebe601e5","_cell_guid":"421260c1-9811-483f-a785-c8e02e204fda"},"cell_type":"markdown","source":"# Intro\nI have notice that i have made some mistakes during my learning process, that's good because I can learn with them.","outputs":[],"execution_count":null},{"metadata":{"_uuid":"51a039c680ee802b132c7b7c5da9b19cf14abc9e","_cell_guid":"d74e834e-0777-48e9-9095-2f86f6470b9a"},"cell_type":"markdown","source":"# Index \n\n1. Assign Necessary Libraries\n2. Loadind the Data\n    + Data Info\n    + Loading the files \n    + Check some info about structure\n    + Check some info about the columns\n3. Data Cleaning\n    + Missing data is Bad\n    + Titles are Important\n    \n    ....","outputs":[],"execution_count":null},{"metadata":{"_uuid":"aca0755c8ec513e071b82b7ac44a8eba53f79957","_cell_guid":"e4acd581-0579-4c7f-a227-1bf9599b3431"},"cell_type":"markdown","source":"# Assign Necessary Libraries","outputs":[],"execution_count":null},{"metadata":{"_uuid":"407b6b0442e295de42f653c5b9ef3bebe8e0f8bc","trusted":true,"_cell_guid":"8ea14161-58d4-4b83-8ee4-ca807d2056ec"},"cell_type":"code","source":"# supress anoing warnings for now\noptions(warn=-1)\n\n# Necessary Libraries \nlibrary(ggplot2)\nlibrary(cowplot)\n\nlibrary(lattice)\nlibrary(caret)\nlibrary(MASS)\n\n# for describe the data\nlibrary(psych)\n\n# need for the vim library \nlibrary(colorspace)\nlibrary(grid)\nlibrary(data.table)\n\n# for validate missing data \nlibrary(mice) \nlibrary(VIM)\n\nlibrary(dplyr)\n\n#some color to life\nlibrary(wesanderson)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dfae87eb3d9853e09763e2618a0f42ed4a883760","_cell_guid":"37e66f04-8a34-4c6e-ada4-246d33c7acdd"},"cell_type":"markdown","source":"# **Loadind the Data**\n","outputs":[],"execution_count":null},{"metadata":{"_uuid":"24a12f73d6885ea85b0379c249c39b557727bc21","_cell_guid":"13130543-504e-427c-b2c7-61ec05cf5f27"},"cell_type":"markdown","source":"** Loading the files **","outputs":[],"execution_count":null},{"metadata":{"_uuid":"3a3036713571a7fd9baa69ae2998888d52ae50d3","trusted":true,"_cell_guid":"f28eb44b-fd9b-4845-ad49-6ebbace75898"},"cell_type":"code","source":"# load train.csv\nDstTrain <- read.csv('../input/train.csv', stringsAsFactors = FALSE, na.strings = c(\"NA\", \"\"))\n# load test.csv\nDstTest  <- read.csv('../input/test.csv', stringsAsFactors = FALSE, na.strings = c(\"NA\", \"\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ae89a458a54d8001fed78f3875f0d3e31ec3b26b","_cell_guid":"2639440b-72b4-4d2b-8cd7-d9e1881e5073"},"cell_type":"markdown","source":"**Combine all for easy data cleaning**\n\nAll together is easier to clean and explore the data  and insures better missing values prediction.","outputs":[],"execution_count":null},{"metadata":{"_uuid":"af18e5042605e98b66d46187ce2ab6301512341f","trusted":true,"_cell_guid":"6642eaf6-0b7a-4b4f-b3d4-c12e21e6d3af"},"cell_type":"code","source":"# set survived to NA on the test dataset\nDstTest$Survived <- NA\n\n# set the Set column \nDstTest$Set  <- \"Test\";\nDstTrain$Set <- \"Train\";\n\n# combine all the data\nDstAll <- rbind(DstTrain, DstTest);\n\n# set the TrainSet var\nTrainSet <- DstAll$Set == 'Train'\n\n# set the TestSet var\nTestSet <- DstAll$Set == 'Test'","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"92d1ab9ea73bf715d3e1a63934c52764ac080914","_cell_guid":"9e038a70-cc8a-4f8f-a071-ab632646afce"},"cell_type":"markdown","source":"# Checking the data\n\n** Check some info about structure **\n\nLet us explore the structure of the loaded data","outputs":[],"execution_count":null},{"metadata":{"_uuid":"13ebf515d1bb3794061390ec2b1ce9e9f39d2561","trusted":true,"_cell_guid":"746f4c27-df06-48f9-b0f2-9cee63b0a8b0"},"cell_type":"code","source":"# check data sample \nhead(DstAll, n=5L)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0815d93dc0a5f3566087a3a4c863fb60aea274c7","trusted":true,"_cell_guid":"4a1dc97e-0b6c-4538-aec0-cae8d36666c3"},"cell_type":"code","source":"# check column type\nsapply(DstAll, typeof)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bc7a0576139ad295ba544ac8c1c5d5af39298c13","_cell_guid":"ff81dc82-2d1d-4fec-b970-4228a3144174"},"cell_type":"markdown","source":"** Check some info about the columns **","outputs":[],"execution_count":null},{"metadata":{"_uuid":"fee0aeb92e840086c3f33ba55f90168f6b95c1e4","trusted":true,"_cell_guid":"8939ec5d-386f-457c-be29-d732ad3acff7"},"cell_type":"code","source":"# show columns info\nstr(DstAll)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5aa035f7709d8f9494c7fdc341252468c6614813","_cell_guid":"4af783e4-3f52-4677-bcfb-cc0f511f8743"},"cell_type":"markdown","source":"So the **Train** set is between **1 : 891** and the rest is the Test set","outputs":[],"execution_count":null},{"metadata":{"_uuid":"d3c34be789f7de81a6bed4b9550626ececc273cf","trusted":true,"_cell_guid":"fefe85b2-7b0b-4183-b731-ae660689740f"},"cell_type":"code","source":"# check the dataset dimensions\ndim(DstAll)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a8800417b7dd2aa2e23d382f632cbc193aadb256","trusted":true,"_cell_guid":"f085a799-457a-471d-b005-9bae12e9f94b"},"cell_type":"code","source":"# Describe the load data only numerics\ndescribeBy(DstAll[,sapply(DstAll, is.numeric)], na.rm = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ff3f4d7b3d832561d353e383f735d0e02e718cc5","trusted":true,"_cell_guid":"e0a3a96f-fcaa-430b-952a-5fa53df08ee3"},"cell_type":"code","source":"# Unique values per column\napply(DstAll,2,function(x) length(unique(x)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c30db1a1dd2a3918fad8555b45088167c17f198b","_cell_guid":"fde955dd-304b-4182-8839-5b8086e4218a"},"cell_type":"markdown","source":"**Data Info:**\n+ **sex** \n    + gender of the passenger (Male, Female)\n+ **survival**\n    + If survived\t(0 = No, 1 = Yes)\n+ **pclass**\n    + Ticket class\t(1 = 1st, 2 = 2nd, 3 = 3rd)\n+ **embarked**\n    + Port of Embarkation  (C = Cherbourg, Q = Queenstown, S = Southampton)","outputs":[],"execution_count":null},{"metadata":{"_uuid":"fca6c32f90714d7e2e8d97c52fafa789f3401adf","_cell_guid":"a6ed0a80-355e-466a-8587-275a795ec252"},"cell_type":"markdown","source":"# Correcting data","outputs":[],"execution_count":null},{"metadata":{"_uuid":"31853648d0ac3877cdf434e10ebd69a642099a7d","_cell_guid":"419427f4-b069-42ca-8186-8986b768c79a"},"cell_type":"markdown","source":"**Correcting some data**\n\nThe following fixes SibSp/Parch values for two passengers (Id=280 and Id=1284) according to [**this kernel**](https://www.kaggle.com/c/titanic/discussion/39787) because a 16 year old canâ€™t have a 13 year old son! ","outputs":[],"execution_count":null},{"metadata":{"_uuid":"76157072336cd5587a96f07711681c20b64719a1","trusted":true,"_cell_guid":"f4c93518-0649-44f0-884a-03bfedb72613"},"cell_type":"code","source":"# Some corrections to the data\nDstAll$SibSp[DstAll$PassengerId==280] <- 0\nDstAll$Parch[DstAll$PassengerId==280] <- 2\nDstAll$SibSp[DstAll$PassengerId==1284] <- 1\nDstAll$Parch[DstAll$PassengerId==1284] <- 1","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fa828cdd96befad097104a069f33774b65470a2b","_cell_guid":"80f8328b-39f1-4864-aab4-9d7621c844bd"},"cell_type":"markdown","source":"**Survived to factor**\n\nSurvived will be treated as a categorical target.","outputs":[],"execution_count":null},{"metadata":{"_uuid":"c3a68fe3c3a18b4f4097ed785a34b531e835fd22","trusted":true,"_cell_guid":"9e1a08ef-7e6f-4389-8261-72d0a41bfce8"},"cell_type":"code","source":"# Survived to categorical\nDstAll$Survived <- factor(DstAll$Survived);","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"02ea9b292394541d7f71d1f14476413489bfe48c","_cell_guid":"a03921ae-51e9-4912-954b-649de60da827"},"cell_type":"markdown","source":"# Cleaning missing data\n\nLets check the missing data and try to complete it","outputs":[],"execution_count":null},{"metadata":{"_uuid":"965cdf52765e21788ff2fa617604fe0c74262e07","trusted":true,"_cell_guid":"98cf4cf4-6046-48ca-b028-3ea04d616436"},"cell_type":"code","source":"# check for the pattern of missing data\nmd.pattern(DstAll)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a89844b830d4d9262f03e1b1232ca93d5858007e","trusted":true,"_cell_guid":"d1e3d22c-d24a-4b34-8f92-6f7d878f48e3"},"cell_type":"code","source":"# The missing data percentage by variable (exclude Survived)\nsapply(DstAll[,-c(2)], function(x) round((sum(is.na(x))/length(x)*100),2))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"26a68c5cc7e81c92d72d9fa5670cd81e7be37eac","trusted":true,"_cell_guid":"c29dc168-c7c7-4cb9-9273-4af3ed69adf1"},"cell_type":"code","source":"# Graphic view of the missing data\naggr(DstAll[,-c(1,2)], col=heat.colors(2), \n                  numbers=TRUE, sortVars=TRUE, \n     labels=names(DstTrain[,-c(1,2)]), ylab=c(\"Missing data\",\"Pattern\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"13b54a28ac1c734ad9d13d0a18a4fb9f560d7458","_cell_guid":"6bfcb52a-d8df-43ac-844c-b0a6fd263bb6"},"cell_type":"markdown","source":"** Cleaning Embarked column**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"3ef8d766a9ce4b0639146a5b6f48896432eb47e1","trusted":true,"_cell_guid":"6dd19eed-3a5d-41ac-9731-b548eec337f5"},"cell_type":"code","source":"# check the frequency of each option\ntable(DstAll$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"da1cb19a41006ca04b038be7886989cfd4cf77fd","trusted":true,"_cell_guid":"a792651a-f661-4e5f-90ad-632a34e312d8"},"cell_type":"code","source":"# some how Embarked have a strange char instead of NA or \"\"\n# lets clean it using the most common code to replace\nmissEmb <- is.na(DstAll$Embarked)\n\n# replace the NA \nDstAll[missEmb,]\nDstAll[missEmb,]$Embarked <- 'S'\n\n# show result \nDstAll[missEmb,]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5f5ffe2030901c45f8fa0e5416dd90622d507b3b","_cell_guid":"a4927e81-12dc-48c1-9e3c-99683dd6b489"},"cell_type":"markdown","source":"**Cleaning the Age and Fare column**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"6d0240f8e14e22d27b9635c7c5e0503c4a4160cd","trusted":true,"_cell_guid":"219453c5-d1f5-4f17-be51-449a59760c79"},"cell_type":"code","source":"# Imputing the missing data\n# The mice() function takes care of the imputing process\nnewData <- mice(DstAll,m=5,maxit=50,meth='pmm',seed=500)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8229d837c2be619b657009f0f17c45ae43486511","trusted":true,"_cell_guid":"6a6bd9bd-90fa-4283-9b27-b5cce1b35033"},"cell_type":"code","source":"# the complete clean dataset\nDstAllClean <- complete(newData,1)\n\n# Clear the survived variable\nDstAllClean[DstAllClean$Set == 'Test',]$Survived <- NA\n\n#check for missing\nsapply(DstAllClean[,-c(2)], function(x) round((sum(is.na(x))/length(x)*100),2))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4fda04b9aacfbd5e6ad2138fec15eb1e8f0bb9ab","trusted":true,"_cell_guid":"c4faad32-381c-4b2a-94bd-2cacbd22f28f"},"cell_type":"code","source":"# Compute the largest y value used in the Age remove NA\nNoNAAge <- DstAll[!is.na(DstAll$Age),c(\"Age\")]\nhist(NoNAAge, col=heat.colors(10), breaks=10, main=\"Original ages\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"95c753fbf28bec8f83a3f27f5a8ad6aaadc6a1df","trusted":true,"_cell_guid":"582cde5c-2688-48db-a3d5-660294004657"},"cell_type":"code","source":"#Clean Ages dataset\nhist(DstAllClean$Age, col=heat.colors(10), breaks=10, main=\"Clean NA ages\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"de47945bf449e48a2ec4a9485197dd7049560654","_cell_guid":"3f236adb-ba6c-4ae3-be7a-f1fa62b96715"},"cell_type":"markdown","source":"# Explore the Data","outputs":[],"execution_count":null},{"metadata":{"_uuid":"a9647387fedf75f085b8a912ab2de2a9cb53f75e","trusted":true,"_cell_guid":"4b02e47a-dec4-4ff3-b64b-4f4c296df520"},"cell_type":"code","source":"# histogram of SibSp\nplot.SibSp <- ggplot(DstAllClean[TrainSet,], aes(SibSp,fill = factor(Survived))) +\n    geom_histogram(stat = \"count\") +\n    scale_fill_brewer()\n\n# histogram of Pclass\nplot.Pclass <- ggplot(DstAllClean[TrainSet,], aes(Pclass,fill = factor(Survived))) +\n    geom_histogram(stat = \"count\") +\n    scale_fill_brewer()\n\n# histogram of Sex\nplot.Sex <- ggplot(DstAllClean[TrainSet,], aes(Sex,fill = factor(Survived))) +\n    geom_histogram(stat = \"count\") +\n    scale_fill_brewer()\n\n# histogram of Embarked\nplot.Embarked <- ggplot(DstAllClean[TrainSet,], aes(Embarked,fill = factor(Survived))) +\n    geom_histogram(stat = \"count\") +\n    scale_fill_brewer()\n\n# create the plot grid with all\nplot_grid(plot.SibSp, plot.Pclass, plot.Sex, plot.Embarked )","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8bd4e2596346fbf9d04e04a33eae8de6a42d4b16","_cell_guid":"af2c80ba-b08d-4745-8f8b-bee6e1956e8c"},"cell_type":"markdown","source":"# Create new variables\n**How about Kids**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"abd725593e49f51facb3c7a99661c63713a88947","trusted":true,"_cell_guid":"c37d7c27-7663-4325-a980-4c7787f7fc83"},"cell_type":"code","source":"# the kid factor\nDstAllClean$Kid[DstAllClean$Age <= 14] <- 1\nDstAllClean$Kid[DstAllClean$Age > 14] <- 0\n\n# Kid\nggplot(DstAllClean[TrainSet,], aes(Kid,fill = factor(Survived))) + \n    geom_bar(stat = \"count\") +\n    scale_fill_brewer()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3682f1ed90536d3cd3009fcb9dc24f6852389bc1","_cell_guid":"31be3a68-beb5-4659-b8a1-247b9ee37e6a"},"cell_type":"markdown","source":"**The Titles are Important**\n\nTake care of people titles and check how important they are for survive","outputs":[],"execution_count":null},{"metadata":{"_uuid":"ee76c971ea3feab3a9a82cc9d18d5b4659ab2f9c","trusted":true,"_cell_guid":"dee37427-f951-42ab-b350-59dc8dfdf862"},"cell_type":"code","source":"# get the title from name\nDstAllClean$Title <- gsub('(.*, )|(\\\\..*)', '', DstAllClean$Name)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1bc35f940d1fcfdd412cfd3791a31b8e76281314","trusted":true,"_cell_guid":"6e04a96a-d078-474e-906c-032c5f197d8d"},"cell_type":"code","source":"# histogram of Title\nggplot(DstAllClean[TrainSet,], aes(Title,fill = factor(Survived))) + \ngeom_histogram(stat=\"count\") + \ntheme(axis.text.x = element_text(angle = 60, hjust = 1)) +\n    scale_fill_brewer()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"202032e70c9be9e32bb7a9833bffa1e2848c91ee","trusted":true,"_cell_guid":"8602efcd-cbef-4147-a702-a7ed37314acb"},"cell_type":"code","source":"# Titles by Sex\ntable(DstAllClean$Sex, DstAllClean$Title)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e465d76c76361629fd01cf68169f759ec7c102fd","trusted":true,"_cell_guid":"70101250-4662-4e02-9986-65f0edd9c21f"},"cell_type":"code","source":"# Titles list\ncrew <- c('Capt', 'Col', 'Dr', 'Major', 'Rev')\nroyalty <- c('Dona', 'Lady', 'the Countess','Sir', 'Jonkheer', 'Don')\n\n# Reassign titles\nDstAllClean$Title[DstAllClean$Title == 'Mlle'] <- 'Miss' \nDstAllClean$Title[DstAllClean$Title == 'Ms'] <- 'Miss'\nDstAllClean$Title[DstAllClean$Title == 'Mme'] <- 'Mrs' \nDstAllClean$Title[DstAllClean$Title %in% royalty] <- 'Royalty'\nDstAllClean$Title[DstAllClean$Title %in% crew] <- 'Crew'","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"04d1eeb614aedbf6125664deab23c5960cbe71da","trusted":true,"_cell_guid":"9d539800-be4d-4914-a7ec-634d76e4cf9b"},"cell_type":"code","source":"# title\nggplot(DstAllClean[TrainSet,], aes(Title,fill = factor(Survived))) + \n    geom_bar(stat = \"count\") +\n    scale_fill_brewer()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"12a8fdc238dc07617b9060726406f37909d8127b","_cell_guid":"c55e3096-36fe-4fed-b5ea-25c61019a67b"},"cell_type":"markdown","source":"**Family size**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"d3209859d9bddd5a3d10bedcd28506c1ffc33d38","trusted":true,"_cell_guid":"e4bfb9ca-af59-43e3-86f0-2cae8f063ea2"},"cell_type":"code","source":"# Family size\nDstAllClean$FamilySize <- DstAllClean$SibSp + DstAllClean$Parch + 1\n\n# Group the sizes\nDstAllClean$FamilyType[DstAllClean$FamilySize == 1] <- 'Not Family'\nDstAllClean$FamilyType[DstAllClean$FamilySize <= 3 & DstAllClean$FamilySize > 1] <- 'Small'\nDstAllClean$FamilyType[DstAllClean$FamilySize > 3] <- 'Big'","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"47d2a966b7dcb88e23a4e34aa1d6d129a8435078","trusted":true,"_cell_guid":"5e37a7f6-ae93-450a-9bdc-1dbc8ed99301"},"cell_type":"code","source":"# FamilySize factor\nggplot(DstAllClean[TrainSet,], aes(FamilySize,fill = factor(Survived))) + \n    geom_bar(stat = \"count\") +\n    scale_fill_brewer()\n\n# FamilyType factor\nggplot(DstAllClean[TrainSet,], aes(FamilyType,fill = factor(Survived))) + \n    geom_bar(stat = \"count\") +\n    scale_fill_brewer()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ba4531a6342a728680372b6e077167105586bb00","trusted":true,"_cell_guid":"593c7ed9-3f5a-4f10-be68-ffc1ed6eb0ef"},"cell_type":"code","source":"# convert to factor\nDstAllClean$Kid  <- factor(DstAllClean$Kid)\nDstAllClean$Sex  <- factor(DstAllClean$Sex)\nDstAllClean$Embarked  <- factor(DstAllClean$Embarked)\nDstAllClean$Title  <- factor(DstAllClean$Title)\nDstAllClean$Pclass  <- factor(DstAllClean$Pclass)\nDstAllClean$FamilyType  <- factor(DstAllClean$FamilyType)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"71de50750ef3823b042e2de51d85438d3b0ed164","_cell_guid":"e8d18a0f-bb0d-49f3-896e-18b04378c83f"},"cell_type":"markdown","source":"# Modeling\n**Test Harness**\n\nSet-up the test harness to use 10-fold cross validation","outputs":[],"execution_count":null},{"metadata":{"_uuid":"a5ed801800763df5048ff0959b9d10d7ba133db6","trusted":true,"_cell_guid":"9540e383-5c60-493d-89b2-02b66d3eb24d"},"cell_type":"code","source":"# Run algorithms using 10-fold cross validation\ncontrol <- trainControl(method=\"cv\", number=10)\nmetric <- \"Accuracy\"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8323a1e48a2507519613357199a1438d1e9cf3b8","_cell_guid":"fb033b80-5cbb-4eed-a657-843bc2146cf9"},"cell_type":"markdown","source":"**Build Models**\n\nLetâ€™s evaluate 6 different algorithms:\n* Logistic Regression\n* Linear Discriminant Analysis (LDA)\n* Classification and Regression Trees (CART).\n* k-Nearest Neighbors (kNN).\n* Support Vector Machines (SVM) with a linear kernel.\n* Random Forest (RF)","outputs":[],"execution_count":null},{"metadata":{"_uuid":"2b958d9b65d78e664f39c9b62e8d22801a06efcc","trusted":true,"_cell_guid":"57456d86-0101-4183-8b93-235e838a33d1"},"cell_type":"code","source":"# create the test dataset with only the testing columns\nvarsToKeep <- c('Survived', 'Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Title','FamilyType','Kid')\n\n# let's split the dataset into two\nDstTrainTest <- DstAllClean[TrainSet,varsToKeep]\nidxSplit <- createDataPartition(DstTrainTest$Survived, p = 0.75, list=FALSE)\nDstTrainModel <- DstTrainTest[idxSplit,]\nDstTestModel <- DstTrainTest[-idxSplit,]\n\n# logistic regression\nset.seed(7)\nfit.glm <- train(Survived ~ ., data=DstTrainModel, method=\"glm\", metric=metric, trControl=control)\n\n# linear algorithms\nset.seed(7)\nfit.lda <- train(Survived ~ ., data=DstTrainModel, method=\"lda\", metric=metric, trControl=control)\n\n# CART\nset.seed(7)\nfit.cart <- train(Survived ~ ., data=DstTrainModel, method=\"rpart\", metric=metric, trControl=control)\n\n# kNN\nset.seed(7)\nfit.knn <- train(Survived ~ ., data=DstTrainModel, method=\"knn\", metric=metric, trControl=control)\n\n# SVM\nset.seed(7)\nfit.svm <- train(Survived ~ ., data=DstTrainModel, method=\"svmRadial\", metric=metric, trControl=control)\n\n# Random Forest\nset.seed(7)\nfit.rf <- train(Survived ~ ., data=DstTrainModel, method=\"rf\", metric=metric, trControl=control)\n\n# Gradient Boost Machine (GBM)\nset.seed(7)\nfit.gbm <- train(Survived ~ ., data=DstTrainModel, method=\"gbm\", \n                 metric=metric, trControl=control, verbose=FALSE)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"01014408e055e496622b840b1de65ca2304ba484","_cell_guid":"b837b46e-2fc2-4901-89a5-5b01c86a55f1"},"cell_type":"markdown","source":"**Select Best Model**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"15d994e2d12dbc84f7a1c157e4c0fe85b8797552","trusted":true,"_cell_guid":"1e9ae740-bc88-4607-b571-ef5149456a2e"},"cell_type":"code","source":"# summarize accuracy of models\nresults <- resamples(list(\n    glm=fit.glm, \n    lda=fit.lda, \n    cart=fit.cart, \n    knn=fit.knn, \n    svm=fit.svm, \n    rf=fit.rf,\n    gbm=fit.gbm\n))\nsummary(results)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ce5193bb420d4d8e3a3465387df69c567a4a2e9b","trusted":true,"_cell_guid":"80737fc6-2774-4492-b7ae-9827402b308d"},"cell_type":"code","source":"# compare accuracy of models\ndotplot(results)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b049985d5ef13e0b4750456368455cafab920b8e","_cell_guid":"99ad6bc2-b3e3-47e7-83e4-6015b82551ab"},"cell_type":"markdown","source":"**Testing the model accuracy**\n\nFor the most accurate, Random Forest in this case","outputs":[],"execution_count":null},{"metadata":{"_uuid":"b8d76f2f0147867361c31b6d663478feb284f4e9","trusted":true,"_cell_guid":"57517eb6-4675-4e0d-83ec-1fb3b0ebaa29"},"cell_type":"code","source":"# summarize Best Model\nprint(fit.rf)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"90a1610221f9c61210d5b2ef7409dcb045dccfc7","trusted":true,"_cell_guid":"e02473b6-cf60-441e-b71e-bca396995308"},"cell_type":"code","source":"# prediction \nDstTestModelClean <- DstTestModel\nDstTestModelClean$Survived <- NA\n\npredictedval <- predict(fit.rf, newdata=DstTestModelClean)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"85366e4c777b31f9f0ad099cd5d9c9bc94d70abd","trusted":true,"_cell_guid":"32d89361-98fc-4013-a66c-ecf9b634a061"},"cell_type":"code","source":"# summarize results with confusion matrix\ncm <- confusionMatrix(predictedval, DstTestModel$Survived)\ncm$table","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5c59b1f1e03a6b0703076f061bf378e524317cf0","_cell_guid":"8a773b2b-127f-4157-8393-91e9b380cad7"},"cell_type":"markdown","source":"![confusion matrix.](https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix_files/confusion_matrix_1.png)","outputs":[],"execution_count":null},{"metadata":{"_uuid":"c8d5b2e24840bf5018d6b56b98e0abf5fac9eeb1","trusted":true,"_cell_guid":"b5dcba69-6b19-4501-bfc3-831cf337b979"},"cell_type":"code","source":"# calculate accuracy of the model\nAccuracy<-round(cm$overall[1],2)\nAccuracy\n\n# byclass\nbyC <- as.data.frame(cm$byClass)\nnames(byC) <- c(\"Values\")\nbyC","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cb38b2dd0845d56fc11e0977ead2be354baf357f","_cell_guid":"7bffcca1-14f8-47e3-b777-b3e90a469517"},"cell_type":"markdown","source":"**Submit the Prediction**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"ba5a15eff243c83527a6416d0d812ee50a54bee7","trusted":true,"_cell_guid":"f5faf79a-d0f2-49a5-8546-e5dd96f3743b"},"cell_type":"code","source":"# prediction \npredictedval <- predict(fit.rf, newdata=DstAllClean[TestSet,varsToKeep])","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d59b23221af5ebe3138d08f8e001227412a01ebd","trusted":true,"_cell_guid":"aebd45dc-3956-4472-b191-50a74c788354"},"cell_type":"code","source":"# create a csv file for submittion\nTitanicResult <- data.frame(PassengerId = DstAllClean[TestSet,]$PassengerId, Survived = predictedval)\ntable(TitanicResult$Survived)\nwrite.csv(TitanicResult,file = \"TitanicResult.csv\",row.names = FALSE)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}