{"metadata": {"kernelspec": {"name": "ir", "display_name": "R", "language": "R"}, "language_info": {"name": "R", "pygments_lexer": "r", "file_extension": ".r", "version": "3.4.2", "codemirror_mode": "r", "mimetype": "text/x-r-source"}}, "nbformat": 4, "nbformat_minor": 1, "cells": [{"metadata": {}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# This is the my first kernal using R, So any feedback are most welcome.\n", "# Treating the missing value in the dataset,Extracting the new feature and Visualizing the data\n", "# are done in this post.\n", "# I'm going to use Random Forest and Decision Tree model to predict the Titanic Dataset.\n", "# Overview of some of the features available in the dataset\n", "\n", "#  1) Survival - 0 = No, 1 = Yes\n", "#  2) PClass   - Passenger Class\n", "#  3) embarked - Port of Embarkation\n", "#  4) sibsp    - Sibling, Spouse\n", "#  5) parch    - Parent, Child"]}, {"metadata": {"_uuid": "67707d7ec71b524d80eed70a2de2f1ff2d90ce3f", "_kg_hide-output": true, "_cell_guid": "2497ced0-f6d4-421c-a910-6c6b6bbfa9f4", "_kg_hide-input": true}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Loading the required library for our model\n", "library('tidyverse')\n", "library('ggthemes')\n", "library('caret')\n", "library('e1071')\n", "library('rpart')\n", "library('rpart.plot')\n", "library('randomForest')"]}, {"metadata": {"_uuid": "6edd7238003254a6eba59757ad9aef3ff07709e6", "_cell_guid": "15a897d3-e78e-4f84-859c-22c00951a380"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Reading and Saving the Training and Testing CSV file\n", "training<-read.csv('../input/train.csv',stringsAsFactors = FALSE)\n", "testing<-read.csv('../input/test.csv',stringsAsFactors = FALSE)\n", "# Inserting the Survived feature in the testing dataset with NA\n", "testing$Survived<-NA\n", "# Combining both the dataset into single dataset\n", "full<-rbind(training,testing)\n", "# Visualize the available features and data type of it.\n", "str(full)"]}, {"metadata": {"_uuid": "15c47f5a101082e37479508b0b14e166496b707e", "_kg_hide-output": true, "_cell_guid": "71165ba7-4fd4-44df-b8fe-811d382fbd8b", "_kg_hide-input": true}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Analysing the Missing Values in the dataset\n", "colSums(is.na(full))\n", "colSums(full=='')"]}, {"metadata": {"_uuid": "6d39b5292b10835e9fcf0ab813f2ad129e5cdef0", "_cell_guid": "798d7e99-fbed-435f-b715-db2c720265de"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# As Cabin is having most of the missing values, We are going to remove it.\n", "full$Cabin<-NULL\n", "str(full)"]}, {"metadata": {"_uuid": "085d7c855a9268776afc057428d755a50809ddfa", "_cell_guid": "cdffc3fa-43ab-4017-aefd-d16ed8aacaaf"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Missing value treatment for Embarked\n", "table(full$Embarked)\n", "# As 'S' is the mostly used in the dataset, We are going to provide the same for the missing values\n", "full[full$Embarked==\"\",]$Embarked<-\"S\"\n", "table(full$Embarked)\n", "# Data based on the Embarked and Survived\n", "table(full$Embarked,full$Survived)"]}, {"metadata": {"_uuid": "1bc0b04995fbe6c0a3f8863d3207706df48471ca", "_cell_guid": "ed7e7f38-2928-4195-a708-bd4df3d781ca"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# There is one missing value for Fare in row 1044, As the passenger is from PClass 3, \n", "# we are going to provide the mean fare of PClass 3\n", "full$Fare[1044]<-mean(full[full$Pclass=='3',]$Fare,na.rm=T)\n", "# We are going to remove the Title from the Name field.\n", "head(full$Name)\n", "# We are using gsub to replace the following pattern into empty, So that we will get the title\n", "full$title<-gsub('(.*,)|(\\\\..*)','',full$Name)\n", "# List of availble title\n", "unique(full$title)"]}, {"metadata": {"_uuid": "6125fc7e6e5f437dc4791b8a4c882cf0739c8d39", "_cell_guid": "1a47e66d-e6a6-4c8d-a09f-5b9d158b915e"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Now We are going the trim the whitespace available in the title.\n", "full$title<-trimws(full$title)\n", "# As there are many unknown title is available, we are going to combine all the unknown into Rare title\n", "rare_title<-c('Dona','Lady','the Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer')\n", "full[full$title=='Mlle',]$title<-\"Miss\"\n", "full[full$title=='Ms',]$title<-\"Miss\"\n", "full[full$title=='Mme',]$title<-\"Mr\"\n", "full[full$title %in% rare_title,]$title<-\"Rare\"\n", "# List of available title after the data treatment\n", "table(full$title)"]}, {"metadata": {"_uuid": "cd4d58e35aa3aa76e0fc094bc20da640ab9ae68f", "_cell_guid": "625f0bfa-2543-4b00-92e5-bcee0a7a7e34"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Analysing the feature with the number of unique data\n", "factor_check<-sapply(full,function(x) (length(unique(x))))\n", "factor_check"]}, {"metadata": {"_uuid": "794ce00f044b51bad46c6768195c119d12abcaf6", "_cell_guid": "cf899446-59ee-426b-ac43-433e7964d77b"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# As Survived,Sex,Embarked,Pclass are the suitable feature to be converted into factor\n", "factor_var<-c('Survived','Sex','Embarked','Pclass')\n", "for (i in factor_var) {full[,i]<-as.factor(full[,i])}\n", "# Available features with data type\n", "str(full)"]}, {"metadata": {"_uuid": "97bcd4468de83dc53c8b835043339420cd59ab8b", "_cell_guid": "761119de-3e63-4216-a99f-29c8c4c720ba"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Visualizing the chart for Embarked and Survived\n", "ggplot(full[1:891,],aes(x=Embarked,fill=Survived))+geom_bar(position=\"dodge\")+ggtitle(\"Port of Embarkation vs Survived\")+ylab(\"Survived\")"]}, {"metadata": {"_uuid": "910e24b2eee8d9adea15347864c14fe36e49298e", "_cell_guid": "456bfd97-eca7-47c1-aaaa-23a32f2b957d"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Visualizing the chart for Title and Survived\n", "ggplot(full[1:891,],aes(x=title,fill=Survived))+geom_bar()+ggtitle(\"Title of the Person vs Survived\")+ylab(\"Survived\")"]}, {"metadata": {"_uuid": "4edbc9faacf1d3e542aae8eaf950addfb6bb4aad", "_cell_guid": "029226a2-a7d8-4899-bfcf-eaf7cebecfe5"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Visualizing the chart for Sex and Survived, From this we could see Women are most likely survived\n", "ggplot(full[1:891,],aes(x=Sex,fill=Survived))+geom_bar(position=\"dodge\")+ggtitle(\"Sex vs Survived\")+ylab(\"Survived\")"]}, {"metadata": {"_uuid": "643426639e9a679ccf407936d13f3ae273442576", "_cell_guid": "5b856861-afa0-4a4e-8185-a397788b0415"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Creating the new feature Family count with the help of SibSp and Parch\n", "full$Family_count<-full$SibSp+full$Parch+1\n", "# List of Family count in our titanic dataset\n", "table(full$Family_count)"]}, {"metadata": {"_uuid": "e2d09206b88826c65be5e4ee3112be83bc6d4e18", "_cell_guid": "262cdb2a-04ad-4f9d-a2ad-66263f049737"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Visualizing the data based on Family Count and Survival\n", "ggplot(full[1:891,],aes(x=Family_count,fill=Survived))+geom_bar(position='dodge')+ggtitle(\"Family Count vs Survived\")+ylab(\"Survived\")+\n", "  coord_flip()+scale_x_reverse(breaks=c(1:11))+theme_light()"]}, {"metadata": {"_uuid": "1ca8a9ef081343967e7b35458821a02b34419ad7", "_cell_guid": "69e0a864-67e6-4723-8ebd-e1c9d4fb85c3"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Creating the new field based on Family_Count Size\n", "full$Family_size_ratio[full$Family_count<=2]<-\"Small\"\n", "full$Family_size_ratio[full$Family_count>=3 & full$Family_count<=5]<-\"Medium\"\n", "full$Family_size_ratio[full$Family_count>=6]<-\"Big\"\n", "ggplot(full[1:891,],aes(x=Family_size_ratio,fill=Survived))+geom_bar(position='dodge')+ggtitle(\"Family Size Ratio vs Survived\")+ylab(\"Survived\")"]}, {"metadata": {"_uuid": "97fe654512ba117250206401b8774c676fcd3f3b", "_cell_guid": "64d0cd43-979f-44a3-8513-4ec29c9c0319"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# First 6 rows of data in our dataset\n", "head(full)"]}, {"metadata": {"_uuid": "82370e23f80d69ac7a2a7f51c0920b61db7873a8", "_cell_guid": "cf06b3fd-0f71-4d69-8388-155512804c24"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Imputing the mean value for the missing values in the Age feature with the help of MISC library Impute function\n", "full$Age<-Hmisc::impute(full$Age,mean)\n", "# Age vs Survived Box Plot\n", "ggplot(full[1:891,],aes(x=Survived,y=Age))+geom_boxplot(color=c(\"blue\",\"red\"))+theme_few()+ggtitle(\"Age vs Survived\")"]}, {"metadata": {"_uuid": "7af9916075357579112850a51a11c398f1b48fc0", "_cell_guid": "0dc71aa7-e2bd-49dd-97e1-2a20aa1cfaa6"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Bar Plot for PClass vs Survived\n", "ggplot(full[1:891,],aes(x=Pclass,fill=Survived))+geom_bar(position=\"dodge\")+ggtitle(\"PClass vs Survived\")"]}, {"metadata": {"_uuid": "2bfdb963216da79600504e251036aff2e4a92f53", "_cell_guid": "bd8f8eab-8adf-4289-9c86-ad9f1acb7ce6"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Structure of Full dataset\n", "str(full)"]}, {"metadata": {"_uuid": "700c618ea1af78069b7b6ee4a6d3f1c4408a153e", "_cell_guid": "40cdd4e4-54be-4d92-830d-7f1f52aaf7aa"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Converting the new features into factor as well\n", "full$Family_size_ratio<-as.factor(full$Family_size_ratio)\n", "full$title<-as.factor(full$title)\n", "# Splitting the model with the features we require to train the dataset\n", "train_model<-full[1:891,c(\"Survived\",\"Age\",\"Sex\",\"Family_count\",\"Family_size_ratio\",\"Fare\",\"title\")]\n", "test_model<-full[892:1309,c(\"Survived\",\"Age\",\"Sex\",\"Family_count\",\"Family_size_ratio\",\"Fare\",\"title\")]  "]}, {"metadata": {"_uuid": "ed1776a430bd713572cc60c0433cae80d4878172", "_cell_guid": "76a739b1-e502-4093-98bc-d3ece9af1600"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# RANDOM FOREST Model Implementation\n", "rf_model<-randomForest(Survived~.,data=train_model,importance=T)\n", "rf_model"]}, {"metadata": {"_uuid": "2a916b2682bccb4d02440d4b9de95c37830b0b52", "_cell_guid": "d7b3b8a2-060a-492e-955c-35cf49360899"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Predicting the model\n", "predicted<-predict(rf_model,train_model)\n", "# Confusion Matrix to compare the 'Predicted value vs Actual Value' accuracy\n", "confusionMatrix(predicted,train_model$Survived)"]}, {"metadata": {"_uuid": "d945258bda687c0d399fdfb3b8728af9a253294f", "_cell_guid": "9a034e6a-224e-455c-a96a-4cadf131a512"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Plotting the RF_MODEL\n", "plot(rf_model)\n", "legend('topright',colnames(rf_model$err.rate),col=1:3,fill=1:3)"]}, {"metadata": {"_uuid": "66f3fc75008d995b5212c3aadd5e70674f962c32", "_cell_guid": "06f0d075-cb5e-4908-ac38-b9ddd44e873d"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Finding which variable is important for model building\n", "varImpPlot(rf_model, main = \"RANDOM FOREST MODEL\")"]}, {"metadata": {"_uuid": "a6d8319b6ed0f63e900eb675290bcecb063a0c5c", "_cell_guid": "95da81d0-6b06-4b97-9639-985844ed2115"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Implementing based on Decision Tree, Method is 'class' for classification problem\n", "rp_model<-rpart(Survived~.,train_model,method='class')\n", "summary(rp_model)"]}, {"metadata": {"_uuid": "5ab074f792507d8c43ec9bfa66639548716cadda", "_cell_guid": "dddfc836-187c-4131-b397-a6b423dac311"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Decision tree of our model \n", "rpart.plot(rp_model,tweak=0.8)"]}, {"metadata": {"_uuid": "876dabd80da2356077fd4e031bcc1a92d8c1ff10", "_cell_guid": "39138252-0eb2-4ca9-89e9-4715c8b0bb59"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["rp_predicted<-predict(rp_model,train_model,type = 'class')\n", "confusionMatrix(rp_predicted,train_model$Survived)\n", "# As Random Forest is providing higher accuracy than Decision Tree, We are going to use that for Test Data"]}, {"metadata": {"_uuid": "78cbea45cc4ed2dba5586c71ea5ab620607a1613", "_cell_guid": "7d68f87a-5961-4e38-90ed-c8ec0f252405"}, "cell_type": "code", "execution_count": null, "outputs": [], "source": ["submission <- data.frame(PassengerId = testing$PassengerId)\n", "submission$Survived <- predict(rf_model,test_model)\n", "# Submitting the predicted value of the titanic data set\n", "write.csv(submission, file = \"random_forest_r_submission.csv\", row.names=FALSE)"]}]}