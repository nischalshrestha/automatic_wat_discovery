{"cells":[{"metadata":{"_execution_state":"idle","_kg_hide-output":false,"_uuid":"ae5777b197fd373ad3b9fbdc48e5aebf1c4ed05f","trusted":true,"_cell_guid":"af024a52-a6d8-4a9a-bd3b-4cb0731de975"},"cell_type":"code","source":"# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.\n\n\nlibrary(caret)\nlibrary(reshape2)\n\ntest <- read.csv(\"../input/test.csv\",header=TRUE)\ntrain <- read.csv(\"../input/train.csv\",header=TRUE)\n\n##############################################################\n# Check for missing values in our data set (empty or NA):\n# The melt function takes data in wide format and stacks a set of columns into a single column of data\ntrain.missingData.vector <- apply(train[, -2], 2, function(x) sum(is.na(x) | x==\"\"))\n#train.missingData.vector\n\ntrain.missingData.column <- melt(train.missingData.vector)\n#train.missingData.column\n\n# cbind  show only missing data :::::::::::::\n#cbind(row.names(train.missingData.column)[train.missingData.column$value>0], \n#      train.missingData.column[train.missingData.column$value>0,],\n#      NROW(train))\n                                  \ntrain$Age[is.na(train$Age)] <- mean(train$Age, na.rm=TRUE)\n#train$Age[is.na(train$Age)]\n\n\n# We can assume that the most common City 'S' for Southampton is the most probable value so we update the Embarked to fix the 2 unknown values.\n#table(train$Embarked)\ntrain$Embarked[which(is.na(train$Embarked) | train$Embarked==\"\")] <- 'S'\n\n##############################################################\n#\"Pclass\" \"Name\" \"Sex\" \"Age\" \"SibSp\" \"Parch\" \"Ticket\" \"Fare\" \"Cabin\" \"Embarked\"\nfol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked)\n\nlibrary(rpart)\ndecisionTreeModel <- rpart(fol, method='class', data=train)\n# plots decision tree\n#plot(decisionTreeModel, main=\"Classification Tree of titanic\")\n#text(decisionTreeModel, use.n=TRUE, all=TRUE, cex=0.8)                                  \n\nprediction <- predict(decisionTreeModel, test, type=\"class\") # type=\"class\" outputs the highest probability class\n\ntest$Survived <- as.numeric(as.numeric(prediction) == 1)\n# https://www.kaggle.com/dansbecker/submitting-from-a-kernel                                  \nwrite.csv(test[,c(\"PassengerId\", \"Survived\")],\"submission.csv\", row.names=F)\n","execution_count":16,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}