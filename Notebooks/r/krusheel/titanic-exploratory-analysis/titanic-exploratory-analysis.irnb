{"cells":[{"metadata":{"_execution_state":"idle","_uuid":"b22e786e29249fbaf9357cbf41e5858ad57a68e2","trusted":true,"_cell_guid":"c19f38a2-fabf-45b5-8aef-6028481adb8f"},"cell_type":"code","source":"# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(gbm)\n\nlibrary(caret)\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")","execution_count":65,"outputs":[]},{"metadata":{"_uuid":"e995cc4ee4ea40e409b610af2faf719186f08f00","_cell_guid":"fb035c0c-f6e9-437e-a14c-2b47cec8199e"},"cell_type":"markdown","source":"**Load Data**"},{"metadata":{"_kg_hide-input":false,"_kg_hide-output":false,"_uuid":"b5e766909112e9e73d9392f12526e3777ffdc572","trusted":true,"_cell_guid":"3d2bda69-d0dc-4d46-a444-62af46aed86e"},"cell_type":"code","source":"train_data = fread('../input/train.csv', na.strings = \"\")\ntest_data = fread('../input/test.csv', na.strings = \"\")\n\ndata = rbind(train_data, test_data, fill = T)\nsummary(data)","execution_count":3,"outputs":[]},{"metadata":{"_uuid":"f4355f93f9f4b31ae895c0d379068476a2b7015b","_cell_guid":"d5777b62-d5b8-4457-821d-0f2e6cefa288"},"cell_type":"markdown","source":"**Missing Data Analysis**"},{"metadata":{"_uuid":"f9b0217fb006194da6afbf27b53f7d0a42fd8f97","trusted":true,"_cell_guid":"258690a8-d901-4494-8392-e9c125645127"},"cell_type":"code","source":"colSums(is.na(data))","execution_count":4,"outputs":[]},{"metadata":{"_uuid":"05e58dea65b5dc145221773fba33f056da407977","_cell_guid":"54089531-b01f-464d-8dcb-bccf3ba3d734"},"cell_type":"markdown","source":"**Feature Analysis**"},{"metadata":{"scrolled":true,"_uuid":"74b1c572d4c33abe73c0c7bdf4f042a2113f5bc1","trusted":true,"_cell_guid":"4246c476-b5b3-4902-9c34-80fcbc227064"},"cell_type":"code","source":"numerical_data = data[,c(\"Survived\", \"Age\", \"SibSp\", \"Parch\", \"Fare\") ]\ncorr_mat = round(cor(numerical_data, use = \"na.or.complete\"), 2)\nhead(corr_mat)\n\nmelted_cormat <- melt(corr_mat)\nhead(melted_cormat)\nggplot(melted_cormat, aes(x = Var1, y = Var2, fill = value)) +\n    geom_tile() + \n    scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", midpoint = 0, \n        limit = c(-1,1), space = \"Lab\", name=\"Pearson\\nCorrelation\") + \n    geom_text(aes(Var2, Var1, label = value), color = \"black\", size = 4)\n","execution_count":5,"outputs":[]},{"metadata":{"_uuid":"b218c4029d39fe305a1dbe43207dab2f8b7e3c58","trusted":true,"_cell_guid":"363d4ed3-d0cc-4671-a37b-133a6272ef9c"},"cell_type":"code","source":"#### Siblings Spouse ####\n\nggplot(data = train_data, aes(x = SibSp, fill = as.factor(Survived))) + \ngeom_bar(position = 'fill') + \nlabs(y = \"Survival Probability\", fill = \"Survival Probability\")","execution_count":6,"outputs":[]},{"metadata":{"_uuid":"110fd7d721c7c7bb3a7473ed0df0050ff2edfe9a","trusted":true,"_cell_guid":"934830f5-5bd3-4721-a8e2-f653f735efb6"},"cell_type":"code","source":"#### Parent Child ####\nggplot(data = train_data, aes(x = Parch, fill = as.factor(Survived))) + \ngeom_bar(position = \"fill\") + \nlabs(y = \"Survival Probability\", fill = \"Survival Probability\")","execution_count":7,"outputs":[]},{"metadata":{"_uuid":"caa54b88a1a8396a4b89a59b8f7436fe83828530","trusted":true,"_cell_guid":"2096dfa7-be26-40ec-8755-552588427c5e"},"cell_type":"code","source":"#### Age ####\nggplot(data = train_data, aes(x = Age, fill = as.factor(Survived))) + \ngeom_density(alpha = 0.6) + \nlabs(fill = \"Survival Probability\")\n\nggplot(data = train_data, aes(x = Age)) + \ngeom_density(alpha = 0.6) + facet_wrap(~ as.factor(Survived)) +\nlabs(fill = \"Survival Probability\")","execution_count":8,"outputs":[]},{"metadata":{"_uuid":"ed8f10a465c85049d0ec5eec05004d3b09216b73","trusted":true,"_cell_guid":"224145d9-7510-44d5-9199-dbcef126e018"},"cell_type":"code","source":"#### Fare ####\nsum(is.na(data$Fare))\ndata$Fare[is.na(data$Fare)] = median(data$Fare, na.rm = TRUE)\n\nggplot(data, aes(x = Fare)) + \ngeom_histogram(aes(y = ..density..), bins = 50, boundary = 0) +\ngeom_density()\n\ndata$LogFare = ifelse(data$Fare > 0, log(data$Fare), 0)\n\nggplot(data, aes(x = LogFare)) + \ngeom_histogram(aes(y = ..density..), bins = 50, boundary = 0) +\ngeom_density()\n","execution_count":9,"outputs":[]},{"metadata":{"_uuid":"0ea66c983ef28f403596d0a468ae4fffa05ec70d","_cell_guid":"fac23e44-bc02-49b5-9894-5b6a16830887"},"cell_type":"markdown","source":"**Categorical Variable Analysis**"},{"metadata":{"_uuid":"e9db8919fe3f966466369629721ee6a2f4d77122","trusted":true,"_cell_guid":"42e108b5-694c-47dc-82b3-356c4ffa3065"},"cell_type":"code","source":"#### Pclass vs Survived With Sex ####\nggplot(train_data, aes(x = as.factor(Sex), fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') + \n    facet_wrap(~Pclass) +\n    labs(y = 'Survival Probability', x = 'Gender', fill = 'Survived')\n\n#### Pclass vs Survived ####\nggplot(train_data, aes(x = Pclass, fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') +\n    labs(y = 'Survival Probability', fill = 'Survived')\n","execution_count":10,"outputs":[]},{"metadata":{"_uuid":"b98ee5b2837aa03c34c3c80e642311ed39a7464c","trusted":true,"_cell_guid":"679fdd95-f6e6-470f-92b6-7978f6a4cebf"},"cell_type":"code","source":"#### Impute Embarked Data ####\ndata$Embarked[is.na(data$Embarked)] = \"S\"\ntrain_data = data %>% filter(!is.na(Survived))\n#table(train_data$Embarked)\n\n#### Embarked Data With Pclass Split ###\nggplot(train_data, aes(x = Pclass, fill = as.factor(Pclass))) + \n    geom_bar(position = 'dodge') + \n    facet_wrap(~Embarked) + \n    labs(fill = 'Pclass')\n\nggplot(train_data, aes(x = Pclass, fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') + \n    facet_wrap(~Embarked) + \n    labs(y = 'Survival Probability', fill = 'Survived')\n\n#### Embarked Data ####\nggplot(train_data, aes(x = Embarked, fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') + \n    labs(y = 'Survival Probability', fill = 'Survived')","execution_count":11,"outputs":[]},{"metadata":{"_uuid":"c42f9a2ba5a4ebd33ae8f6bfd7b560ef898507eb","_cell_guid":"b03c9d0b-d400-45da-92be-f0914991cd20"},"cell_type":"markdown","source":"**Impute Missing Values** "},{"metadata":{"_uuid":"1b93d9678b66e4700fa88d5f0241c69d2e4668ea","trusted":true,"_cell_guid":"a6aad2e5-7cf4-4497-81c9-52164887663c"},"cell_type":"code","source":"colSums(is.na(data))","execution_count":12,"outputs":[]},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"_uuid":"76a0e8a2226898ccb82d996b38e411a9d82dbe9c","_cell_guid":"47d19d5a-6958-4d27-a6c5-8a3e531d2cb7"},"cell_type":"markdown","source":"**Impute Age **"},{"metadata":{"_uuid":"e21dc67ca11829d9e7d5f1df83e1642c7c798146","trusted":true,"_cell_guid":"00175bcb-8d9f-4e5b-8818-d1595471fac3"},"cell_type":"code","source":"#### SibSp Age Distribution ####\nggplot(data, aes(x = as.factor(SibSp), y = Age, fill = SibSp)) + \n    geom_boxplot() +\n    labs(x = 'SibSp')\n\n#### Parch Age Distribution ####\nggplot(data, aes(x = as.factor(Parch), y = Age, fill = Parch)) + \n    geom_boxplot() +\n    labs(x = 'Parch')\n\n#### Gender Class Age Ditribution ####\nggplot(data, aes(x = as.factor(Pclass), y = Age, fill = Pclass)) + \n    geom_boxplot() +\n    facet_wrap(~Sex) + \n    labs(x = 'Pclass')\n\n#### Gender Age Ditribution ####\nggplot(data, aes(x = Sex, y = Age, fill = Sex)) + \n    geom_boxplot()","execution_count":13,"outputs":[]},{"metadata":{"_uuid":"7a0dd5afcd836f50f968d7c27dace56c736df5e1","trusted":true,"_cell_guid":"deb4a8bc-605e-4d8e-b39b-f5a0e825e3ec"},"cell_type":"code","source":"## Impute Age ##\nmedian_age = median(data$Age, na.rm = T)\nage_estimate_feature_bucket = data %>% group_by(Parch, SibSp, Pclass) %>% summarise(age_est = median(Age, na.rm = T))\nage_estimate_feature_bucket$age_est[is.na(age_estimate_feature_bucket$age_est)] = median_age\n\nimputed_data = merge(data, age_estimate_feature_bucket, by = c('Parch', 'SibSp', 'Pclass'))\nimputed_data$Age = imputed_data$age_est\n\ndim(imputed_data)\nsum(is.na(imputed_data$age_est))\ncolnames(imputed_data)","execution_count":14,"outputs":[]},{"metadata":{"_uuid":"3662aa466ee1aaae5db3719aadc6943054397640","_cell_guid":"570b0582-50c2-4ff5-ada4-abb14e64c16d"},"cell_type":"markdown","source":"**Feature Engineering**"},{"metadata":{"_uuid":"6ee6b92e66a4b878a54627bc17d20f661b1826e4","_cell_guid":"6e80b9b4-f815-4a45-a6e5-9a400443ad8b"},"cell_type":"markdown","source":"**Title**"},{"metadata":{"_uuid":"cfc6565155e2407b27a058372952b67fe6e64d62","trusted":true,"_cell_guid":"72287cb7-c0af-4543-8f43-a9416d428e4d"},"cell_type":"code","source":"title_extract = function(name) strsplit(strsplit(name, ',')[[1]][2], '\\\\.')[[1]][1]\nimputed_data$Title =  sapply(imputed_data$Name, title_extract)\n\nRareTitleList = c(' Don', ' Major', ' Dr',  ' Col', ' the Countess', ' Jonkheer', ' Dona', ' Rev', ' Lady', ' Sir', ' Capt')\nMarriedFemaleTitleList = c( ' Mrs', ' Mme', ' Mlle', ' Ms')\nimputed_data = imputed_data %>% \n            mutate(title = ifelse(Title %in% RareTitleList, \"Rare\", ifelse(Title %in% MarriedFemaleTitleList, \"Mrs/Mme\", Title)))\nimputed_train_data = imputed_data %>% filter(!is.na(Survived))\ntable(imputed_train_data$Survived)\nunique(imputed_data$title)\n\nggplot(data = imputed_data, aes(x = as.factor(title))) + \n    geom_bar() + \n    labs(x = 'Title') + \n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplot(data = imputed_train_data, aes(x = as.factor(title), fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') + \n    labs(x = 'Title', y = 'Survival Probability', fill = 'Survived')\n","execution_count":15,"outputs":[]},{"metadata":{"_uuid":"48d58bc400e8206129832c6d7a0bf2d50fa81043","_cell_guid":"3247da5c-6447-475f-8823-b5825892331d"},"cell_type":"markdown","source":"**Family Size**"},{"metadata":{"_uuid":"3ee36be3d021cd3038d1bcc56e11cd0e3ae33c32","trusted":true,"_cell_guid":"39fecc98-5ddf-4a51-b490-0a4936487da1"},"cell_type":"code","source":"imputed_data$FamilySize = imputed_data$Parch + imputed_data$SibSp + 1\n\nimputed_train_data = imputed_data %>% filter(!is.na(Survived))\nggplot(data = imputed_train_data, aes(x = as.factor(FamilySize), fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') + \n    labs(fill = 'Survived', x = 'FamilySize')\n","execution_count":16,"outputs":[]},{"metadata":{"_uuid":"a9689c96bf921fde862f93f9f32c53f4218d4d55","_cell_guid":"4f92040e-a286-4c3f-9904-ade2e7788905"},"cell_type":"markdown","source":"**Cabin**"},{"metadata":{"_uuid":"9481e4c69bf4f509b7110fe8c7e9daeae85cf173","trusted":true,"_cell_guid":"917d8a40-3061-4de9-8363-430583e62a01"},"cell_type":"code","source":"sum(is.na(imputed_data$Cabin))\nimputed_data = imputed_data %>% mutate(Deck = substr(Cabin, 1, 1))\nimputed_data$Deck[is.na(imputed_data$Deck)] = 'X'\nimputed_train_data = imputed_data %>% filter(!is.na(Survived))\n\nggplot(data = imputed_train_data, aes(x = as.factor(Deck), fill = as.factor(Survived))) + \n    geom_bar(position = 'fill') + \n    labs(fill = 'Survived', x = 'Deck')","execution_count":17,"outputs":[]},{"metadata":{"_uuid":"df8d42463506384b42177cfbab0b433a122ea3dc","_cell_guid":"0f8b5c23-6d5b-497c-a2ed-efc3b6b86967"},"cell_type":"markdown","source":"**Ticket**"},{"metadata":{"_uuid":"7f42404a964681178ea23f91b9f198c49b978dc3","trusted":true,"_cell_guid":"d8c8cf6a-9f35-45e7-8b99-345741395bfb"},"cell_type":"code","source":"imputed_data = imputed_data %>% \n                mutate(TicketPrefix = ifelse(grepl('^[[:digit:]]+\\\\.*[[:digit:]]*$',Ticket), 'X', gsub('([[:digit:]]+)','',Ticket))) %>%\n                mutate(TicketPrefix = gsub('\\\\.| |/','',TicketPrefix))\ntable(imputed_data$TicketPrefix)\ncolnames(imputed_data)","execution_count":18,"outputs":[]},{"metadata":{"_uuid":"c9a05e3e1d0dff985e27c84e00ec90c0a144d49c","_cell_guid":"2090a097-91d1-4045-9830-fa09fdda29c5"},"cell_type":"markdown","source":"**Modeling**"},{"metadata":{"_uuid":"04a800bce1ff69691dbffae03f2d4b4ca8cdc4ab","trusted":true,"_cell_guid":"b3f95a56-13a7-4979-b9e3-df172b10b599"},"cell_type":"code","source":"train_data = imputed_data %>% filter(!is.na(Survived))\ntest_data = imputed_data %>% filter(is.na(Survived))\n\ndim(train_data)\ndim(test_data)\n\ntable(train_data$Survived)","execution_count":19,"outputs":[]},{"metadata":{"_uuid":"d940da25938dfeba7ea540b983f6b9b26f84dca9","trusted":true,"_cell_guid":"1d113423-0e1d-4e65-abc0-4bd0b1afb0cf"},"cell_type":"code","source":"## Remove Redundant Columns ##\ndrop_cols = c('Title', 'age_est', 'Ticket', 'Name', 'Cabin', 'PassengerId', 'Name')\nimputed_data = imputed_data %>% select(-one_of(drop_cols))\nstr(imputed_data)\n\nfactor_colnames = c(\"Sex\", \"Embarked\", \"title\", \"Deck\", \"TicketPrefix\")\nclass(imputed_data[factor_colnames[1]])\nfor(factor_colname in factor_colnames) {\n    imputed_data[, factor_colname] = as.factor(imputed_data[,factor_colname])\n}\nstr(imputed_data)","execution_count":20,"outputs":[]},{"metadata":{"_uuid":"8915a5e97f495d1f4277079f3adf8b97bef431c3","trusted":true,"_cell_guid":"e0eb8d3e-2f9c-4211-bb45-3c2af2cdb49b"},"cell_type":"code","source":"## Create Dummy Variables ##\ndmy <- dummyVars(\" ~ .\", data = imputed_data,fullRank = T)\ndataset = data.frame(predict(dmy, imputed_data))\n\ndim(dataset)\ntrain = dataset[!is.na(dataset[, 'Survived']), ]\ntest = dataset[is.na(dataset[, 'Survived']), ]\n\ndim(train)\ndim(test)\n\nsummary(test)","execution_count":21,"outputs":[]},{"metadata":{"_uuid":"8b6c30ae6361768406f0e90144e7ec581c7a6b0a","trusted":true,"_cell_guid":"e687e0b6-f76c-43c9-8631-0af983438b46"},"cell_type":"code","source":"## Create train and Validation Split\nindex <- createDataPartition(train$Survived, p=0.75, list=FALSE)\ntrainSet <- train[index,]\ntestSet <- train[-index,]\n\nsummary(testSet)\n","execution_count":22,"outputs":[]},{"metadata":{"_uuid":"355334a72fd041a279875de9c9893f4d11652297","trusted":true,"_cell_guid":"e3404b6e-15d5-4734-91f6-ba76c0cc7706"},"cell_type":"code","source":"## Feature selection using rfe \ncontrol <- rfeControl(functions = rfFuncs, method = \"repeatedcv\", repeats = 3, verbose = FALSE)\noutcomeName <- 'Survived'\npredictors <- names(trainSet)[!names(trainSet) %in% outcomeName]\n\n#head(trainSet[, predictors])\n#head(trainSet[, outcomeName])\nsurvivalPredProfile <- rfe(trainSet[, predictors], as.factor(trainSet[,outcomeName]), rfeControl = control)","execution_count":23,"outputs":[]},{"metadata":{"_uuid":"0f0cf82efb6abc37afe9eec83a86d05937d54979","trusted":true,"_cell_guid":"b5ff212f-873e-470f-bb12-f35021210940"},"cell_type":"code","source":"attributes(survivalPredProfile)\nsurvivalPredProfile$optVariables\n\nnumVars = 5\ntopVariables = survivalPredProfile$optVariables[1:numVars]\ntopVariables","execution_count":76,"outputs":[]},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":false,"_uuid":"8beff992849efde93034b73eadd03961435c87da","_cell_guid":"56f4d618-182e-4f0e-bf86-93844f44b090","trusted":true,"scrolled":false},"cell_type":"code","source":"objControl = trainControl(method = 'repeatedcv',number = 5, repeats = 5)\n\nmodel_gbm <- train(trainSet[,topVariables], as.factor(trainSet[,outcomeName]), method='gbm', trControl = objControl, tuneLength = 10, verbose = F)\n#model_rf<-train(trainSet[,top5Variables], as.factor(trainSet[,outcomeName]),method='rf')\n#model_nnet<-train(trainSet[,top5Variables], as.factor(trainSet[,outcomeName]),method='nnet')\n#model_glm<-train(trainSet[,top5Variables], as.factor(trainSet[,outcomeName]),method='glm')\nmodel_gbm\n\n#attributes(survivalPredProfile)\n#x = survivalPredProfile$results\n\n#attributes(x)\n#x\n#survivalPredProfile","execution_count":77,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e9a4cbd2193e6c75799e4b391626ebeb07cd469d"},"cell_type":"code","source":"plot(model_gbm)\nvarImp(model_gbm)","execution_count":80,"outputs":[]},{"metadata":{"_uuid":"73dd76ae95bf6ab65e3c54e9a4c38a6c7e8afba8","trusted":true,"_cell_guid":"5959796d-aef5-44ab-b921-243bbfce50ee"},"cell_type":"code","source":"testPred = predict(model_gbm, type = \"raw\", newdata = testSet)\nlength(testPred)\nsum(as.numeric(testPred) - 1)","execution_count":83,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d2362f0b46b975b5dfa093fe5fda6be94eb65966"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}