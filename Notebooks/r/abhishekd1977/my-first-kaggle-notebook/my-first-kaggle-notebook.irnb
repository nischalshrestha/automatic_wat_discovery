{"nbformat_minor": 1, "nbformat": 4, "cells": [{"cell_type": "markdown", "source": ["My First Notebook"], "metadata": {"_uuid": "372aa4e91e8f6a329a00a0752002cb6a06dbc543", "_cell_guid": "ecf917b7-9335-d54a-67e2-245ffdaa9d7e"}}, {"cell_type": "code", "outputs": [], "execution_count": null, "source": ["# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n", "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n", "# For example, here's several helpful packages to load in \n", "\n", "# Load packages\n", "library(rpart)\n", "library(tree)\n", "library('ggplot2') # visualization\n", "library('ggthemes') # visualization\n", "library('scales') # visualization\n", "library('dplyr') # data manipulation\n", "library('mice') # imputation\n", "library('randomForest') # classification algorithm\n", "library('e1071') #Naive Bayes classification\n", "# Input data files are available in the \"../input/\" directory.\n", "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n", "\n", "system(\"ls ../input\")\n", "\n", "# Any results you write to the current directory are saved as output."], "metadata": {"_uuid": "47f06b25aa6768a8579de3dbef57daa23f5351bc", "_cell_guid": "2d4f37a2-82be-0374-44bb-e4d9a09bb21f"}}, {"cell_type": "code", "outputs": [], "execution_count": null, "source": ["train <- read.csv(\"../input/train.csv\", header = TRUE,  stringsAsFactors = FALSE)\n", "test <- read.csv(\"../input/test.csv\", header = TRUE,  stringsAsFactors = FALSE)\n", "\n", "###Add Family Size to dataset\n", "\n", "train$FamilySize <- train$SibSp + train$Parch + 1\n", "test$FamilySize <- test$SibSp + test$Parch + 1\n", "\n", "\n", "### Make variables factors into factors\n", "factor_variables <- c('PassengerId','Pclass','Sex','Embarked', 'FamilySize')\n", "\n", "train[factor_variables] <- lapply(train[factor_variables], function(x) as.factor(x))\n", "train$Survived = as.factor(train$Survived)\n", "\n", "test[factor_variables] <- lapply(test[factor_variables], function(x) as.factor(x))\n", "\n", "### Show number of missing Age values\n", "sum(is.na(train$Age))\n", "sum(is.na(test$Age))\n", "\n", "### Perform predictive imputation on Age\n", "mice_mod_train <- mice(train[, !names(train) %in% c('PassengerId','Name','Ticket','Cabin','Family','Survived')], method='rf', printFlag = FALSE)\n", "mice_mod_test <- mice(test[, !names(test) %in% c('PassengerId','Name','Ticket','Cabin','Family')], method='rf', printFlag = FALSE)\n", "# Save the complete output \n", "mice_output_train <- complete(mice_mod_train)\n", "mice_output_test <- complete(mice_mod_test)\n", "\n", "### Replace Age variable in training and test datasets from the predictive imputaion\n", "train$Age <- mice_output_train$Age\n", "test$Age <- mice_output_test$Age\n", "\n", "# Show new number of missing Age values\n", "sum(is.na(train$Age))\n", "sum(is.na(test$Age))\n", "\n", "# Set a random seed\n", "set.seed(754)\n", "\n", "###Visualize survival with respect to number of family members\n", "ggplot(train[1:891,], aes(x = FamilySize, fill = factor(Survived))) +\n", "  geom_bar(stat='count', position='dodge') +\n", "  labs(x = 'Family Size') +\n", "  theme_few()\n", "\n", "## Build the model#1: Random Forest - START\n", "rf_model <- randomForest(Survived ~ Pclass + Sex + SibSp + Parch + FamilySize + Age, data = train)\n", "\n", "### Show model error\n", "plot(rf_model, ylim=c(0,0.36))\n", "legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)\n", "\n", "###Determine which variable is impacting the model most\n", "# Get importance\n", "importance    <- importance(rf_model)\n", "varImportance <- data.frame(Variables = row.names(importance), \n", "                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n", "# Create a rank variable based on importance\n", "rankImportance <- varImportance %>%\n", "  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n", "\n", "# Use ggplot2 to visualize the relative importance of variables\n", "ggplot(rankImportance, aes(x = reorder(Variables, Importance), \n", "    y = Importance, fill = Importance)) +\n", "  geom_bar(stat='identity') + \n", "  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n", "    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n", "  labs(x = 'Variables') +\n", "  coord_flip() + \n", "  theme_few()\n", "\n", "### Predict using the test set. Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\n", "predict.randomForest <- predict(rf_model, test)\n", "solution.randomForest <- data.frame(PassengerID = test$PassengerId, Survived = predict.randomForest)\n", "\n", "## Build the model#1: Random Forest - END\n", "\n", "## Build the model#2: Naive Bayes classification - START\n", "naiveBayesModel <- naiveBayes(Survived ~ Pclass + Sex + SibSp + Parch + FamilySize + Age, data = train)\n", "summary(naiveBayesModel)\n", "predict.NaiveBayes <- predict(naiveBayesModel,test[,-1])\n", "\n", "solution.naiveBayes <- data.frame(PassengerID = test$PassengerId, Survived = predict.NaiveBayes)\n", "\n", "## Build the model#2: Naive Bayes classification - END"], "metadata": {"_uuid": "218677ba35f2f591d5737fe7e4972ae53c59fcf5", "_cell_guid": "2ff0a064-1d25-485a-822a-8853ba24acdd"}}], "metadata": {"_is_fork": false, "_change_revision": 0, "language_info": {"codemirror_mode": "r", "file_extension": ".r", "pygments_lexer": "r", "mimetype": "text/x-r-source", "name": "R", "version": "3.4.2"}, "kernelspec": {"display_name": "R", "language": "R", "name": "ir"}}}