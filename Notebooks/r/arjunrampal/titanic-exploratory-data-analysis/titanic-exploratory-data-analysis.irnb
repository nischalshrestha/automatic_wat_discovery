{"nbformat_minor": 0, "cells": [{"metadata": {"_uuid": "8ce7177f1c77dbacb7ba390fbfe094547347fdae", "collapsed": false, "_execution_state": "idle"}, "outputs": [], "cell_type": "code", "source": "\n# Synopsis\n# The goal is to predict titanic survivors from a dataset that features the passenger's class, name, sex, age, number of siblings/spouses aboard, number of parents/child aboard, ticket number, fare, and the embarking port. This report provides data exploration with exploratory visualizations, feature engineering and predictive modeling.\n\n# Data Exploration\n\n### Data Loading\n\n# Load Data and replace missing data with \"NA\" values.\n```{r warning=FALSE, message = FALSE}\n# Load the training data set, add NA to missing(blank) values\ntrain <- read.csv(\"../input/train.csv\", header=T, na.strings = c(\"\"))\ntest <- read.csv(\"../input/test.csv\", header=T, na.strings = c(\"\"))\nstr(train)\n```\n", "execution_count": 1}, {"metadata": {"_uuid": "1c8e332aa1dd75e62b2a22e7af8e668ba6181b29", "collapsed": false, "trusted": false, "_execution_state": "idle"}, "source": "\n### Survived \n\n# How many Survived?\n```{r warning=FALSE, message = FALSE}\nlibrary(ggplot2)\ntable(train$Survived)\nprop.table(table(train$Survived))\nggplot(train, aes(Survived, fill=\"salmon\")) + geom_bar()\n```\n\n# Survival rate is 38% while those who did not make it is 62%.\n\n### Class \n# There are a few things money cannot buy like manners, morals, intelligence and CLASS. But, class could be bought on Titanic!\n```{r warning=FALSE, message = FALSE}\ntrain$Pclass <- as.factor(train$Pclass)\ntable(train$Pclass)\n```\n# Most people travelled 3rd class and as the chart depicts most of them did not make it. Clearly, disadvantage class 3.\n\n```{r warning=FALSE, message = FALSE}\nggplot(train, aes(Pclass, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n### Name \n\n# What's in the name?\n# Mostly, Mr., Mrs., Miss and Master and then a few interesting others.\n# The survival rates differ by title, advantage Ladies and children! \n\n```{r warning=FALSE, message = FALSE}\nlibrary(stringr)\nTitle <- as.factor(str_sub(train$Name, str_locate(train$Name, \",\")[ , 1] + 2, str_locate(train$Name, \"\\\\.\")[ , 1] - 1))\ntable(train$Sex,Title)\nggplot(train, aes(Title, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n\nNameLength <- nchar(as.character(train$Name))\nNameLenCat<-cut(NameLength, seq(12,82,5))\ntable(train$Survived, NameLenCat)\nggplot(train, aes(NameLenCat, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n\n\n```\n\n# Longer names help you survive!! Strange but true on titanic!\n\n### Sex\n\n# Too many men when compared to women. Clearly, women first!\n```{r warning=FALSE, message = FALSE}\nggplot(train, aes(Sex, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n### Age\n\n# Too many missing values (177/891 = 20%), will need to impute.\n```{r warning=FALSE, message = FALSE}\nsummary(train$Age)\nggplot(train, aes(Age)) + geom_density(kernel=\"gaussian\")\ntable(train$Survived, is.na(train$Age))\nAge_Null <- is.na(train$Age)\nAgecat<-cut(train$Age, seq(0,85,8))\nggplot(train, aes(Agecat, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n# Passengers with age missing have a survival rate of 29% while others have a survival rate of 40%.\n# Differing age categories have different survival rate, this will help the predictions.\n\n### Sibling or Spouse\n\n# 608 travelling alone, rest with family. Travelling Single proved to be disadvantageous; while \n# travalling with 1 is advantageous.\n```{r warning=FALSE, message = FALSE}\ntable(train$SibSp)\nggplot(train, aes(SibSp, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n### Parent or Child\n\n# 678 travelling alone, rest with family. Again, travelling Single proved to be disadvantageous; while \n# travalling with 1,2,3 is advantageous.\n```{r warning=FALSE, message = FALSE}\ntable(train$Parch)\nggplot(train, aes(Parch, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n### Ticket\n# There are tickets with differing total number of digits and there are tickets that start with characters. \n# Does that encode some information? Some ticket types like those starting with 1, 2 and P  have higher\n# chances of survival.\n```{r warning=FALSE, message = FALSE}\nTicketType <- substring(train$Ticket,1,1)\nTicketType2 <- nchar(as.character(train$Ticket))\nTicketType <- as.factor(TicketType)\nTicketType2 <- as.factor(TicketType2)\nggplot(train, aes(TicketType, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\nggplot(train, aes(TicketType2, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n### Fare\n# There are 248 unique fares.\n# As expected, 1st class is way more expensive.\n```{r warning=FALSE, message = FALSE}\nlength(unique(train$Fare))\naggregate(Fare ~ Pclass, train, mean)\n```\n\n### Cabin\n\n# There are only 204 cabin values, out of 204 there are 148 unique values.\n# There are 687 missing values.\n```{r warning=FALSE, message = FALSE}\nlibrary(DT)\nsum(!is.na(train$Cabin))\nlength(unique(train$Cabin))\nsum(is.na(train$Cabin))\ndatatable(data.frame(summary(train$Cabin)))\n```\n\n# Clearly, those with cabins have higher survival rates.\n```{r warning=FALSE, message = FALSE}\nCabinType <-  substring(train$Cabin,1,1)\nggplot(train, aes(CabinType, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\n```\n\n### Embarked\n\n# There are 3 departure locations, most people are from Southampton then Cherbourg and Queenstown.\n# There are 2 missing values for embarking point which need to be imputed.\n# Cherbourg has the highest survival rate as mostly class 1 boarded from there.\n\n```{r warning=FALSE, message = FALSE}\ntable(train$Embarked)\ndatatable(train[is.na(train$Embarked),])\nggplot(train, aes(Embarked, ..count.., fill = factor(Survived))) + geom_bar(position=\"dodge\")\nggplot(train, aes(Embarked, ..count.., fill = factor(Pclass))) + geom_bar(position=\"dodge\")\n```\n\n# Feature Engineering\n\n### Combining Data Sets\n\n```{r warning=FALSE, message = FALSE}\nSurvived <- train$Survived \ntrain$Survived <- NULL\ncombi <- rbind(train,test)\n```\n\n### New Features\n# Based on the insights gained from the data exploration above, we create new features.\n\n#Title: Extract title from the name \n#- NameLenCat: Formulate categories based on the length of the names\n#- Family Size: Total of Siblings/Spouse and Parent/Child\n#- Ticket Letter: First Letter of the ticket\n#- Ticket Length: Length of the ticket number\n#- Cabin Type : First letter of cabin, replace NA with \"N\"\n```{r warning=FALSE, message = FALSE}\n#Title\ncombi$Title <- as.factor(str_sub(combi$Name, str_locate(combi$Name, \",\")[ , 1] + 2, str_locate(combi$Name, \"\\\\.\")[ , 1] - 1))\n\n#Name Length Category\nc_NameLength <- nchar(as.character(combi$Name))\ncombi$NameLenCat<-cut(c_NameLength, seq(11,86,5))\n\n#Family Size\ncombi$FamilySize<- combi$SibSp + combi$Parch + 1\n\n#Ticket First Letter\ncombi$TicketLett <- as.factor(substring(combi$Ticket,1,1))\n#Ticket Length\ncombi$TicketLen <- as.factor(nchar(as.character(combi$Ticket)))\n\n#CabinType\ncombi$CabinType <-  substring(combi$Cabin,1,1)\ncombi$CabinType[is.na(combi$CabinType)] <- \"N\"\ncombi$CabinType <- as.factor(combi$CabinType)\n\n\n```\n\n### Impute missing values\n\n#- Embarked: Replace 2 missing values with \"S\"\" which is most occuring value by a big margin.\n#- Fare: Replace 1 missing value with the mean on certain conditions.\n#- Age: There are too many missing values, impute Using rpart.\n```{r warning=FALSE, message = FALSE}\ncombi$Embarked[is.na(combi$Embarked)] <- \"S\"\ncombi$Fare[is.na(combi$Fare)] <-mean(combi[combi$Pclass == 3 & combi$Embarked == \"S\" & combi$TicketLen==4 &\n                                                   combi$CabinType == \"N\", \"Fare\"], na.rm = TRUE)\n\nlibrary(rpart)\nAgefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + NameLenCat +FamilySize +\n                        TicketLett+TicketLen+CabinType, data=combi[!is.na(combi$Age),], method=\"anova\")\ncombi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])\n\n```\n\n#Seperate the data into train and test sets\n```{r warning=FALSE, message = FALSE}\ntrain <- cbind(Survived, combi[1:nrow(train),c(2,4,5,6,7,9,11,12,13,14,15,16,17)])\ntest <- combi[(nrow(train)+1):nrow(combi),c(2,4,5,6,7,9,11,12,13,14,15,16,17)]\n```\n\n# Build Random Forest Ensemble\n```{r warning=FALSE, message = FALSE}\nlibrary(randomForest)\nset.seed(777)\nfit <- randomForest(as.factor(Survived) ~  Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + NameLenCat +FamilySize\n                    + TicketLett + TicketLen + CabinType, data=train, importance=TRUE, ntree=2000)\n# Look at variable importance\nvarImpPlot(fit)\n# Now let's make a prediction and write a submission file\nPrediction <- predict(fit, test)\nsubmit <- data.frame(PassengerId = c(892:1309), Survived = Prediction)\nwrite.csv(submit, file = \"randomforest.csv\", row.names = FALSE)\n```", "outputs": [], "cell_type": "code", "execution_count": 1}], "metadata": {"language_info": {"mimetype": "text/x-r-source", "codemirror_mode": "r", "file_extension": ".r", "name": "R", "pygments_lexer": "r", "version": "3.4.1"}, "kernelspec": {"display_name": "R", "language": "R", "name": "ir"}}, "nbformat": 4}