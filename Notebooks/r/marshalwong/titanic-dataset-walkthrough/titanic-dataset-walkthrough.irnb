{"nbformat": 4, "metadata": {"language_info": {"codemirror_mode": "r", "file_extension": ".r", "mimetype": "text/x-r-source", "pygments_lexer": "r", "name": "R", "version": "3.4.1"}, "_change_revision": 0, "_is_fork": false, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "nbformat_minor": 0, "cells": [{"metadata": {"_uuid": "f006fa80a0f3248c072fd73df0c58d1765414735", "_cell_guid": "f35a6a28-f0e9-8e9a-3a94-a3b0ede390b9"}, "source": "The Kernel is an open learning exploration of the Titanic dataset with R.  \n\nI plan on discussing the following:\n\n- importing data\n- initial data exploration\n- data cleansing and manipulation\n- exploratory graphics\n- linear statistical modeling\n- statistical learning models (Random Forests, etc.)\n- neural networks(?)\n\nThis is a personal learning exercise, so comments and corrections are more than welcome.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "4bb4eec8b576b04ffe63ca03cd335e4e59345674", "_cell_guid": "0d55a307-512d-bf19-f96d-256f548c96bc"}, "source": "**Importing data**\n\nI will be using the tidyverse package because I'm a Hadley Wickham fanboy and it's as good a place to start as any.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "580ba5e5cac1b287d4fbca56e405189566609782", "trusted": false, "_cell_guid": "4065acb6-5da2-eff2-bb0e-15d76a1b1e1b"}, "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(tidyverse)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "bfc72aabbc7ce8301495b1d454efd2c2223b339e", "_cell_guid": "6cd8a8f1-db25-55b3-efdc-872231fe394e"}, "source": "The first thing that needs to be done is understanding the format that the source data in.\n\nLet's look at the first few lines of the *train.csv* file.  Even though it's call a *.csv* (comma separated values) file, it doesn't necessarily mean that the data is separated by commas.  Sometimes they are separated by tabs or semi-colons.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "84dc1d4fd7d584082170889e0975a1855e0c1694", "trusted": false, "_cell_guid": "f8a10ccc-1bf5-cbe8-5262-6ae85f975647"}, "source": "## File\nfile <- \"../input/train.csv\"\n \n## Create connection\ncon <- file(description=file, open=\"r\")\n\n## read the first five lines\nreadLines(con, n = 5)\nclose(con)", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "91bbbc70fa5df1cd704421724eeee907bf452331", "_cell_guid": "40f8f739-2da3-62fa-b6de-acc5da838472"}, "source": "We can see that this *.csv* file is actually comma delimited.\n\nTherefore, we can use the *read_csv()* function to lead the data into a data frame *train*.\n\nBefore doing that though, it's a good idea to \"RTFM\" at [the Titanic Data page][1].  This gives you a description of what the fields are and should have once we start loading the data.\n\n  [1]: https://www.kaggle.com/c/titanic/data", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "f62fe6b057a914ab29b6e8d441c6a91f3107bd5c", "trusted": false, "_cell_guid": "8539c1e9-7d06-e6c3-8033-44580f9d3d5d"}, "source": "train <- read_csv(\"../input/train.csv\")", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "7ee7c5dbf145cd189303443ea2b34d2be85d6ffa", "_cell_guid": "980d1fe2-bf4b-9b7b-61d5-8d28bfd5e3dc"}, "source": "**Data Cleansing**\n\nThe *train* data frame has 12 columns as listed.\n\nBefore doing any analysis, it's usually a good idea understand what's in the data and whether you have any \"bad\" data that needs to be fixed.  A good guide for types of problems you often find in the data can be found at [The Quartz guide to bad data][1].\n\nStart by getting a summary of the data frame.\n\n  [1]: https://github.com/Quartz/bad-data-guide", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "943b73f837819f84c6c569f96bc89495af200cb4", "trusted": false, "_cell_guid": "4e0a64c1-4a91-2047-5148-4fc142a2eda3"}, "source": "summary(train)", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "1828df147c2775da054b22b1960566adabf9858a", "_cell_guid": "7a998939-4a23-c038-7460-6a9acce6dfe6"}, "source": "Let's go through each of the columns one-by-one.\n\n*PassengerId* should be a unique identifier.  Let's check. ", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "7cac87806ed937f957d5e5878fd2e06775e2a5d2", "trusted": false, "_cell_guid": "e747c85b-6d9c-1f4c-25a8-953abb358369"}, "source": "count(train)\nsummary(duplicated(train$PassengerId))", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "eb6be5bc94744caed0fff2765dc8c8637c0d10fd", "_cell_guid": "e1d715e4-78f3-4472-e739-485abfa9720d"}, "source": "The *duplicated()* function from *dplyr* returns a vector of booleans with *TRUE* if the element is a duplicate.  \n\nAs there are 891 rows in the data frame and all of the rows are *FALSE* according to *duplicated()*, we now know that the *PassengerId* is unique to each row.\n\nSo let's check the other columns.  *Survived* should only be \"1\"s and \"0\"s.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "5d829d4c43a3b3287e1341733477bcad7aa9823f", "trusted": false, "_cell_guid": "bfa99ead-8118-975c-2b13-78f1a50d5fe4"}, "source": "train %>% group_by(Survived) %>% summarise(count = n())", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "63f7ca369b598141e8cc6dfb71a20660e3527fc8", "_cell_guid": "a1906204-eb60-d053-2917-f37f09fbf52a"}, "source": "In the above example, I have used the *%>%* or *pipe* function which is part of the *magrittr* package in the *tidyverse*.  Piping, just like in UNIX, allows for much easier to read code.  So the code above just says, \"take the *train* data frame, group it by *Survived* and then summarize the count of each group\"\n\nNo issues with the *Survived* column.  On to *Pclass* by doing the same thing.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "003b0d98f065a50fb3cfc4d77fee98ee39bebef6", "trusted": false, "_cell_guid": "71de6cb1-5858-9d69-90ea-6b734b983751"}, "source": "train %>% group_by(Pclass) %>% summarise(count = n())", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "66bd68f70894012c1806520b64d5b792067325a9", "_cell_guid": "870da5ba-f1f7-bfa1-b76e-f9ba9223f6b3"}, "source": "Again, no surprises.\n\nWe can already see from the *summary(train)* results that *Name* has 891 items.  As a quick check, let's check if any of them are blank.  For this, we need the *stringr* library which is part of the *tidyverse* but not loaded automatically.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "b3fc69c361c724e10360a23a15e369debd0f2998", "trusted": false, "_cell_guid": "84804c50-a1af-0df0-091c-1c4123957180"}, "source": "library(stringr)\n\n## max string length\ntrain %>% str_length() %>% max()\n\n## min string length\ntrain %>% str_length() %>% min()", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "24ca0c6cbc61b03e4ebfd2410219946dd8f6c478", "_cell_guid": "b9cbdc24-8d7b-26be-63d5-490118a64b7f"}, "source": "So we know that the smallest string is 5 characters long.  Let's hope that it's not just 5 spaces.  We'll cross that bridge when we get there.\n\nHow about *Sex*?", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "f12a603da2dff612357de6e22907d2a07586afdb", "trusted": false, "_cell_guid": "14990b50-2b0c-62d7-ab74-b0004c69dc21"}, "source": "train %>% group_by(Sex) %>% summarise(count = n())", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "808077165829e4040a671ca98b8e763412e3d17d", "_cell_guid": "2c751710-d155-3687-1039-036c29e23110"}, "source": "No *NAs*, but the gender is recorded as a characters when it probably is better to have this as a factor.  So let's do this.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "8aabf9ec5b7025d7df1091f66f676a1bf5ddc84e", "trusted": false, "_cell_guid": "92380f40-7f95-33f1-bb58-ffc647bdf0c6"}, "source": "## Get the distinct levels from the Sex column\nsex_summary <- train %>% group_by(Sex) %>% summarise(count = n())\nsex_summary$Sex\n\n## Convert the Sex column to a factor\ntrain$Sex <- factor(train$Sex, levels = sex_summary$Sex)\nclass(train$Sex)", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "449faf4364e75c431c6297958f7d72186ee54cbe", "_cell_guid": "61ea8388-abbc-3662-d4bc-8e15a27ad227"}, "source": "So we're good there.\n\nNow onto *Age*, which from above we know there are *NAs*.  This brings us to the question of what to do with *NAs* or *null* values in general.  This would depend on what the column/variable is supposed to represent.  In some cases, a *null* value makes sense, such as a variable that holds the *PassengerId* of the individual's sister.  If the individual is an only child, then it makes sense to have *null*.\n\nHowever, in this case, everyone has an *Age*, so it doesn't really make sense to have no value in the field.  Having decided that, the first step would usually be to go back to your source and see if this information can be provided.  If that can't be done, as in this case, we should probably make a decision as to what value to put in to replace the *NAs*.  A common default is \"0\", but that wouldn't make sense in this case.  Would there be 177 new-borns on the Titanic?  Some other options would be to put in the most common value or mean.  We need to be aware of what biases either of these choices would introduce into any analysis we do with the data.\n\nIn this case, we can find the age of some of the people with missing data via some Wikipedia searches.", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "ab8ed9b54148476036dfca912bf76b54d467af3f", "trusted": false, "_cell_guid": "a6cb7565-943f-4f6c-7d3d-b973ac67685f"}, "source": "filter(train, is.na(Age))", "outputs": [], "cell_type": "code", "execution_count": null}, {"metadata": {"_uuid": "721f962c58427f6bc87a18865f02a546325c3783", "_cell_guid": "7ad16b14-328a-dd71-64b2-e7788467d288"}, "source": "Web-scraping, reading of HTML into R, and joining the data based on names is beyond the scope of this kernel.  We took the data from [Encyclopedia Titanica][1] and identified where we could the age of the list above.  The results were uploaded as  *missing_ages.csv*.\n\nI guess the main lesson is that where possible, consider other data sources. \n\n  [1]: https://www.encyclopedia-titanica.org/titanic-passengers-and-crew/ \"Encyclopedia Titanica\"", "outputs": [], "cell_type": "markdown", "execution_count": null}]}