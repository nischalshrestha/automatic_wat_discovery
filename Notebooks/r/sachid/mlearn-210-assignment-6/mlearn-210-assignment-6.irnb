{"cells":[{"metadata":{"_uuid":"cf981dfcd9d37f6c8f285bfec7f4586abcabc1a9","_cell_guid":"431f1f76-ce5f-e648-8cf7-7b6895718ecf"},"cell_type":"markdown","source":"**MLEARN-210 - Assignment-6**","outputs":[],"execution_count":null},{"metadata":{"_uuid":"b30bce8e93cb76683278b3059f8b2118ff26aafd","trusted":true,"_cell_guid":"46cf96b2-e211-ba30-f5c6-e719628453a2"},"cell_type":"code","source":"# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a27a00759872d74630a3ba846421b2f8bc3313d9","trusted":true,"_cell_guid":"a8f90220-675a-5d24-ba8a-94088039d4a9"},"cell_type":"code","source":"train <- read.csv('../input/train.csv')\ntest  <- read.csv('../input/test.csv')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"45962205755f743c8f312a1c04a9716b8934ca5c","trusted":true,"_cell_guid":"6b9e6295-178d-443c-d794-457447407ad9"},"cell_type":"code","source":"## find the NA fields in the dataset\n\nsapply(train,function(x) sum(is.na(x)))\n\nsapply(train,function(x) summary(is.na(x)))\n       ## There is one value in Fare which is NA and many values in Age which has NA values","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fd2b4c89c419e1ef9fd2b09b96ff5951d216ee6c","trusted":true,"_cell_guid":"2635dd3c-84f4-2c1d-c3c3-3a5b98b89ebd"},"cell_type":"code","source":"## getting a backup of train dataset\n\ntrain1 <- train ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a0fbffefedc43501588cdefd565bec96db7a2736","trusted":true,"_cell_guid":"3105200b-4723-0cc4-03ab-98a63b624a9a"},"cell_type":"code","source":"## since some of the data are missing, lets combine the two datasets to apply my logic to get values\n## for the NA fields\n\ntrain$Survived<-NULL\n\n## join the two datasets to get a new combined dataset\n\ncombo<-rbind(train,test)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6f814c479807098bc75d8055f132e58f32120727","trusted":true,"_cell_guid":"e7d23018-cd15-ec86-57ba-6a230c4f70c8"},"cell_type":"code","source":"## I will generate a function to get the missing values. \n\n## to get the age values, lets do some analysis on age column\n\n## age vs Class\n\nlibrary(ggplot2)\n\nggplot(data=combo,aes(x=factor(Pclass),y=Age,fill=factor(Pclass)))+\n  geom_bar(stat=\"identity\",position = position_dodge())","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dcffbd7ff13641512cd68bba78140158a393c52a","trusted":true,"_cell_guid":"ead54032-af8e-f392-8466-ce66753e9dfe"},"cell_type":"code","source":"## age vs Class grouped dodge\n\nggplot(combo,aes(Age,fill=factor(Pclass)))+\n  geom_bar(binwidth=1,position = position_dodge())","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a3a1ef2039ba8feea12becb694ee05fa957c287b","trusted":true,"_cell_guid":"dc79fe8f-f42c-6a54-6906-1e500e70d325"},"cell_type":"code","source":"## the plot shows the class depend on different age group people. we will generate the \n## NA age columns as depending on the class\n## Function to get the mean of the age for the Pclass\n## for a missing age, get the Pclass and get the mean of age for that Pclass and replace this \n## mean value for the missing age\n\n\nmean_class <- function(class){\n  classvec<-subset(combo,Pclass==class)\n  mean_age<-mean(classvec$Age,na.rm=TRUE)\n  return(mean_age)\n}\n\nl_age <- length(combo$Age)\nlibrary(dplyr)\n\ni<-1\nfor(i in 1:l_age) {\n  if (is.na(combo$Age[i])==TRUE){\n    class_value<-combo$Pclass[i]\n    combo$Age[i]<-mean_class(class_value)\n  }\n\n  }","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a08902d2ecad881ea4780e23228d26ac970c9702","trusted":true,"_cell_guid":"976be925-42f6-c019-77b3-393e9e726909"},"cell_type":"code","source":"## Class vs fare\n  \n  ggplot(combo,aes(Fare,fill=factor(Pclass)))+\n    geom_bar(stat = \"identity\",position = position_dodge(),binwidth = 5)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7eafdd71749c23f4c053ac86fa2e90ff3a28d600","trusted":true,"_cell_guid":"8a69c97d-2b8f-8904-8cfe-cf1760ac14bc"},"cell_type":"code","source":"## class 3 has the highest fare\n  \n  fare_na_index <- which(is.na(combo$Fare))\n  \n df<-subset(combo,Pclass=3)\n vec<-df$Fare\n \n \n mean(vec,na.rm = TRUE)\n combo$Fare[fare_na_index]<-mean(vec,na.rm = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"49a563ed2ef5f509acc4ac72a820942c67e72b82","trusted":true,"_cell_guid":"65210a8b-a8cd-f4d3-a669-9233879ac79e"},"cell_type":"code","source":"## Calculate the number of cabins per passenger id\n cabin_no<-function(string){\n   return(length(strsplit(string,\" \")[[1]]))\n }\n \n l_cabin<-length(combo$Cabin)\n combo$Cabin<-as.character(combo$Cabin)\n \n l<-0\n for(l in 1:l_cabin){\n     \n   cabin_string<-combo$Cabin[l]\n   if (cabin_string==\" \"){\n     combo$Cabin[l]<-0\n   }\n   else{\n   cabin_count<-cabin_no(cabin_string)\n   combo$Cabin[l]<-cabin_count\n   }\n   \n }\n \n combo$Cabin<-as.numeric(combo$Cabin)\n ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"18b9132cdd0ded2e12869d525e4e798e18885649","trusted":true,"_cell_guid":"ad47e17e-3863-e243-5abc-122097874992"},"cell_type":"code","source":"## converting the factor values to numeric\n combo$Sex <- factor(x=combo$Sex,labels = c(1,2))\n combo$Embarked<-replace(combo$Embarked,combo$Embarked==\"\",\"S\")\n combo$Embarked<-factor(x=combo$Embarked,labels=c(1,2,3))\n ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b019395a9fc7d2e5a9b3c50cd0202bc11f29c2df","trusted":true,"_cell_guid":"87a68db9-6f15-c62a-7c14-9bfac9d0ed39"},"cell_type":"code","source":"## getting the family member number\n \n names(combo)\n combo$family<-combo$SibSp + combo$Parch\n combo$SibSp<-NULL\n combo$Parch<-NULL","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d7468d90885c8a4fa34c264c90e14a3a8cb56f08","trusted":true,"_cell_guid":"179763c7-3181-fef1-1992-9e4c41b5ec56"},"cell_type":"code","source":"## Ignoring the name and Ticket\n \n combo$Name<-NULL\n combo$Ticket<-NULL\n \n ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"222271498d8d470e37de6acdb5ce2738eade854d","trusted":true,"_cell_guid":"1b295837-6ecf-cb49-53e6-38b9de187518"},"cell_type":"code","source":"names(combo)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6ec71cbe177bcfc91409f919b206d9a595b8d3ab","trusted":true,"_cell_guid":"00dd7bc8-bdf1-d0eb-0eb2-8935e631f8e9"},"cell_type":"code","source":"## At this point I have got my entire data, from here I can apply any model I want on my data. \n\n## I would want to go in the conventional process and will apply a simple classification on this data.\n\n## for classification, I first need to divide my data again\n\nnrow(train)\nnrow(test)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5f4750a4c6c7af75c08bacbc48a3d4f4a9319d32","trusted":true,"_cell_guid":"3fbc9207-0cee-56f5-f91b-fd66cb20af14"},"cell_type":"code","source":"## Let me create another training dataset\n\ntrain <- combo[1:891,]\ntest <- combo[892:1309,]\ntrain$Survived <- train1$Survived\nnames(train)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b27ff2c7f22cdf63b9a99dd0c71eb8f30f258383","trusted":true,"_cell_guid":"5295c4cf-da77-4519-689f-d7f75c865a32"},"cell_type":"code","source":"## clasification formula\n\nclassifier<- glm(formula=Survived~Pclass+Sex+Age+Fare+Cabin+Embarked+family,family=\nbinomial,data=train)\n\nsummary(classifier)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d3f8b99995f96dead99093b1fb8d0ef8e6c6034c","trusted":true,"_cell_guid":"e81aa248-6707-6d25-8ad2-1c1ed0f08d96"},"cell_type":"code","source":"## From the above summary details, we will remove the columns which are least co related to Survival\n## so new formula is \n\nclassifier<- glm(formula=Survived~Pclass+Sex+Age+family,family=\nbinomial,data=train)\n\nsummary(classifier)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d6d79770fdcab368f1d7250c7c63db666790296a","trusted":true,"_cell_guid":"fae58000-f4d3-4695-6fca-fd44705308bf"},"cell_type":"code","source":"## Prediction is \n\nsur_pred<-predict(classifier,type = 'response',newdata = test)\n\ny_pred<-ifelse(sur_pred>0.5,1,0)\n\ntest$Survival<-y_pred\n\nsubmit<-data.frame(test$PassengerId,test$Survival)\nnames(submit)<-c(\"PassengerId\",\"Survived\")\n\nwrite.csv(submit,file='survival.csv',row.names=FALSE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c93681d7f9e31f4ea8edb7d61e8986936faa7e4f"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","version":"3.4.2","name":"R","pygments_lexer":"r","file_extension":".r","codemirror_mode":"r"},"_change_revision":0,"_is_fork":false},"nbformat":4,"nbformat_minor":1}