{"cells":[{"metadata":{"_uuid":"a1270b10f1ac2e8b09fa2661795f231ab03468ef","_execution_state":"idle","trusted":false,"_kg_hide-input":false,"_kg_hide-output":false},"cell_type":"markdown","source":"# Titanic Competition\n\nIn this Kernel I take part in the Titanic Competition on Kaggle. First of all I do some Exploratory Analysis to get some statistical knowledge on the dataset. After some feature engineering I use the caret-library to predict the survival value of the Kaggle test-dataset.\n\n## Exploratory Analysis\n\nFirst of all we load several libraries and the tain dataset. To be sure, I do a manual conversion of the features to numeric or factor variable."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"cb93335519acb6bb1001988322fa97245bd3dec4"},"cell_type":"code","source":"library(ggplot2)\nlibrary(caret)\nlibrary(dplyr)\nlibrary(doSNOW)\n\ntrain<-read.csv2(file=\"../input/train.csv\", sep=\",\", colClasses = c(rep(\"character\",12)))\n\n\ntrain$Survived<-as.factor(train$Survived)       \ntrain$Pclass<-as.factor(train$Pclass)           \ntrain$Sex<-as.factor(train$Sex)         \ntrain$Age<-as.numeric(train$Age)      \ntrain$SibSp<-as.numeric(train$SibSp)      \ntrain$Parch<-as.numeric(train$Parch)      \ntrain$Ticket<-as.character(train$Ticket)    \ntrain$Fare<-as.numeric(train$Fare)      \ntrain$Embarked<-as.factor(train$Embarked)      \n#train$MissingAge<-as.factor(train$MissingAge)\n#train$FamilySize<-as.numeric(train$FamilySize)\n\nsummary(train)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e9026792610e90038d8b578c9d50170fe060093b"},"cell_type":"markdown","source":"We see that we have some problems with missing data. There are 177 missing ages an 2 missing departure places (\"Embarked\"-feature). \n\nHere I plot the desity of the ages, seperated by the survival feature. The vertical line represents the average age of survived or dead people."},{"metadata":{"trusted":true,"_uuid":"9205d9840793d6ece611e17e33d8d12dd21ff260"},"cell_type":"code","source":"g<-ggplot(train, aes(Age, color = Survived))\ng+geom_density(na.rm = T)+\n        geom_vline( aes(xintercept = mean(train$Age[train$Survived==0], na.rm=T), color=\"0\"))+\n        geom_vline( aes(xintercept = mean(train$Age[train$Survived==1], na.rm=T), color=\"1\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e2b96151296432602c13193cccaba98630fdd725"},"cell_type":"markdown","source":"You can see that the distributions are realy close to each other. but in fact children under 10 years have a higher survival rate.\n"},{"metadata":{"trusted":true,"_uuid":"1ee27d15a7e9915cc55f48bf9348f33142474fbd"},"cell_type":"code","source":"# Parch >2 \ng<-ggplot(train[train$Parch>2,], aes(Age, color = Survived))\ng+geom_density( na.rm = T)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c30bd3bae4d34ad7b1a6fef25fea4fc8888cc3da"},"cell_type":"markdown","source":"Lets take a look at the survival rate in conjunction with the Pclass and the gender."},{"metadata":{"trusted":true,"_uuid":"37a81665d2044251ceb69fcb2ee9055adceda631"},"cell_type":"code","source":"g<-ggplot(train, aes(Pclass, color = Survived))\ng+geom_bar( fill=\"white\")+facet_grid(. ~ Sex)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"51c8c09f0043c4f7604ac5c68cadd1bf508a0a71"},"cell_type":"markdown","source":"It can be seen, that women out of the fist and second class have a realy high survival-rate.That dosn't hold true for men and  the third class. Especially the men of the third class survived in very few cases.\n\nThe next plot shows us the survival rate of the passenger in conjunction with the starting point of the journy."},{"metadata":{"trusted":true,"_uuid":"5358d5130864c8d8931b2a0d35490fc1bff63c64"},"cell_type":"code","source":"g<-ggplot(train, aes( Embarked, color = Survived))\ng+geom_bar( fill=\"white\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b8bf866ef741b8559608ae708855540758d9a97d"},"cell_type":"markdown","source":"\nIt seems that only passangers who start there journy in \"C\" have a higher chance to survive. Especially passengers who start in \"S\" have a hight mortility rate.\n\nNow we have a detailed understanding of the data. Severarl features contain knowldge about the prediction value.\nThis features are mainly the following:Pclass, Sex, Age, Parch ,Embarked.\n\nWe also know that we have a signifcant amount of missing data in the age feature. Since we can noch exclude this amount of data, during the prediction, we have to immute this values.\n\n## Feature aggregation and imputing missing Values\n\nFirst i create some more features, who could help in further prediction."},{"metadata":{"trusted":true,"_uuid":"452acf3b7b4cbdecb2893540709de17834cc5fa5"},"cell_type":"code","source":"\n# Add feature for tracking missing ages (not used in futher prediction)\ntrain$MissingAge<- ifelse(is.na(train$Age), \"Y\", \"N\")\ntrain$MissingAge<-as.factor(train$MissingAge)\n\n# Add a feature for familiy size (not used in futher prediction)\ntrain$FamilySize<-1 + as.numeric(train$SibSp) + as.numeric(train$Parch)\n\n# Grouping by Ticket  (not used in futher prediction)\ntickets_person_count<-train %>% group_by(Ticket) %>% summarize(person_count = n())\n\n# Merging by Ticket (not used in futher prediction)\ntrain <- merge(train, tickets_person_count, by.x = \"Ticket\", by.y = \"Ticket\", all = T)\n\n# Calculate per Person Ticket-Fare (not used in futher prediction)\ntrain <-train %>% mutate( Fare_pP = Fare/person_count)\ntrain<-arrange(train, PassengerId)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4db6fafda491923a4a12c5b5e6940e64256752ff"},"cell_type":"markdown","source":"In the next steps we handel missing values in the features \"Embarked\" and \"age\". \nSince there are only two missing values in Embarked, we impute that values with \"S\", because that is the most commen value.\nFor the imputing of the missing ages we use the bagImpute method of the caret r-package."},{"metadata":{"trusted":true,"_uuid":"2cd3e33ad8368bd3b2082465fab62e20587d3fb3"},"cell_type":"code","source":"# Impute missing embarked with mode\ntrain$Embarked[train$Embarked==\"\"]<-\"S\"\n\n# select used features \n#features<- c(\"Survived\", \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Embarked\", \"Fare\", \"MissingAge\", \"FamilySize\")\nfeatures<- c(\"Survived\", \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\" ,\"Embarked\", \"Fare\")\ntrain<-train[,features]\n\n# Tranform some factor variables to dummy vars\nlibrary(dummies)\ntrain.dummy<-dummy.data.frame(train, names = c(\"Pclass\",\"Sex\", \"Embarked\"))\n\n# Impute missing ages\npre.process<-preProcess(train.dummy[,-1], method = \"bagImpute\")\nimputed.data<-predict(pre.process, train.dummy)\n\n# Impute missing age value with normal distribued random variables\n#age_mean<-mean(train.dummy$Age, na.rm = TRUE)\n#age_sd<-sd(train.dummy$Age, na.rm = TRUE)\n#num_age_isna_train<-sum(is.na(train.dummy$Age))\n#train.dummy[((is.na(train.dummy$Age)) | (train.dummy$Age>105)),7]<- round(abs(rnorm(num_age_isna_train, mean =age_mean , sd = age_sd )))\n#imputed.data<-train.dummy\n\n#train$Age<-imputed.data[,6]\n\ntrain<-imputed.data\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cff952882147c173a8a7ac2a3676b84e76743fbf"},"cell_type":"markdown","source":"## Model training\n\nFor model training we use the gradient boosting machine out of the caret package. We create a tune-grid to finde the best model parameter, with the highest accuracy."},{"metadata":{"trusted":true,"_uuid":"573ea71f74f66dd07da8d1ff58983d02e54f70f0"},"cell_type":"code","source":"# Split data\nset.seed(54321)\nindexes<- createDataPartition(train$Survived,\n                              times = 1,\n                              p=0.7,\n                              list=FALSE)\ntitanic.train<-train[indexes,]\ntitanic.test<- train[-indexes,]\n\n#exermine prop of surived\n#prop.table(table(train$Survived))\n#prop.table(table(titanic.train$Survived))\n#prop.table(table(titanic.test$Survived))\n\n# Setup caret\ntrain.control<-trainControl(method=\"repeatedcv\",\n                            number = 10,\n                            repeats = 3,\n                            search = \"grid\")\n\n# setup tune grid for xgbTree\n#tune.grid<-expand.grid(eta=c(0.05,0.075, 0.1),\n#                       nrounds= c(50,75,100),\n#                       max_depth= 6:8,\n#                       min_child_weight = c(2.0, 2.25, 2.5 ),\n#                       colsample_bytree = c(0.3, 0.4, 0.5),\n#                       gamma =0,\n#                       subsample =1)\n\n# setup tune grid for gbm\ntune.grid<-expand.grid(n.trees = c( 200, 300,400, 500), \n                       interaction.depth = c(4:12),\n                       shrinkage = 0.001,\n                       n.minobsinnode = c(5:15))\n\n# create doSNOW Cluster\ncl<-makeCluster(16, type = \"SOCK\")\n\nregisterDoSNOW(cl)\n\n\n\n# Train with caret ->whol train dataset and xgbTree\n#caret.cv<-train(Survived ~.,\n#                data=train,\n#                method =\"xgbTree\",\n#                tuneGrid = tune.grid,\n#                trControl= train.control)\n\n# Train with caret ->whol train dataset and gbm\ncaret.cv<-train(Survived ~.,\n                data=train,\n                method =\"gbm\",\n                tuneGrid = tune.grid,\n                trControl= train.control,\n                bag.fraction = 0.5,\n                verbose = FALSE)\n\ncaret.cv$bestTune\nstopCluster(cl)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"205d0e9d2583a9dd6572932be2c71eb94812b1cd"},"cell_type":"markdown","source":"After we have trained our model, we take a look at the confusion matrix and espscially at the accuracy of our cross validation.\n"},{"metadata":{"trusted":true,"_uuid":"dc0222a2579053b64e24340f2d1dbd55181d7468"},"cell_type":"code","source":"preds<-predict(caret.cv, titanic.test)\n\nconfusionMatrix(preds, titanic.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8711618d537a68a0baed099887fa3a0704db77a7"},"cell_type":"markdown","source":"Since the accuracy is quite good, we decide to predict the survival feature of the test-dataset.\n\n## Prediction\nFirst we load the test dataset and add some feature that could take role in later predictions.\n"},{"metadata":{"trusted":true,"_uuid":"384dd4f2e7842a4ba376e6ea2c03f21951b7c2b6"},"cell_type":"code","source":"\n# Loading the test dataset\ntest<-read.csv2(file=\"../input/test.csv\", sep=\",\", colClasses = c(rep(\"character\",11)))\n\ntest$PassengerId<-as.numeric(test$PassengerId) \ntest$Pclass<-as.factor(test$Pclass)     \ntest$Sex<-as.factor(test$Sex)       \ntest$Age<-as.numeric(test$Age)      \ntest$SibSp<-as.numeric(test$SibSp)      \ntest$Parch<-as.numeric(test$Parch)      \ntest$Ticket<-as.character(test$Ticket)    \ntest$Fare<-as.numeric(test$Fare)      \ntest$Embarked<-as.factor(test$Embarked)       \n\n\n# create some additional features\n# Add feature for tracking missing ages\ntest$MissingAge<- ifelse(is.na(test$Age), \"Y\", \"N\")\ntest$MissingAge<-as.factor(test$MissingAge)\n\n# Add a feature for familiy size\ntest$FamilySize<-1 + as.numeric(test$SibSp) + as.numeric(test$Parch)\ntest$FamilySize<-as.numeric(test$FamilySize)\n\n# Grouping by Ticket \ntickets_person_count_test<-test %>% group_by(Ticket) %>% summarize(person_count = n())\n\n# Merging by Ticket\ntest <- merge(test, tickets_person_count_test, by.x = \"Ticket\", by.y = \"Ticket\", all = T)\n\n# Calculate per Person Ticket-Fare\n# Impute missing Fare\ntest[is.na(test$Fare) ,9]<-mean(test$Fare, na.rm = TRUE)\n\ntest <-test %>% mutate( Fare_pP = Fare/person_count)\ntest<-arrange(test, PassengerId)\n\n\n# select used features\n#features_test<- c(\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Embarked\", \"Fare\", \"MissingAge\", \"FamilySize\")\nfeatures_test<- c( \"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Embarked\", \"Fare\")\ntest<-test[,features_test]\n\n# Tranform all features to dummy vars\ntest.dummy<-dummy.data.frame(test, names = c(\"Pclass\",\"Sex\", \"Embarked\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5fe03fb11b914eac2732e7b71e4d50b1dd89e7ce"},"cell_type":"markdown","source":"Now we impute missing values like in our trainging dataset."},{"metadata":{"trusted":true,"_uuid":"3b7bc0f1579f134b498d3212d376a0947ccb2d8b"},"cell_type":"code","source":"\n\n# Immute missing embarked with mode\ntest$Embarked[test$Embarked==\"\"]<-\"S\"\n\n# Impute missing ages\npre.process<-preProcess(train.dummy[,-1], method = \"bagImpute\")\nimputed.data.test<-predict(pre.process, test.dummy)\n\n#num_age_isna_test<-sum(is.na(test.dummy$Age))\n#test.dummy[((is.na(test.dummy$Age)) | (test.dummy$Age>105)),6]<- round(abs(rnorm(num_age_isna_test, mean =age_mean , sd = age_sd )))\n#imputed.data.test<-test.dummy\n\n#test$Age<-imputed.data.test[,5]\ntest<-imputed.data.test","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"290205a24a621c70b9e3efbf7d3710bb079101de"},"cell_type":"markdown","source":"At least we do the prediction and format the results and save them in a csv-file."},{"metadata":{"trusted":true,"_uuid":"dd00bbbb1e3360470e2e005592cf2a6d9691bee2"},"cell_type":"code","source":"# Do the prediction with our trained model\npreds2<-predict(caret.cv, test)\n\nresult<-data.frame(c(892:1309), as.character(preds2))\ncolnames(result)<-c(\"PassengerId\", \"Survived\")\n#write.csv(result, \"../input/result.csv\", row.names=FALSE, quote = FALSE)\nresult","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}