{"nbformat_minor": 0, "cells": [{"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "d920a0f6-0ec0-463a-ad37-618ea582a761", "_execution_state": "idle", "collapsed": false, "_uuid": "6a3471d93e15c1cd929453c13486673a92118365"}, "source": "# Filling in missing age data for the Titanic data set\nCharles Carnegie\n15 July 2017"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "2ebd32e2-7bfb-4cce-a20f-b994cfd9eef7", "_execution_state": "idle", "collapsed": false, "_uuid": "e9df81a65d09fd1d41141fe2179c731c6027b028"}, "source": "### Introduction\nThis script takes a deep dive into the question of predicting age in the Titanic data set.  \nI thought it would be appropriate for my first Kaggle script.  Feedback is very welcome."}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "069fd3ca-46ca-42ef-900f-e1f0352ee81f", "_execution_state": "idle", "collapsed": false, "_uuid": "adeea911f4e6259dc7cba7559b6492364c191d9f"}, "source": "### Contents\nThis rest of this script is organised into five parts:\n\n1. General Setup\n\n2. Tidy the files into a usable form\n\n3. Plot the data\n\n4. Test and compare various models: \n       - Linear Model\n       - Tree\n       - RPart\n       - Random Forrest \n       - Boosted Model  \n\n5. Summary and conclusions"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "a3651bd5-3507-4a1c-9f0d-8c822b9f133d", "_execution_state": "idle", "collapsed": false, "_uuid": "1d2b73cbb1711c29583f88d73cc2cf43ca1460c1"}, "source": "### Acknowledgements\n\nThis kernel builds on code from other contributors:\n\n https://www.kaggle.com/huijunzhao/titanic-r\n\n https://www.kaggle.com/headsortails/tidy-titarnic\n\n https://www.kaggle.com/mrisdal/exploring-survival-on-the-titanic"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "66c04ecc-8ccd-46d2-97f8-001817a8daff", "_execution_state": "idle", "collapsed": false, "_uuid": "fd2fdb0e93ebd63c0826e299bf486057485859f7"}, "source": "# 1. General setup"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "a71e78a2-30d3-4bf2-a7a5-1a203b081c8a", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "3f44f956404bff07cfeb3bf07bf852351749c36a"}, "source": "# Load the libraries\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(tidyverse) # ggplot and others\n\n# Read the files\ntrain.data <- read_csv(\"../input/train.csv\")\ntest.data <- read_csv(\"../input/test.csv\")\n\n# Combine the files\ntrain.data$file <- \"Train\"\ntest.data$file <- \"Test\"\ntest.data$Survived <- \"NA\"\ndata <- rbind(train.data,test.data)\nrm(test.data,train.data)"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "09934867-cc22-471d-bbaf-458a5332ac54", "_execution_state": "idle", "trusted": false, "_uuid": "1a7a8cefcf8bb3277b0d8204df0af035987bc13f"}, "source": "#\n# Find columns with missing data\n#\nattach(data)\nmissing <- list(Pclass=nrow(data[is.na(Pclass), ]))\nmissing$Name <- nrow(data[is.na(Name), ])\nmissing$Sex <- nrow(data[is.na(Sex), ])\nmissing$Age <- nrow(data[is.na(Age), ])\nmissing$Fare <- nrow(data[is.na(Fare), ])\nmissing$Cabin <- nrow(data[is.na(Cabin), ])\nmissing$Embarked <- nrow(data[is.na(Embarked), ])\ndetach(data)\n\n# Print out the columns with missing data\n\nfor (name in names(missing)){\n  if (missing[[name]][1] > 0){\n    print(paste('',name,' miss ',missing[[name]][1],' values',sep=''))\n  }\n}\n\nrm(name)"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "a560d89f-ede0-4f34-8cd9-a2965c4ca93c", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "92b33439e77613f3d37390b807efb990d6dcbe09"}, "source": "# Seperate titles from name (Code from Huijun Zhao)\ndata$Title <- gsub('(.*, )|(\\\\..*)','',data$Name)\n\n# Combine Rare Titles. \n\nrareTitle <- c('Dona','Lady','the Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer')\ndata$Title[data$Title %in% rareTitle] <- 'Rare Title'\nrm(rareTitle)\n\n#We count titles like Mlle, Ms all as Miss.\ndata$Title[data$Title=='Mlle'] <- 'Miss'\ndata$Title[data$Title=='Ms'] <- 'Miss'\ndata$Title[data$Title=='Mme'] <- 'Mrs'\n\ntable(as.character(data$Sex), data$Title)\n\ndata <- data %>%mutate(\n  Title = factor(Title))\n"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "dccb2328-6ccd-4c74-a49b-daf6aa13fcaa", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "cb4b3c73cc566c982eba079b2abf9048472882c9"}, "source": "# Introduce a value for Family size (based on SibSp and Parch)\ndata$FamilySize <- data$SibSp + data$Parch +1\n\n# Format relevent parameters as factors \ndata <- data %>%mutate(\n  Survived = factor(Survived),\n  Pclass = factor(Pclass),\n  FamilySize = factor(FamilySize),\n  Embarked = factor(Embarked),\n  Sex = factor(Sex),\n  file = factor(file)  \n)"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "5d8607ec-b9ab-4ef8-af52-0334114e0557", "_execution_state": "idle", "collapsed": false, "_uuid": "8a0cad36a54043fa0a2139d23bd0941c0cdc3310"}, "source": "#2.  Tidy the files into a usable form \nCreate a df of missing.age.data and a df of age.data, split between test and train."}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "80ed6243-266a-442a-9868-bd2713220a9b", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "10d4b1324f821bb6e7e40c713939447ab562e3ee"}, "source": "# Function to find the rows with missing age value.  \n# Note that these records don't have other missing data.\n\ngetMissingRows <- function(total_data,column.with.gaps){\n  missingrows <- integer(0)\n  count <- 0\n  for (i in 1:nrow(total_data)){\n    if(is.na(total_data[i,column.with.gaps])){\n      count <- count+1\n      missingrows[count] <- i\n      \n    }\n  }\n  print(paste(column.with.gaps,\"has\",count,\"record(s) with a missing value\"))\n  return(missingrows)\n}\nMissingAge <- getMissingRows(data,\"Age\")\nage.gaps <- data[MissingAge,]\nsummary(age.gaps)"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "ac00db11-e26c-47a9-9368-7d95cebc0e86", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "5f59ba9c9273cbd0b11f782e62d08520bb13a13d"}, "source": "# Find all the variables that might predict age\n# Deliberately ignore survived as a feature\nfeatures <- c(\"Age\",\n              \"PassengerId\",\n              \"Pclass\",\n              \"Sex\",\n              \"SibSp\",\n              \"Parch\",\n              \"FamilySize\",\n              \"Fare\",\n              \"Embarked\",\n              \"Title\")\nage.data <- subset(data,select=features)\n# Store the missing age records in a seperate df\nmissing.age.data <- age.data[is.na(age.data$Age),]\n#\n# Establish a clean dataset for an age model\n#\n# Remove NA records\nage.data <- age.data[!is.na(age.data$Age),]\nage.data <- age.data[!is.na(age.data$Embarked),]\nage.data <- age.data[!is.na(age.data$Fare),]\n\n# split this model into 33% test data and 66%train\nset.seed(2)\ntrain=sample(c(TRUE,TRUE,FALSE),nrow(age.data),replace = TRUE)\ntest=(!train)\n# Have a look at the three sets to make sure that they are broadly similar\nsummary(missing.age.data)\nsummary(age.data[train,])\nsummary(age.data[test,])\nattach(age.data)"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "0629a447-3ba6-4026-9d37-f447af800612", "_execution_state": "idle", "collapsed": false, "_uuid": "13b83f10bd3f0266978cd554b5b402c4307243ff"}, "source": "# 3. Plot the data\n\nThe scatter plot below shows that most of the parameters are factors or have grouped values e.g. Family size.  \nThe graphs below are ordered so that the factors that look to separate age well are at the top. \n\nFare and Pclass are correlated,  Family Size, SibSp, and Parch are also  correlated"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "456e4adc-eefd-4ef3-8601-43b7492000d8", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "f0b4c52f2731ac820db1141906e4e08bdd16d6b5"}, "source": "# Scatterplot \npairs(Age~.,data=age.data)\n\n# Age versus Title\nage.data %>%\n  ggplot(aes(x=Age, color = Title)) +\n  ggtitle(\"Age vs. Title\\n\") +\n  geom_density(size = 1.5)\n\n# Age versus Pclass\nage.data %>%\n  ggplot(aes(x=Age, color = Pclass)) +\n  ggtitle(\"Age vs. Pclass\\n\") +\n  geom_density(size = 1.5)\n\n# Age versus Fare\nggplot(age.data) +\n  ggtitle(\"Age vs. Fare\\n\") +\n  geom_point(mapping = aes(x=Age, y=Fare)) \n\n# Age versus Parch\nggplot(age.data) +\n  ggtitle(\"Age vs. Parch\\n\") +\n  geom_point(mapping = aes(x=Age, y=Parch)) \n\n# Age versus SibSp\nggplot(age.data) +\n  ggtitle(\"Age vs. SibSp\\n\") +\n  geom_point(mapping = aes(x=Age, y=SibSp)) \n\n# Age versus Family Size\nage.data %>%\n  ggplot(aes(x=Age, color = FamilySize)) +\n  ggtitle(\"Age vs. Family Size\\n\") +\n  geom_density(size = 1.5)\n\n# Age versus Sex\nage.data %>%\n  ggplot(aes(x=Age, color = Sex)) +\n  ggtitle(\"Age vs. Sex\\n\") +\n  geom_density(size = 1.5)\n\n# Age versus Embarked\nage.data %>%\n  ggplot(aes(x=Age, color = Embarked)) +\n  ggtitle(\"Age vs. Embarked\\n\") +\n  geom_density(size = 1.5)\n\n\n"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "da092751-1844-4355-89a6-80d09be37a3c", "_execution_state": "idle", "collapsed": false, "_uuid": "d5997182607035b634bc7ff60a7a883c13be1e61"}, "source": "# 4. Test and compare various models.  \nFor each model create an estimate of MSE and a predicted age for each of the missing rows."}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "7c431bac-98c1-4b2d-af79-6d7002cf233b", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "a0456582aff08668fbf1d47a26c3360ddc03a755"}, "source": "# set dfs to hold the mse for each model alternative\nmodel.MSE <- data.frame(matrix(vector(), 0, 2)) \ncolnames(model.MSE) <- c(\"Model\",\"MSE\")\n# set up functions to update the MSE df and missing.age.data df with the output of each model\nadd.MSE <- function(model.name,MSE.value,model.MSE){\n i <- nrow(model.MSE)+1\n model.MSE[i,\"Model\"] <- model.name\n model.MSE[i,\"MSE\"] <- MSE.value\n return(model.MSE)\n}  \n#\nadd.predictions <- function(model.name,predictions,age.gaps){\n predictions <- as.data.frame(predictions)\n    colnames(predictions)[1] <- model.name\n age.gaps <- cbind(age.gaps,predictions)   \n return(age.gaps)\n}  "}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "d48f2730-2217-496b-ae1f-6b4df54d6139", "_execution_state": "idle", "collapsed": false, "_uuid": "26301c78a2451bcc577b1696c1369f550d279b63"}, "source": "### Linear Model"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "e578bbc5-8316-4720-bbda-23bae18f284f", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "7ba09a6f0aaff23983b58440b5b1cc50e94d2f56"}, "source": "model.name <- \"Linear Model\" \n# Model the training set \nmodel <- lm(Age~.,data = age.data[train,])\nsummary(model)\nplot(model)\n# Predict the ages of the test set \npredictions <- predict.lm(model,age.data[test,])\n# Calculate the MSE \nMSE <- mean((age.data$Age[test]-predictions)^2)\n# Predict the ages for the missing rows \npredictions <- predict.lm(model,missing.age.data)\n# Update our summaries\nmodel.MSE <- add.MSE(model.name,MSE,model.MSE)\nage.gaps <- add.predictions(model.name,predictions,age.gaps)"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "848588ae-ba54-4473-90da-31adcabcd31a", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "3220da31da5262099cdc74ff52bc5efa5b8358e7"}, "source": "### Tree Model"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "3bdada33-1a29-495e-8f57-d4348c4a02be", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "2d1254e952bd899f37da6b8002d613588b3880ad"}, "source": "model.name <- \"Tree\" \nlibrary(tree)\n# Model the training set \nmodel <- tree(Age~.,age.data[train,])\nsummary(model)\nplot(model)\ntext(model,pretty = 0)\n# Predict the ages of the test set \npredictions <- predict(model,age.data[test,])\n# Calculate the MSE \nMSE <- mean((age.data$Age[test]-predictions)^2)\n# Predict the ages for the missing rows \npredictions <- predict(model,missing.age.data)\n# Update our summaries\nmodel.MSE <- add.MSE(model.name,MSE,model.MSE)\nage.gaps <- add.predictions(model.name,predictions,age.gaps)"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "ebd6298a-04af-42de-9259-e7bf3d202bd8", "_execution_state": "idle", "collapsed": false, "_uuid": "248c8cd14a782d8bde8c42d7138eeaa645270475"}, "source": "### RPart Model"}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "359755af-37a8-4d38-9c6e-312888e9b5dc", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "a0f6bebd261e67518ae28468001ce3399995b518"}, "source": "model.name <- \"RPart\" \n# From: https://www.kaggle.com/huijunzhao/titanic-r\n#________________________________________________________________________\n#  \n# Model the training set \nlibrary(rpart)\nmodel <- rpart(Age ~., data=age.data[train,],method='anova')\nsummary(model)\nplot(model)\ntext(model,pretty = 0)\n# Predict the ages of the test set \npredictions <- predict(model,age.data[test,])\n# Calculate the MSE \nMSE <- mean((age.data$Age[test]-predictions)^2)\n# Predict the ages for the missing rows \npredictions <- predict(model,missing.age.data)\n# Update our summaries\nmodel.MSE <- add.MSE(model.name,MSE,model.MSE)\nage.gaps <- add.predictions(model.name,predictions,age.gaps)\n"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "b1ceeef9-2c1b-4401-8be5-4a1b3471876b", "_execution_state": "idle", "collapsed": false, "_uuid": "168b1fc1b0a673050efd0da6500f0f9a0dfec23f"}, "source": "### Random Forest Model\nI chose to use 3 of the predictors at each branch.  I tried a few options and this seemed the best."}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "9662edbc-ae7b-4086-a963-358423b84caf", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "233c985adc9cc2243b0fb6ed68f81da08b527971"}, "source": "model.name <- \"Random Forest\" \n# Model the training set \nlibrary(randomForest)\nmodel <- randomForest(Age ~., data=age.data[train,],ntree=5000,mtry=3)\nsummary(model)\nvarImpPlot(model)\n# Predict the ages of the test set \npredictions <- predict(model,age.data[test,])\n# Calculate the MSE \nMSE <- mean((age.data$Age[test]-predictions)^2)\n# Predict the ages for the missing rows \npredictions <- predict(model,missing.age.data)\n# Update our summaries\nmodel.MSE <- add.MSE(model.name,MSE,model.MSE)\nage.gaps <- add.predictions(model.name,predictions,age.gaps)"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "5f189000-0b46-48cf-9c61-2f01c40e8c98", "_execution_state": "idle", "collapsed": false, "_uuid": "a86d46ea7d6bc3be84eec29c2dbff4359a98d23c"}, "source": "### Boosted Model\nI chose to use a Gaussian distribution, 1,000 trees and an interaction depth of 2 "}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "8121366f-72d9-4a47-a922-054149e44610", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "bde7fc89ed03f91a8f88d9247a28f5d3900b4cd1"}, "source": "model.name <- \"Boosted Model\" \n# Model the training set \nlibrary(gbm)\nmodel <- gbm(Age ~., data=age.data[train,],distribution=\"gaussian\",n.trees=1000,interaction.depth=2)\nsummary(model)\n# Predict the ages of the test set \npredictions <- predict(model,age.data[test,],n.trees=1000)\n# Calculate the MSE \nMSE <- mean((age.data$Age[test]-predictions)^2)\n# Predict the ages for the missing rows \npredictions <- predict(model,missing.age.data,n.trees=1000)\n# Update our summaries\nmodel.MSE <- add.MSE(model.name,MSE,model.MSE)\nage.gaps <- add.predictions(model.name,predictions,age.gaps)"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "9f6deb36-41fa-4e4d-af94-6586af3a242c", "_execution_state": "idle", "collapsed": false, "_uuid": "72a6d763009bd5ce40426912211a11b075e079e6"}, "source": "### Mice Model\nMegan Risdale used a mice model here: https://www.kaggle.com/mrisdal/exploring-survival-on-the-titanic/notebook\nI didn't know the package so didn't include it. \n"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "c3e356e0-4120-429c-b8b6-59a712b506b7", "_execution_state": "idle", "collapsed": false, "_uuid": "61968257fbbbbb9e4d2b21b31cd4dcb5d197141c"}, "source": "# 5. Summary and conclusions\n\nMost models focus on three variables to predict age.  In order of importance:\n\n - Title, which makes sense as it is age related\n\n - Fare or PClass, higher paying passengers (traveling in a higher class) tended to be older\n\n - Family Size or SibSp or Parch.  These all indicate family structure, allowing single travelers and pairs to be identified. \n"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "dfed6ecb-5879-4ba4-aafc-f42ab7886f91", "_execution_state": "idle", "collapsed": false, "_uuid": "256fdc280735f0290aed65e6475905fa027f4672"}, "source": ""}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "30e77064-f461-47b3-a9fd-d3f8af58e8ab", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "8ec732a5b9ac5ce961f21fbc1f25c885e29fcf38"}, "source": ""}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "ca0d98a4-d2ef-40ef-a78e-adf9f8acb9d5", "_execution_state": "idle", "collapsed": false, "_uuid": "d565a26df0bafe118f285f5bc801c4d562046085"}, "source": "### What are the actual predictions\nBelow is a table of the records that are missing an age entry.  \nAll the forecasts are appended to the right.\nYou can see that most methods produced similar predictions.  \n\nThe key differences are the average age assigned to \n\n - Master (linear model says ~2.3, boosted model says ~17, the others say ~8\n\n - Miss (values range from ~21 to ~25.  Tree and NPart are the lowest "}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "769d08d9-6320-4b92-bc55-758da259347f", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "a3cddd5ed8d6e0038a4421a36c55cfa43bec73bd"}, "source": "age.gaps"}, {"cell_type": "markdown", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "e2e043af-3873-4f03-989b-fed3e4b3b85b", "_execution_state": "idle", "collapsed": false, "_uuid": "557ac69a65c2a98fc9b0851d8549f493ac418f37"}, "source": "### who is the winner?\nIn practice, there is not much difference between the different approaches (see MSE table below).  \nI ran the model with different seeds and plan to use a tree for my own survival predictions.  "}, {"cell_type": "code", "outputs": [], "execution_count": null, "metadata": {"_cell_guid": "70c1c8c0-8531-4675-844e-452e0bb3920e", "_execution_state": "idle", "trusted": false, "collapsed": false, "_uuid": "7ad2a1d39f0fd7f35445244fbf2efa810c4b24b8"}, "source": "model.MSE"}], "metadata": {"kernelspec": {"display_name": "R", "name": "ir", "language": "R"}, "language_info": {"codemirror_mode": "r", "pygments_lexer": "r", "file_extension": ".r", "name": "R", "version": "3.4.1", "mimetype": "text/x-r-source"}}, "nbformat": 4}