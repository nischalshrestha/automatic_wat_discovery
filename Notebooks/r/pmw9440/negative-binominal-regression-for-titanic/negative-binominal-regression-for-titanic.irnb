{"cells":[{"metadata":{"_uuid":"cc64ba5cb6cabb5df506dd036943752dc922d66d"},"cell_type":"markdown","source":"### INTRODUCTION\n\nHi. I'm myung woo park learning machine learning and other statistics model. So I always think that kaggle is the best place to share opinions and study. In this kernel, I apply the Negative binomial regression to this data, Titanic. Negative Binomial Regression for short,\nis, one of Generalized Linear Regressions and is for modeling count variables.  Firstly,  to my mind, this will be the good model for this set, so I will try this. please enjoy this kernel and don't forget to leave the messages. "},{"metadata":{"_uuid":"b264de1b1243fa9bc74697c1250be57b42633d52","_execution_state":"idle","trusted":true},"cell_type":"code","source":"###Importing the necesscary libraries.\nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(MASS)\n\n## Reading in files\nlist.files(path = \"../input\")\ntrainset <- read.csv(\"../input/train.csv\")\ntestset <- read.csv(\"../input/test.csv\")\n\n## colnames \nprint(\"The colnames of trainset\")\ncolnames(trainset)\nhead(trainset)\nprint(\"There are 12 columns in trainset.\\n\")\nprint(\"____________________________________\")\n\nprint(\"The colnames of testset\")\ncolnames(testset)\nhead(testset)\nprint(\"It has the same same columns to trainset except for Survived\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e44323d8bf7d5e53cb1d8b2a0558d8770ce82c49"},"cell_type":"markdown","source":"As above,  there are 12 columns in total, before we move on to the Data Cleaning, we first classify these columns to 4 types data.\n\n***The classes of variables ***\n\n| Type   |     Name     |\n|----------|:-------------:|\n| Nominal  | PassengerID/ Survived / Name / Sex / Ticket/ Embarked / Carbin|\n| Ordinal |  Pclass |\n| Discrete  |  SibSp/ Parch/ Age  | \n| Continous |  Fare |"},{"metadata":{"_uuid":"e68d28c76f1c98d18b8733ae1bf4b667d0872d66"},"cell_type":"markdown","source":"### Data Cleaning\nAs you know, it is a necessary step to clean the data set which make it manageble.  Specifically, we check if there exist null values and outliers  for each column.\n"},{"metadata":{"trusted":true,"_uuid":"7a5ddcd860dd256ee12c4b0f09af35f0f91c5a22"},"cell_type":"code","source":"##Clearning train data\n#1. Survived(Nominal)\nHmisc::describe(trainset$Survived)\nprint(\"______________________________________________\")\n\n#2. Pclass(Ordinal)\nHmisc::describe(trainset$Pclass)\nprint(\"______________________________________________\")\n\n#3. Name(Nominal)\nHmisc::describe(trainset$Name)\nprint(\"______________________________________________\")\n\n#4. Sex(Nominal)\nHmisc::describe(trainset$Sex)\nprint(\"______________________________________________\")\n\n#5. Age(Discrete)\nHmisc::describe(trainset$Age)\nggplot(data = trainset , na.rm = TRUE) +\n  geom_boxplot(color = \"blue\",aes(x= 1, y=Age), outlier.colour = \"red\", outlier.shape = 1)\nprint(\"Missing Value : 177\")\nprint(\"______________________________________________\")\n\n#6. SibSp(Discrete)\nHmisc::describe(trainset$SibSp)\nggplot(data = trainset , na.rm = TRUE) +\n  geom_boxplot(color = \"blue\",aes(x= 1, y=SibSp), outlier.colour = \"red\", outlier.shape = 1)\nprint(\"______________________________________________\")\n\n#7. Parch(Discrete)\nHmisc::describe(trainset$Parch)\nggplot(data = trainset , na.rm = TRUE) +\n  geom_boxplot(color = \"blue\",aes(x= 1, y= Parch), outlier.colour = \"red\", outlier.shape = 1)\nprint(\"______________________________________________\")\n\n#8. Ticket(Nominal) (Useless)\nHmisc::describe(trainset$Ticket)\nprint(\"______________________________________________\")\n\n#9. Fare(Continous)\nHmisc::describe(trainset$Fare)\nggplot(data = trainset , na.rm = TRUE) +\n  geom_boxplot(color = \"blue\",aes(x= 1, y= Fare), outlier.colour = \"red\", outlier.shape = 1)\nprint(\"______________________________________________\")\n\n#10. Cabin(Nominal)\nHmisc::describe(trainset$Cabin)\nprint(\"______________________________________________\")\n\n#11. Embarked(Nominal)\nHmisc::describe(trainset$Embarked)\nprint(\"______________________________________________\")\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cd2b26c41b8aff065edabfe2c5cfd6853bec60ba"},"cell_type":"markdown","source":"The columns have the complete rows not having null values except for Age. Now we'll replace these values with median for Age."},{"metadata":{"trusted":true,"_uuid":"345d370170ac4c50816b74962ca455cbc5ab7b03"},"cell_type":"code","source":"### Complete the data\n#Age\ntrainset[is.na(trainset$Age), 6] = median(trainset$Age, na.rm = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cb2fd9bca1721417786d6711839cc6483bd21c88"},"cell_type":"markdown","source":"### EDA(Exploratory Data Analysis)\nClearly, we all know it's the important to tell the difference between Survived and Not Survived in each column. So we'll have to focus more on the difference between two groups. Let's plot the graph of each column by Survived Group."},{"metadata":{"trusted":true,"_uuid":"a366f57949d9631ee4f0933736cd6dbaec379809"},"cell_type":"code","source":"##convert the Survived column as facotr variable\ntrainset$Survived <- as.factor(trainset$Survived)\n\n###EDA(Explanatory Data analysis)\n##distribution of variables(charastics of people who board the Titanic)\n\n##convert the Survived column as facotr variable\ntrainset$Survived <- as.factor(trainset$Survived)\n\n#1. Pclass\nggplot(data = trainset, aes(x =Pclass, fill = Survived))+\n  geom_histogram(stat = \"count\" )\n\n#2. Sex\nggplot(data = trainset, aes(x = Sex, fill = Survived))+\n  geom_histogram(stat = \"count\")\n\n#3. Age\nggplot(data = trainset, aes(x =Age, fill = Survived))+\n  geom_density(binwidth =5, na.rm = TRUE, alpha = 0.3)\n\n#4. SibSp\nggplot(data = trainset, aes(x =SibSp, fill = Survived))+\n  geom_density(binwidth =5, na.rm = TRUE, alpha = 0.3)\n\n#5. Parch\nggplot(data = trainset, aes(x = Parch, fill = Survived))+\n  geom_density(binwidth =5, na.rm = TRUE, alpha = 0.3)\n\n#6. Fare\nggplot(data = trainset, aes(x = Fare, fill = Survived))+\n  geom_density(binwidth =5, na.rm = TRUE, alpha = 0.3)\n\n#7. Embarked\nggplot(data = trainset, aes(x = Embarked, fill = Survived))+\n  geom_histogram(stat = \"count\")\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fcba794716b26adc460d10f0641661267e0fbc2e"},"cell_type":"markdown","source":"From the graph of each column, we can see Pclass, Sex, Age, Fare, Embarked make the difference between Survived and Not Survived. So We use these columns to bulid Negative Binominal Regression. But we remove the Fare(because it has a lot to do with Pclass) and turn discrete variable into nominal variable(Age). "},{"metadata":{"trusted":true,"_uuid":"cf9f25bc05773f55fa3c9f6b75ec0816b1f0552b"},"cell_type":"markdown","source":"### Buling the Negative Binominal Regression"},{"metadata":{"trusted":true,"_uuid":"aeda11af3938a57abef520eabb59eebf8637f506"},"cell_type":"code","source":"##Select Inputs and turn the vairiables into count data\n#Kids (over 10 years old and under 10 years old)\ntrainset[trainset$Age <= 10, \"Kids\"] <- 1\ntrainset[trainset$Age > 10, \"Kids\"] <- 0\n\n##converting data to count data\n#trainset -> traincount\ntrainset$one <- 1\ntrainset$Survived <- as.numeric(as.character(trainset$Survived))\ntrainset$Survived <- as.numeric(trainset$Survived)\nGroupColumns <- c(\"Pclass\", \"Sex\", \"Embarked\", \"Kids\")\nDataColumns <- c(\"Survived\" ,\"one\")\ntraincounts <- ddply(trainset, GroupColumns, function(x) colSums(x[DataColumns]))\ncolnames(traincounts)[6] <- \"Total\"\ntraincounts$SurvivalRate <- traincounts$Survived / traincounts$Total\n                                        \n###Building the Negative Binorminal Regression\nNb_model <- glm.nb(formula =  SurvivalRate ~ Pclass + Sex + Embarked  +  Kids, data = traincounts)\nNb_model\nconfint(Nb_model)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f336614cad1ee99cabbf9b30e01f53a1d84c9d73"},"cell_type":"markdown","source":"As the above result, we can get the linear equation like that \n\nlog(Survival) =  0.21307  -0.21307*Pclass -0.68478 * Sex  + 0.01943* EmbarkedC -0.39960 * EmbarkedQ -0.34196*EmbarkedS + 0.40320* Kids\n\nBecause the link function of Negative Binominal Regression is Logit.\n\n Taking the exponentials of both sides, we can express like this,  Survival = exp(0.21307 - 0.21307*Pclass - 0.68478*Sex + 0.01943*EmbarkedC -0.39960*EmbarkedQ-0.34196*EmbarkedS + 0.40320* Kids)\n \nAnd at the last line, we can see the 95%  confidence formula as well."},{"metadata":{"_uuid":"8910b740499acfe71d19ecc1dccb92170ab593a0"},"cell_type":"markdown","source":"### Summary\n\nThis kenel was all about building Negative Binominal Regression. There are many columns to specifuy groups but we used only 4 columns of them to build the model. Initially, there is a given testset, however I didn't use it. because it don't have survival column. if it had it, we would predict the survival rate of testset and compare actual and predicted values. Negative Binominal Regression is one of dummy variable regressions. It was necessary to convert raw data into the Frequency Distribution table before we built it.\n"}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}