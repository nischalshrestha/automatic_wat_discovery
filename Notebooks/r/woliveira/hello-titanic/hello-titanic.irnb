{"nbformat_minor": 0, "cells": [{"metadata": {"_uuid": "68784dc722a66014e7196393dfdf54090573c6f4", "collapsed": false, "_cell_guid": "412c2b8f-5729-4d8b-a545-fef09a95536c", "_execution_state": "idle"}, "source": "", "outputs": [], "cell_type": "markdown", "execution_count": null}, {"metadata": {"_uuid": "2f5308c4841c1db865c13c106b9c17472902303a", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "038e238c-384d-4cd4-9bf5-5f3dd6da9b05"}, "source": "# Consumo dos dados", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "27d7ef3346c3d63c9e4282beb343d012195f4779", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "40f4cd12-0b9f-4d00-92ca-8b7a9648eb86"}, "source": "library(ggplot2)\nlibrary(dplyr)\nlibrary(randomForest)\n\ntrain <- read.csv(\"../input/train.csv\", stringsAsFactors = F)\ntest <- read.csv(\"../input/test.csv\", stringsAsFactors = F)\n\ntrain$isTrain <- T\ntest$isTrain <- F\n\nfull <- bind_rows(train, test)\nglimpse(full)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "8f2aa6f43124c1f2f99e90f9e63971bedeb05718", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "066b9a9a-dde8-4d1a-a6a0-d0809a989108"}, "source": "# Analise das variaveis", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "4d639acc9d43506c91e32e78b04a719e5e4271de", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "c2704add-361e-4b76-8393-6de144998194"}, "source": "summary(full)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "87b45dd6e688f3ea52c24991c0927de2ae6a317b", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "2d2fb207-e053-4632-a7c9-8f176660b199"}, "source": "full$isFemale <- F\nfull$isFemale[full$Sex == \"female\"] <- T\n\nggplot(full[full$isTrain,], aes(x = isFemale, fill = factor(Survived))) +\n    geom_bar(stat = 'count', position='dodge')", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "39c02b9430e495a134c2bffb1840b37adb0da714", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "ba8c42b4-1d1e-434f-9c38-a5b938349eb4"}, "source": "full$underTen <- F\nfull$underTen[full$Age > 0 &  full$Age < 10] <- T\n\nggplot(full[full$isTrain,], aes(x = underTen, fill = factor(Survived))) +\n    geom_bar(stat = 'count', position='dodge')", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "eb9fa8184794ff1c83d0a246cd437345aa611789", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "376a487a-5201-473e-9a02-e6b7cc58d68f"}, "source": "# ricos\n", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "5dbc7b411b7114adfe8db271d6e00eab3391b55f", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "6ab497b5-ac6f-450d-8c15-e68bc93ac45c"}, "source": "full$Fare <- round(full$Fare)\n\nfull[full$isTrain,] %>%\n    group_by(Survived) %>%\n    summarise(TotalFare = sum(Fare), count = n(), Mean = mean(Fare))", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "b561b363df83d9d160a758d851c74c4584754d73", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "8f456c2b-3787-4ed2-a245-f99c6ff0bb85"}, "source": "full$FamilySize <-  full$SibSp + full$Parch + 1\n\nggplot(full[full$isTrain,], aes(FamilySize, fill = factor(Survived))) + \n    geom_bar(stat='count', position=\"dodge\")", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "b602280a1b071f2c0a3078c71f2485f19f3bbf83", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "1fc31a9e-51f7-4d4e-9141-ddde9ae98b20"}, "source": "full$FamilySizeFactor[full$FamilySize == 1] <- 'alone'\nfull$FamilySizeFactor[full$FamilySize < 5 & full$FamilySize > 1] <- 'small'\nfull$FamilySizeFactor[full$FamilySize > 4] <- 'large'\n\nfull$FamilySizeFactor <- factor(full$FamilySizeFactor)\n", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "f9dd22bcd6f0bb61680107477f28758ee1ad6219", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "4705367c-b403-4674-9e35-22408cff7fdc"}, "source": "ggplot(full[full$isTrain,], aes(Pclass, fill = factor(Survived))) + \n    geom_bar(stat='count', position=\"dodge\")\n\nfull$Pclass <- factor(full$Pclass)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "7d70fe0a1f1ba48d7003e681cdb4899e370762cf", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "0214ba20-9e3d-4e1e-a530-c6538aedb032"}, "source": "# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n# Show title counts by sex again\ntable(full$Sex, full$Title)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "3a78fa1a3aa0e4b387b5c0c8f5e7ffb7c3051fcc", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "a652dba9-0343-4b32-b9e1-3d1e182a4e18"}, "source": "full <-\n    full %>%\n    select(PassengerId, Survived, Title, Pclass, FamilySizeFactor, Fare, underTen, isFemale, isTrain)\n\nsummary(full)\n\nfull$Fare[is.na(full$Fare)] <- 14\nfull$Title <- factor(full$Title)\n\nsummary(full)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "8681d14ab9d7d305705a736b605cabb0d0b78510", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "fac9fbd1-a539-4381-8018-3fabd739f9ac"}, "source": "set.seed(42)\n\ntotalrows <- nrow(full[full$isTrain,])\ntrainrows <- sample(c(T,F), totalrows, replace = T, prob = c(0.8, 0.2))\n\ntrainningSet <- full[full$isTrain,][trainrows,]\ntestingSet <- full[full$isTrain,][!trainrows,]\n\nmodel <- randomForest(factor(Survived) ~ Title + Pclass + FamilySizeFactor + Fare + underTen + isFemale,\n                     data = trainningSet, ntree = 50)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "fa61e1f73cdfbffffcfed6463ebf39ab9d5ec73b", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "4619291a-1b77-4c8f-9827-8d0015cd9bba"}, "source": "predicted <- predict(model, testingSet)\nglimpse(predicted)\n\nconfusion_matrix <- table(testingSet$Survived, predicted)\nconfusion_matrix\n\nTP <- confusion_matrix[2, 2]\nTN <- confusion_matrix[1, 1]\n\nacc <- (TP + TN) / (nrow(testingSet))\nacc", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "7d33f3574c338eb255177e299665f49e62920b33", "collapsed": false, "trusted": false, "_execution_state": "idle", "_cell_guid": "efb6ca19-2d03-4fc2-8c27-f4e92b4663c3"}, "source": "final <- predict(model, full[!full$isTrain,])\n\nsolution <- data.frame(PassengerId = full[!full$isTrain,]$PassengerId, Survived = final)\n\nwrite.csv(solution, file= 'out.csv', row.names = F)", "outputs": [], "cell_type": "code", "execution_count": 1}, {"metadata": {"_uuid": "2550546923358919010fe6747ee12ecca32e4f8f", "_cell_guid": "b291b532-216c-4411-b4eb-ac4ac002b965", "trusted": false, "_execution_state": "idle"}, "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nlist.files(\"../input\")\n\n# Any results you write to the current directory are saved as output.", "outputs": [], "cell_type": "code", "execution_count": 1}], "metadata": {"language_info": {"mimetype": "text/x-r-source", "codemirror_mode": "r", "file_extension": ".r", "name": "R", "pygments_lexer": "r", "version": "3.4.1"}, "kernelspec": {"display_name": "R", "language": "R", "name": "ir"}}, "nbformat": 4}