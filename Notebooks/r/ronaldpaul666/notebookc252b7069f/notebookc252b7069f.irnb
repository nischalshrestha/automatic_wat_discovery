{"nbformat": 4, "nbformat_minor": 1, "cells": [{"cell_type": "code", "execution_count": null, "source": ["# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n", "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n", "# For example, here's several helpful packages to load in \n", "\n", "library(ggplot2) # Data visualization\n", "library(readr) # CSV file I/O, e.g. the read_csv function\n", "\n", "# Input data files are available in the \"../input/\" directory.\n", "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n", "\n", "system(\"ls ../input\")\n", "\n", "# Any results you write to the current directory are saved as output.\n", "library(rpart) \n", "library(party) \n", "library(randomForest)\n", "library(rpart.plot)  \n", "#SVM:\n", "\n", "\n", "#Graphics:\n", "library(ggplot2)\n", "#data manging\n", "library(plyr);      # load plyr prior to dplyr to avoid warnings\n", "library(caret);    \n", "library(dplyr); \n", "train_full = read.csv('../input/train.csv')\n", "test  = read.csv('../input/test.csv')\n", "str(train_full)\n", "summary(train_full)\n", "head(train_full)\n", "train_full$Pclass=factor(train_full$Pclass,labels = c(\"1st\",\"2nd\",\"3rd\"))\n", "\n", "#2)\n", "#train_full$Cabin\n", "train_full$Cabin_deck=substring(train_full$Cabin, 1, 1)\n", "#this solution works but assumes that if a cell has more than one Cabin_num, the first is the correct one\n", "train_full$Cabin_deck[train_full$Cabin_deck=='']=\"MiSS\"\n", "train_full$Cabin_deck=factor(train_full$Cabin_deck)\n", "\n", "#i have tried:\n", "#train_full$Cabin_num=substring(train_full$Cabin,2,4) but the data is dirty. so i need to tern to REGEX\n", "train_full$Cabin_num=substring(train_full$Cabin, regexpr(\"(\\\\d)+\", train_full$Cabin),regexpr(\"(\\\\d)+\", train_full$Cabin)+2)\n", "#this solution works but assumes that if a cell has more than one Cabin_num, the first is the correct one\n", "train_full$Cabin_num[train_full$Cabin_num=='']=\"-1\" #this changes all the '' cells to -1 char\n", "train_full$Cabin_num=as.numeric(train_full$Cabin_num)  #the coaertion would eliminate any deck letters without numbers turning them to NA\n", "train_full$Cabin_num[!is.finite(train_full$Cabin_num)]=-1 #finaly all NA are turned to -1\n", "\n", "\n", "#3)\n", "train_full$Name=as.character(train_full$Name)\n", "pattern = \"[A-Z][a-z]*\\\\.\" #see credit for the REGEX at the next frame\n", "m = regexpr(pattern, train_full$Name)\n", "train_full$title= regmatches(train_full$Name, m)\n", "train_full$title= factor(train_full$title)\n", "\n", "#4)\n", "train_full$family_size=(train_full$SibSp+train_full$Parch)\n", "\n", "\n", "str(train_full)\n", "head(train_full)\n", "DEV_ind=sample(nrow(train_full), floor(nrow(train_full)/2)) # gets indices of half the training data\n", "DEV=train_full[DEV_ind,]\n", "train=train_full[-DEV_ind,]\n", "form=formula(Survived ~ Pclass + Sex + Age  + Fare+ Embarked+Cabin_deck+Cabin_num+family_size+title)\n", "model = rpart(form, method=\"class\", data=train)\n", "print(model)\n", "plot(model)\n", "text(model)\n", "post(model)\n", "model = ctree(form, data=train)\n", "plot(model, main=\"Survival of people on the Titanic\")\n", "print(model)\n", "tree_pred=predict(model, DEV, type = \"response\") #this line would generate a single variable of the probability P\n", "chose_DEV=(DEV$Survived==round(tree_pred))           #checks fore each cell, if chosen right \n", "true_accuracy=sum(chose_DEV==TRUE)/length(chose_DEV)          #calculates the accuracy\n", "sprintf(\"the true accuracy of the randomly sampled tree on DEV set is: %s\", true_accuracy)\n", "\n", "tree_pred=predict(model, train, type = \"response\") \n", "chose_SELF=(train$Survived==round(tree_pred))  \n", "optimized_accuracy=sum(chose_SELF==TRUE)/length(chose_SELF)\n", "sprintf(\"the optimized accuracy of the randomly sampled tree on trainig set is: %s\", optimized_accuracy)\n", "forest_model=randomForest(form, data=train ,importance=TRUE,na.action = na.exclude)\n", "forest_pred=predict(forest_model, DEV, type = \"response\")\n", "chose=(DEV$Survived==round(forest_pred))\n", "#chose\n", "accuracy=sum(chose==TRUE)/length(chose)\n", "accuracy\n", "orest_model=randomForest(form, data=train ,importance=TRUE) #no NA to remove haha\n", "\n", "forest_pred=predict(forest_model, DEV, type = \"response\") #this line would generate a single variable of the probability P\n", "chose_DEV=(DEV$Survived==round(forest_pred))           #checks fore each cell, if chosen right \n", "true_accuracy=sum(chose_DEV==TRUE)/length(chose_DEV)          #calculates the accuracy\n", "sprintf(\"the true accuracy of the random forest on DEV set is: %s\", true_accuracy)\n", "\n", "forest_pred=predict(forest_model, train, type = \"response\") \n", "chose_SELF=(train$Survived==round(forest_pred))  \n", "optimized_accuracy=sum(chose_SELF==TRUE)/length(chose_SELF)\n", "sprintf(\"the optimized accuracy of the random forest on training set is: %s\", optimized_accuracy)\n", "imp=importance(forest_model,type=1)\n", "imp\n", "form=formula(Survived ~ Pclass + Sex + Embarked+family_size+title)\n", "# my model was over fitting, so I read in some kernel it might be a good idea to reduce variables \n", "\n", "best_true=true_accuracy\n", "best_model=forest_model\n", "iter_n=10\n", "\n", "for (i in 1:iter_n){\n", "    #resplit the training data\n", "    DEV_ind=sample(nrow(train_full), floor(nrow(train_full)/2)) # gets indices of half the training data\n", "    DEV=train_full[DEV_ind,]\n", "    train=train_full[-DEV_ind,]\n", "    \n", "    forest_model=randomForest(form, data=train ,importance=FALSE) #no NA to remove haha\n", "\n", "    forest_pred=predict(forest_model, DEV, type = \"response\") #this line would generate a single variable of the probability P\n", "    chose_DEV=(DEV$Survived==round(forest_pred))           #checks fore each cell, if chosen right \n", "    true_accuracy=sum(chose_DEV==TRUE)/length(chose_DEV)          #calculates the accuracy\n", "    \n", "    forest_pred=predict(forest_model, train, type = \"response\") \n", "    chose_SELF=(train$Survived==round(forest_pred))  \n", "    train_accuracy=sum(chose_SELF==TRUE)/length(chose_SELF)\n", "       \n", "    if (train_accuracy>=0.9){\n", "        if (true_accuracy>best_true){\n", "           best_model=forest_model\n", "           best_true=true_accuracy\n", "           best_train=train_accuracy \n", "\n", "        }\n", "    }\n", "    else{\n", "        next\n", "    }\n", "    \n", "}\n", "sprintf(\"found a better model! with training accuracy: %s\", best_train)\n", "sprintf(\"and true accuracy: %s\", best_true)\n", "test$Pclass=factor(test$Pclass,labels = c(\"1st\",\"2nd\",\"3rd\"))\n", "\n", "#2)\n", "test$Cabin_deck=substring(test$Cabin, 1, 1)\n", "test$Cabin_deck[test$Cabin_deck=='']=\"MiSS\"\n", "test$Cabin_deck=factor(test$Cabin_deck)\n", "\n", "test$Cabin_num=substring(test$Cabin, regexpr(\"(\\\\d)+\", test$Cabin),regexpr(\"(\\\\d)+\", test$Cabin)+2)\n", "test$Cabin_num[test$Cabin_num=='']=\"-1\" #this changes all the '' cells to -1 char\n", "test$Cabin_num=as.numeric(test$Cabin_num)  #the coaertion would eliminate any deck letters without numbers turning them to NA\n", "test$Cabin_num[!is.finite(test$Cabin_num)]=-1 #finaly all NA are turned to -1\n", "\n", "\n", "#3)\n", "test$Name=as.character(test$Name)\n", "pattern = \"[A-Z][a-z]*\\\\.\" #see credit for the REGEX at the next frame\n", "m = regexpr(pattern, test$Name)\n", "test$title= regmatches(test$Name, m)\n", "test$title= factor(test$title)\n", "\n", "#4)\n", "test$family_size=(test$SibSp+test$Parch)\n", "\n", "#5)\n", "test$Age[is.na(test$Age)]=121\n", "\n", "\n", "\n", "head(test,10)\n", "levels(test$Embarked) = levels(train$Embarked)\n", "levels(test$Cabin_deck) = levels(train$Cabin_deck)\n", "levels(test$title) = levels(train$title)\n", "forest_pred=predict(best_model, test, type = \"response\")\n", "\n", "#3. compute a new Survived variable,based on the prediction, and bind it. \n", "Survived=round(forest_pred)\n", "test=cbind(test,Survived)\n", "\n", "submission=cbind(test$PassengerId,test$Survived)\n", "colnames(submission)=c(\"PassengerId\",\"Survived\")\n", "submission=as.data.frame(submission)\n", "submission$Survived[is.na(submission$Survived)]=0\n", "#4. submit.\n", "write.csv(submission, file =\"sub.csv\", row.names = FALSE)\n", "\n", "submission"], "outputs": [], "metadata": {"_cell_guid": "7531669d-ac4d-4b60-8550-5c3ab32e69d1", "_uuid": "a69220f1c3f4b093460062c5a2e8563edf70dd9f"}}], "metadata": {"kernelspec": {"display_name": "R", "name": "ir", "language": "R"}, "language_info": {"mimetype": "text/x-r-source", "name": "R", "file_extension": ".r", "version": "3.4.2", "pygments_lexer": "r", "codemirror_mode": "r"}}}