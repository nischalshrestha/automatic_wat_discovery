{"cells":[
 {
  "cell_type": "markdown",
  "metadata": {},
  "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.\n\nlibrary(plyr)\n\ntitanic_data=read.csv(\"../input/train.csv\")\ntitanic_test=read.csv(\"../input/test.csv\")\n\ntitanic_model=subset(titanic_data,!is.na(Age))[c(\"Sex\",\"Age\",\"Pclass\",\"Survived\")]\ntitanic_model$Child=mapply(function(x) {if(x<18){return(\"child\")}else{return(\"adult\")}},\n                           titanic_model$Age)\n\ntitanic_stats=list(survival=mean(titanic_model$Survived))\n\ntitanic_stats$Sex=ddply(titanic_model,.(Sex),summarize,\n                        survival=mean(Survived))\ntitanic_stats$Child=ddply(titanic_model,.(Child),summarize,\n                          survival=mean(Survived))\ntitanic_stats$Pclass=ddply(titanic_model,.(Pclass),summarize,\n                           survival=mean(Survived))\ntitanic_stats$Sex_Child=ddply(titanic_model,.(Sex,Child),summarize,\n                              survival=mean(Survived))\ntitanic_stats$Sex_Pclass=ddply(titanic_model,.(Sex,Pclass),summarize,\n                               survival=mean(Survived))\ntitanic_stats$Child_Pclass=ddply(titanic_model,.(Child,Pclass),summarize,\n                                 survival=mean(Survived))\n\n#There were several combinations of Sex, Age, and Pclass for which\n#data was not present or else sample size was extremely low.\n#We thus choose to compute P(Survive|Sex,Age,Pclass) in terms of\n#P(S), P(S|Sex), P(S|Age), P(S|Pclass), P(S|Sex,Age), P(S|Sex,Pclass), and\n#P(S|Age,Pclass).\n#In cases where Age data is not present, we will simply look up the\n#corresponding entry in P(S|Sex,Pclass)\nsurvival_function = function(sex,age,pclass) {\n  if (is.finite(age)){\n    if (age<18) {\n      child=\"child\"\n    } else {\n      child=\"adult\"\n    }\n    return(titanic_stats$survival - \n      subset(titanic_stats$Sex,Sex==sex)$survival -\n      subset(titanic_stats$Child,Child==child)$survival -\n      subset(titanic_stats$Pclass,Pclass==pclass)$survival +\n      subset(titanic_stats$Sex_Child,Sex==sex&Child==child)$survival +\n      subset(titanic_stats$Sex_Pclass,Sex==sex&Pclass==pclass)$survival +\n      subset(titanic_stats$Child_Pclass,Child==child&Pclass==pclass)$survival)\n  } else {\n    return(subset(titanic_stats$Sex_Pclass,Sex==sex&Pclass==pclass)$survival)\n  }\n}\n\n\nmake_prediction = function(data) { mapply(function(x,y,z) {\n  p_survive=survival_function(x,y,z)\n  if (runif(1) < p_survive) {\n    return(1)\n  } else {\n    return(0)\n  }\n},data$Sex,data$Age,data$Pclass)}\n\naccuracy_tests=c()\nfor (ii in c(1:31)) {\n  accuracy_tests[ii]=length(\n    which(titanic_model$Survived==make_prediction(titanic_model))) /\n    length(titanic_model$Survived)\n}\nmean(accuracy_tests)\nsd(accuracy_tests)\nmax(accuracy_tests)\nmin(accuracy_tests)\nmedian(accuracy_tests)\n\ntitanic_test$Survived=make_prediction(titanic_test)\nwrite.csv(x=titanic_test,\"prediction.csv\")"
 }
],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"}}, "nbformat": 4, "nbformat_minor": 0}