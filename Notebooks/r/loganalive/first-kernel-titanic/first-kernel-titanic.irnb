{"cells":[{"metadata":{"_uuid":"ddb225e06b3083f03dbda0fe6b62fe508f195cd4","trusted":true,"_cell_guid":"f8969495-2e38-4c2f-987d-d7ca69885c54"},"cell_type":"code","source":"install.packages(\"kernlab\")\ninstall.packages(\"ROCR\")\ninstall.packages(\"pROC\")\ninstall.packages(\"e1071\")\ninstall.packages(\"elmNN\")\n\ngetwd()\n\n# import files-\ndf_train1 <- read.csv(\"train_gender_age.csv\")\ndf_test1 <- read.csv(\"test_gender_age.csv\")\n\ntable(df_train1$Sex,df_train1$Age)\nstr(df_train1)\nsummary(df_train1)\nstr(df_test1)\nsummary(df_test1)\n\n# creating variabl in test1 df\ndf_test1$Survived <- NA\n# treating survived as factors-\ndf_train1$Survived <- as.factor(df_train1$Survived)\n\n# replace missing values in train df\ntable(is.na(df_train1$Age))\ndf_train1$Age[is.na(df_train1$Age)] <- round(mean(df_train1$Age,na.rm =TRUE))\ntable(is.na(df_train1$Age))\n\ntable(is.na(df_test1$Age))\ndf_test1$Age[is.na(df_test1$Age)] <- round(mean(df_test1$Age,na.rm =TRUE))\ntable(is.na(df_test1$Age))\n\nsummary(df_train1)\nsummary(df_test1)\n\n# model logistic\nlogistic <- glm(Survived ~ Age + Sex, data = df_train1, family = binomial)\nsummary(logistic)\n\n# model scoring using train data\nprediction <- predict(logistic, type = 'response')\n\n\n# model prediction using test data with score model\nprediction1 <- predict(logistic, df_test1, type = 'response')\nprediction1\n\n# change reponse in to range of 0 -1\ndf_test1$Survived <- ifelse(prediction1 > 0.5,1,0)\n\n# storing solution for submission\nsolution <- data.frame(PassengerID = df_test1$PassengerId, Survived = df_test1$Survived)\nsolution\nwrite.csv(solution,\"submission_train_gender_age.csv\", row.names = FALSE)\n\n# using other models-\n\n# import files\ngetwd()\n\nlibrary(caret)\n\ndf_train2 <- read.csv(\"train_all_numericals_categorical.csv\")\ndf_test2 <- read.csv(\"test_all_numericals_categorical.csv\")\n\nstr(df_train2)\nsummary(df_train2)\nstr(df_test2)\nsummary(df_test2)\n\ndf_test2$Survived <- NA\ndf_train2$Survived <- as.factor(df_train2$Survived)\n\n# splitting data\n\ntrainindex <- createDataPartition(df_train2$Survived, p = 0.8, list = FALSE)\ntrain <- df_train2[trainindex,]\ntest <- df_train2[-trainindex]\n\n# models logistic\nset.seed(7)\n\nmodellog <- train(Survived ~ ., data = train, method = 'glm')\nmodellog$results$Accuracy\n\n# random forrest\nset.seed(7)\n\nmodelrf <- train(Survived ~ ., data = train, method = 'rf')\nmodelrf$results$Accuracy\n\n# KNN\nset.seed(7)\n\nmodelknn <- train(Survived ~ ., data = train, method = 'knn')\nmodelknn$results$Accuracy\n\n# average neural netwrk\n\nset.seed(7)\n\nmodelavgn <- train(Survived ~ ., data = train, method = 'avNNet')\nmodelavgn$results$Accuracy\n\n# support vector machine \nset.seed(7)\n\nmodelsvm <- train(Survived ~ ., data = train, method = 'svmRadial')\nmodelsvm$results$Accuracy\n\n# combine accuracy results of models\nresults <- resamples(list(Logit=modellog, KNN = modelknn, SVM= modelsvm, Randomf = modelrf, AVGN= modelavgn))\nsummary(results)\nbwplot(results)\n\n#score the models\npredictionlog <- predict(modellog, newdata = df_test2)\npredictionrf <- predict(modelrf, newdata = df_test2)\npredictionknn <- predict(modelknn, newdata = df_test2)\npredictionsvm <- predict(modelsvm, newdata = df_test2)\npredictionavgn <- predict(modelavgn, newdata = df_test2)\n\n# solutions and writing results\nsolutionlog <- data.frame(PassengerID= df_test2$PassengerId, Survived = predictionlog)\nsolutionrf <- data.frame(PassengerID= df_test2$PassengerId, Survived = predictionrf)\nsolutionknn <- data.frame(PassengerID= df_test2$PassengerId, Survived = predictionknn)\nsolutionsvm<- data.frame(PassengerID= df_test2$PassengerId, Survived = predictionsvm)\nsolutionavgn <- data.frame(PassengerID= df_test2$PassengerId, Survived = predictionavgn)\n\nwrite.csv(solutionlog,\"submission_caret_logistic.csv\", row.names = F)\nwrite.csv(solutionrf,\"submission_caret_randomforest.csv\", row.names = F)\nwrite.csv(solutionknn,\"submission_caret_KNN.csv\", row.names = F)\nwrite.csv(solutionsvm,\"submission_caret_svm.csv\", row.names = F)\nwrite.csv(solutionavgn,\"submission_caret_avgNeural.csv\", row.names = F)\n\n\n# model using feature engineering\n\nlibrary(caret)\n\ndf_train3 <- read.csv(\"train_all_feature_engi_1.csv\")\ndf_test3 <- read.csv(\"test_all_feature_engi_1.csv\")\n\nstr(df_train3)\nsummary(df_train3)\nstr(df_test3)\nsummary(df_test3)\n\ndf_test3$Survived <- NA\ndf_train3$Survived <- as.factor(df_train3$Survived)\n\n# splitting data\n\ntrainindex <- createDataPartition(df_train3$Survived, p = 0.8, list = FALSE)\ntrain <- df_train3[trainindex,]\ntest <- df_train3[-trainindex]\n\n# models logistic\nset.seed(7)\n\nmodellog <- train(Survived ~ ., data = train, method = 'glm')\nmodellog$results$Accuracy\n\n# random forrest\nset.seed(7)\n\nmodelrf <- train(Survived ~ ., data = train, method = 'rf')\nmodelrf$results$Accuracy\n\n# KNN\nset.seed(7)\n\nmodelknn <- train(Survived ~ ., data = train, method = 'knn')\nmodelknn$results$Accuracy\n\n# average neural netwrk\n\nset.seed(7)\n\nmodelavgn <- train(Survived ~ ., data = train, method = 'avNNet')\nmodelavgn$results$Accuracy\n\n# support vector machine \nset.seed(7)\n\nmodelsvm <- train(Survived ~ ., data = train, method = 'svmRadial')\nmodelsvm$results$Accuracy\n\n# decision trees\nset.seed(7)\n\nmodeldt <- train(Survived ~ ., data = train, method = 'rpart')\nmodeldt$results$Accuracy\n\n\n# combine accuracy results of models\nresults <- resamples(list(Logit=modellog, KNN = modelknn, SVM= modelsvm, Randomf = modelrf, AVGN= modelavgn, DT =modeldt))\nsummary(results)\nbwplot(results)\n\n#score the models\npredictionlog <- predict(modellog, newdata = df_test3)\npredictionrf <- predict(modelrf, newdata = df_test3)\npredictionknn <- predict(modelknn, newdata = df_test3)\npredictionsvm <- predict(modelsvm, newdata = df_test3)\npredictionavgn <- predict(modelavgn, newdata = df_test3)\npredictiondt <- predict(modeldt, newdata = df_test3)\n\n# solutions and writing results\nsolutionlog <- data.frame(PassengerID= df_test3$PassengerId, Survived = predictionlog)\nsolutionrf <- data.frame(PassengerID= df_test3$PassengerId, Survived = predictionrf)\nsolutionknn <- data.frame(PassengerID= df_test3$PassengerId, Survived = predictionknn)\nsolutionsvm<- data.frame(PassengerID= df_test3$PassengerId, Survived = predictionsvm)\nsolutionavgn <- data.frame(PassengerID= df_test3$PassengerId, Survived = predictionavgn)\nsolutiondt <- data.frame(PassengerID= df_test3$PassengerId, Survived = predictiondt)\n\n\nwrite.csv(solutionlog,\"submission_caret_logistic.csv\", row.names = F)\nwrite.csv(solutionrf,\"submission_caret_randomforest.csv\", row.names = F)\nwrite.csv(solutionknn,\"submission_caret_KNN.csv\", row.names = F)\nwrite.csv(solutionsvm,\"submission_caret_svm.csv\", row.names = F)\nwrite.csv(solutionavgn,\"submission_caret_avgNeural.csv\", row.names = F)\nwrite.csv(solutionavgn,\"submission_caret_DecisionT.csv\", row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}