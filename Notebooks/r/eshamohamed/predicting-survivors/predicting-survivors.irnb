{"nbformat_minor": 1, "nbformat": 4, "cells": [{"source": ["# **Predicting Survivors**\n", "<br>\n", "## 1. Data Exploration\n", "<br>\n", "## 2. Data Pre-processing\n", "### 2.1 Adding features\n", "### 2.2 Handling missing values \n", "<br>\n", "## 3. Model Training\n", "### 3.1  Organizing things\n", "### 3.2 Training\n", "<br>\n", "## 4. Prediction"], "metadata": {"_cell_guid": "3f6ab3d2-16b3-4ed1-9445-47e336c0f5ce", "_uuid": "acebaa7ca5391aa5d79c73787958e91e9ed3b5db"}, "cell_type": "markdown"}, {"source": ["My first kaggle as a way of learning data science using real data. I also went through a number of kernels to learn from others"], "metadata": {"_cell_guid": "42bb96d2-b02e-4704-991b-7bdf96d3865b", "_uuid": "8c413034e771a30d969a93e08afc52edd4acd26d"}, "cell_type": "markdown"}, {"source": ["## 1. Data exploration"], "metadata": {"_cell_guid": "d2c0e3b3-dce7-43a4-95b3-2850e40d0f45", "_uuid": "dfde1c95c2a873b704a24c6187dd1490b71865a4"}, "cell_type": "markdown"}, {"source": ["Load train packages"], "metadata": {"_cell_guid": "ef43b643-ed12-4978-96eb-c77d21765173", "_uuid": "0abcd848d232a13a25a328810171bec9629fdf80"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["suppressMessages(library(Amelia)) \n", "suppressMessages(library(caret))\n", "suppressMessages(library(pROC))\n", "library(gridExtra)\n", "library(corrplot)\n", "library(plyr)"], "metadata": {"collapsed": true, "_cell_guid": "c5bd14d4-98e5-4fe4-a902-cf6f5b93ae77", "_execution_state": "idle", "_uuid": "a422d866f8ce835953136286021d2285457fbe35"}, "cell_type": "code"}, {"source": ["Load train dataset and have a look on the features"], "metadata": {"_cell_guid": "8602c297-41ff-4a9b-a899-183ff4ec50aa", "_uuid": "48291b6e9f8025999aaaad80dc4789871a9d9a81"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["# load training data\n", "t.train <- read.csv(\"../input/train.csv\", stringsAsFactors = F)\n", "\n", "# set all empty cells to NA\n", "t.train <- sapply(t.train, function(x) {ifelse(x == \"\", NA, x)}, simplify = FALSE)\n", "t.train <- as.data.frame(t.train, stringsAsFactors = F)\n", "\n", "# do the same for test set\n", "t.test <- read.csv(\"../input/test.csv\", stringsAsFactors = F)\n", "t.test <- sapply(t.test, function(x) {ifelse(x == \"\", NA, x)}, simplify = FALSE)\n", "t.test <- as.data.frame(t.test, stringsAsFactors = F)\n", "\n", "t.test$Survived <- NA\n", "# combine train and test set for pre-processing\n", "titanic <- rbind(t.train, t.test)\n", "\n", "# get an idea of exisiting features\n", "str(t.train)"], "metadata": {"_cell_guid": "a58c593d-b97a-410c-8273-0b73342c95a6", "_execution_state": "idle", "_uuid": "12ec6325929807b645a03653fd2c0157672926a0"}, "cell_type": "code"}, {"source": ["get an overview of missing values; Cabin and  Age has lots of missing values. The NAs in Survived are from the test set"], "metadata": {"_cell_guid": "9e3ed898-97bd-4296-aac0-573b61b82464", "_uuid": "931f4abc7a6a7b945b2cdfb1809f3f06dfec051a"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["missmap(titanic)"], "metadata": {"_cell_guid": "fd7c3143-2705-44e9-a120-6ce2ba922f29", "_execution_state": "idle", "_uuid": "77deb9885a5bdde61b63fbe8fd6d283a25b223cc"}, "cell_type": "code"}, {"source": ["Attach the data to use feauture's names direct"], "metadata": {"_cell_guid": "202fdcd4-1cdf-4c69-8741-fb18b4d9ca5a", "_uuid": "08a589ad5cc05fa9a9da9cda664f5260f7733eee"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["suppressMessages(attach(titanic))"], "metadata": {"collapsed": true, "_cell_guid": "5edd8e03-b957-495c-ad46-0b5fafb624bc", "_execution_state": "idle", "_uuid": "464d85c94cc45257df9b5e032b2fe56b1a7a0b1f"}, "cell_type": "code"}, {"source": ["Let's explore the data to see the distribution of Survived for each feature and for the different categories within some of the features"], "metadata": {"_cell_guid": "364e09d9-c0a2-4fb5-933a-8d1f46d30a36", "_uuid": "3b41828baec7152126871b1bff13a7a72e1b0112"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["table(Survived) "], "metadata": {"_cell_guid": "4eccc488-bea5-45fd-9a9f-4a8d691defc7", "_execution_state": "idle", "_uuid": "4f806234893d5525e1f6b81a383a6032b9a8b905"}, "cell_type": "code"}, {"source": ["There are more non survivors than survivors. Let's see Survivor's distribution across features with few categories"], "metadata": {"_cell_guid": "7759e928-de71-4f0c-9d8d-7ca63fcd8279", "_uuid": "ed8b8ab455348d3fe48e26a8220cbc0a85250e4b"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["p1 <- ggplot(as.data.frame(table(Survived, Pclass))) + aes(y=Freq,x=Pclass, fill=Survived) + \n", "            geom_col() + theme(legend.position=\"none\")\n", "p2 <- ggplot(as.data.frame(table(Survived, Sex))) + aes(y=Freq,x=Sex, fill=Survived) + \n", "            geom_col() + labs(y = \"\")\n", "p3 <- ggplot(as.data.frame(table(Survived, SibSp))) + aes(y=Freq,x=SibSp, fill=Survived) + \n", "            geom_col() + theme(legend.position=\"none\")\n", "p4 <- ggplot(as.data.frame(table(Survived, Parch))) + aes(y=Freq,x=Parch, fill=Survived) + \n", "            geom_col() + labs(y = \"\")\n", "grid.arrange(p1, p2, p3, p4, ncol=2, nrow=2)"], "metadata": {"_cell_guid": "1b5c0ff1-2477-4258-abc9-9d22c2d985ef", "_execution_state": "idle", "_uuid": "1919ccf1a3d1edc836ebe204f2550c2b081594a3"}, "cell_type": "code"}, {"source": ["# 2. Pre-processing\n", "## 2.1 Adding features\n", "###  Family size\n", "Use SibSp and Parch to create family size then categorize "], "metadata": {"_cell_guid": "7da0091b-7a8f-4e41-a141-043788df3ada", "_execution_state": "idle", "_uuid": "14353f1ed53227424c67f3d2ad1745ef3c1340a8"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["Fsize <- SibSp + Parch + 1\n", "FsizeD <- rep(NA, length(Fsize))\n", "FsizeD[Fsize == 1] <- \"Alone\"\n", "FsizeD[Fsize <= 3 & Fsize > 1] <- \"Small\"\n", "FsizeD[Fsize <= 5 & Fsize > 3] <- \"Medium\"\n", "FsizeD[Fsize > 5] <- \"Large\"\n", "titanic$FsizeD <- FsizeD"], "metadata": {"collapsed": true, "_cell_guid": "ff9381ac-4c1a-4e35-acd3-76661d047d3b", "_uuid": "430f48c343c36f9105d00c4977a152264b6a146c"}, "cell_type": "code"}, {"source": ["## 2.2. Handling missing values\n", "### 2.2.1 Fare\n"], "metadata": {"_cell_guid": "9c6d192b-7453-49c6-87dd-4ca6b565b47b", "_uuid": "ddffc265b736064c828485ee138df20f8cdf460d"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["suppressMessages(attach(titanic))\n", "a1    <- which(is.na(Fare)) # there exists one entry with NA\n", "titanic[a1,]"], "metadata": {"scrolled": true, "_cell_guid": "ed575c51-e636-437a-a41f-ae274cdcc82d", "_execution_state": "idle", "_uuid": "1a779a4ef53f8be68bd23133ec45124866577e37"}, "cell_type": "code"}, {"source": ["Looking at the row with NA, we can use information from other passengers who were also in the 3rd class and embarked at Southampton for imputation. Let's extract those passengers"], "metadata": {"_cell_guid": "0fe3f89c-0d79-4fe7-b3db-c08cb287981b", "_uuid": "b08f559a62f1a57bfb89ca7d87002e5779e448f9"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["a2 <- which(titanic[,\"Pclass\"] ==3 & titanic[,\"Embarked\"] == \"S\")\n", "a3 <- titanic[a2,]\n", "head(a3) # just a check"], "metadata": {"_cell_guid": "18dc8db5-311f-4ffe-8b36-98bd3110b105", "_execution_state": "idle", "_uuid": "c757089c7565ff7cc56186fe259fb38309073682"}, "cell_type": "code"}, {"source": ["Let's see a histogram distribution for Fare for passemgers in 3rd class and who embarked at Southampton"], "metadata": {"_cell_guid": "8669ec33-5897-4e83-89ff-6980236c6a20", "_uuid": "8184b37a4abb3925c8c64c18073824ec6f04e052"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["ggplot(a3, aes(Fare)) + geom_histogram()"], "metadata": {"_cell_guid": "c4e3d0ef-251b-40aa-b2b6-881a6d243e43", "_execution_state": "idle", "_uuid": "42dce28e4fd61649aec7ae291cfda33a58887512"}, "cell_type": "code"}, {"source": ["mmmmmh, the distribution is skewed. Let's impute with the median"], "metadata": {"_cell_guid": "b1e7ce9d-51df-4828-9ef3-ce2ace4afa6f", "_uuid": "08e41da5b2480a4e8c5bb951285492af2f21bf8e"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["Impute.fare <- preProcess(as.data.frame(a3[,\"Fare\"]), method=\"medianImpute\")\n", "Impute.fare$median # value to be imputed"], "metadata": {"_cell_guid": "495f2496-66cd-4686-9006-a315613d3840", "_execution_state": "idle", "_uuid": "e5aacd5feaa23340b1297f57970c55c057971182"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["titanic[a1, \"Fare\"] <- Impute.fare$median\n", "suppressMessages(attach(titanic))"], "metadata": {"collapsed": true, "_cell_guid": "c5da8c4f-5109-4358-b203-595e0cbb5ad8", "_execution_state": "idle", "_uuid": "5598772009ecc2e36a5c47eba5e2413e44b286a0"}, "cell_type": "code"}, {"source": ["### 2.2.2 Pclass, Sex, SibSp, Parch and Cabin"], "metadata": {"_cell_guid": "ce45b462-362a-470f-ad0f-8ab4793156ff", "_uuid": "b2bdab7231ee7d87a75af5f98571dd8dfcf2a2c1"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["sum(is.na(Pclass))\n", "# nzchar is for checking is there are empty cells\n", "a <- nzchar(Pclass); table(a)[\"FALSE\"]\n", "table(Pclass)\n", "\n", "sum(is.na(Sex))\n", "a <- nzchar(Sex); table(a)[\"FALSE\"]\n", "table(Sex)\n", "\n", "sum(is.na(SibSp))\n", "a <- nzchar(SibSp); table(a)[\"FALSE\"]\n", "table(SibSp)\n", "\n", "sum(is.na(Parch))\n", "a <- nzchar(Parch); table(a)[\"FALSE\"]\n", "table(Parch)\n", "\n", "sum(is.na(Cabin))\n", "a <- nzchar(Cabin); table(a)[\"FALSE\"]\n", "# 1014 out of 1309 cells are empty, just delet Cabin"], "metadata": {"_cell_guid": "e42fec0c-3429-460f-8659-c42aa59fe739", "_execution_state": "idle", "_uuid": "9eea743de99d15411f7a0974d18542862a75a9e1"}, "cell_type": "code"}, {"source": ["### 2.2.3 Embarked"], "metadata": {"_cell_guid": "2be84245-8a06-4d4d-a0fd-c0bc29c598d8", "_uuid": "38d25cc7e7c97bea7b3de0c9cd48b0b47e2f47d4"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["sum(is.na(Embarked))\n", "a   <- nzchar(Embarked) \n", "table(a)[\"FALSE\"]"], "metadata": {"_cell_guid": "c00778ba-5c98-461f-9505-d28a803e0d71", "_execution_state": "idle", "_uuid": "ee0c4e494fe86b61c29ca7776af7fe053cd2ee4d"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# There are two missing values. let's see what's uniques about them\n", "a1 <- which(is.na(Embarked) == TRUE)\n", "titanic[a1,]"], "metadata": {"_cell_guid": "2caa8a5f-7bcd-4b27-9b8f-00e615adb17f", "_execution_state": "idle", "_uuid": "bec3d2182f4937aea38aad7ab97eb4f6348bc1d8"}, "cell_type": "code"}, {"source": ["They were both in the first class and paid same amount. Are there other first class passengers who also paid 80?"], "metadata": {"_cell_guid": "71d8129b-3b9e-4994-a399-d4e9035de503", "_uuid": "2799a1a8af22c9f0da0f8b74b306842787b213e8"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["a2 <- which(titanic[,\"Pclass\"] == 1 & titanic[,\"Fare\"] == 80)\n", "a2"], "metadata": {"_cell_guid": "0732f9de-9595-4160-8db9-9ff01481cdd4", "_execution_state": "idle", "_uuid": "af052cad45cd8783002309f6f333deaeee8d5d2b"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# Unfortunately not. Let's get first class passengers and see their distribution across Embarked\n", "\n", "a3 <- which(titanic[,\"Pclass\"] == 1)\n", "a4 <- titanic[a3,]\n", "a5 <- is.na(a4[,\"Embarked\"])\n", "a6 <- which(a5 == TRUE) # rows with NA\n", "ggplot(a4[-a6,], aes(y=Fare, x=Embarked)) + geom_boxplot()"], "metadata": {"_cell_guid": "ce626c9b-8cb8-454d-a260-2a26fb307b6f", "_execution_state": "idle", "_uuid": "73ad52cd542d569bd972cf81a45fecede8a49188"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["table(a4[-a6, \"Embarked\"])"], "metadata": {"_cell_guid": "3b2b6666-d88c-4b41-9c8b-4cb38424896d", "_execution_state": "idle", "_uuid": "9831d53ec93fb8e2739679f1a198e1915b41753f"}, "cell_type": "code"}, {"source": ["Embarked Q has only 3 passengers so we dont consider it. Comparing boxplots for C and S, C seems most probable hence we use it.\n", "Impute with median instead of mean due to an outlier. "], "metadata": {"_cell_guid": "b644cbd6-772c-4217-8349-b969d145f29c", "_uuid": "24b9f9549cc20b9e533b2b29d315403a1b08923e"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["impute.embarked        <- aggregate(Fare ~ Embarked, a4[-a6,], median)[1,1]\n", "titanic[a1,\"Embarked\"] <- impute.embarked\n", "colSums(apply(titanic, 2, is.na)) # just a check"], "metadata": {"_cell_guid": "785c2f90-0056-412c-909d-3cad28b1628d", "_execution_state": "idle", "_uuid": "d3b9aea8c7a3ab524942a514a6cc5c8c307dc277"}, "cell_type": "code"}, {"source": ["### 2.2.4 Age\n", "We already saw that Age has 263 NAs. Use pre-process function of the caret package to impute Age. "], "metadata": {"_cell_guid": "249ecc3f-693d-48b4-89a6-51eeca9c21c9", "_uuid": "a55f2c70b4e9305a2e1138467951ad24ecb282bf"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["# get out features that will not be used for imputation\n", "notForImpute <- grep(paste(c(\"PassengerId\", \"Survived\", \"Name\", \"Ticket\", \n", "                             \"Cabin\"), collapse = \"|\"), names(titanic))\n", "\n", "# create a data frame from titanic with features that will be used for imputation \n", "imputeData  <- titanic[,-notForImpute]\n", "\n", "# convert character string to factor\n", "toFactor     <- grep(paste(c(\"Pclass\", \"Sex\", \"Embarked\", \"FsizeD\"),\n", "                           collapse = \"|\"), names(imputeData))\n", "imputeData[toFactor] <- lapply(imputeData[toFactor], factor)"], "metadata": {"collapsed": true, "_cell_guid": "8ad2ab87-d527-4375-8577-88b7021fa6a0", "_execution_state": "idle", "_uuid": "6c1caf89d750670d0ec09d30c4d3a04bc86b68c5"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# preProcess function of the caret will ignor non-numeric features so create \n", "# dummy variables for factors\n", "f               <- ~ Pclass + Sex + Embarked + FsizeD - 1\n", "f               <- as.formula(f)\n", "d2              <- dummyVars( f, data = imputeData, levelsOnly = TRUE)\n", "d2              <- predict(d2, imputeData)\n", "imputeDataDummy <- cbind(imputeData[,-toFactor], d2)"], "metadata": {"collapsed": true, "_cell_guid": "2d4ee1da-2eb4-4933-8f90-882cf810c092", "_execution_state": "idle", "_uuid": "e21692f83ba7f4784b8ae82671d39c7768885502"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# do knn imputation with different values of nearest neighbours, k\n", "kNumber         <- 2:4\n", "theDataImpute   <- matrix(NA, nrow(imputeDataDummy), length(kNumber)) # to store predicted Age\n", "\n", "for(i in 1:length(kNumber)){\n", "  preProcAge        <- preProcess(imputeDataDummy, method = \"knnImpute\", k = kNumber[i] )\n", "  theDataImpute[,i] <- predict(preProcAge, imputeDataDummy)$Age\n", "}"], "metadata": {"collapsed": true, "_cell_guid": "170e5ce7-b5a0-4906-a162-37212551f225", "_execution_state": "idle", "_uuid": "7df858f2dd32a41b149ec7173bb67394ab6966b9"}, "cell_type": "code"}, {"source": ["compare predicted Age with initial available Age feature. First normalize Age since preProcessing function with knn is defaulted to first center and scale data"], "metadata": {"_cell_guid": "c16e751c-759b-4a81-b014-7127be761e78", "_uuid": "53bdbf0efa8499a243eb67b875eaa0e8177694c3"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["AgeNorm <- preProcess(as.data.frame(titanic$Age), method = c(\"center\", \"scale\"))\n", "AgeNorm <- predict(AgeNorm, as.data.frame(titanic$Age))\n", "AgeNorm <- unlist(AgeNorm)"], "metadata": {"collapsed": true, "_cell_guid": "39faddab-6719-4088-9f5e-7813be3fd243", "_uuid": "d9409cac84aff30146df96a7ede32ab8ddef3580"}, "cell_type": "code"}, {"source": ["Plot histogram of the available Age then density plots of the imputed values"], "metadata": {"_cell_guid": "90584b98-d8f9-4664-9411-73008fcb27cf", "_uuid": "68378cbbe273f9588f0b22a5bb445fc45c07327b"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["ggplot(as.data.frame(AgeNorm), aes(AgeNorm)) + \n", "  geom_histogram(binwidth=.4, colour=\"black\", fill=\"white\", aes(y = ..density..)) +\n", "  geom_density(data = as.data.frame(AgeNorm), na.rm = TRUE) +\n", "  geom_density(aes(theDataImpute[,1]), col = \"red\") +  # k = 2\n", "  geom_density(aes(theDataImpute[,2]), col = \"blue\") + # k = 3\n", "  geom_density(aes(theDataImpute[,3]), col = \"green\")  # k = 4"], "metadata": {"_cell_guid": "ead8bd6d-e428-4ba5-8c36-773ddb066574", "_uuid": "5f8de5b32fa17c8aacba0fd649e86929baea1598"}, "cell_type": "code"}, {"source": ["Clearly increasing the number of nearest neighbours, k, results in increasing uncertainty. Let's use k = 2"], "metadata": {"_cell_guid": "09049c34-d2ba-4db1-a328-914bd242dca5", "_uuid": "e24e01ba9b3267a747177df43cf0eabc08ebd8c1"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["titanic$Age <- theDataImpute[,1]"], "metadata": {"collapsed": true, "_cell_guid": "47181811-a286-453b-8f62-e408327794f6", "_uuid": "7cd913babcc5537e23b12730ac52b0eb46547dc6"}, "cell_type": "code"}, {"source": ["## 2.3 Correlations between predictors\n", "check pairwise correlation"], "metadata": {"_cell_guid": "a81ae17e-bad8-4416-b499-89cb79022526", "_uuid": "f5b05d8f42ca2fa6a4a4160c210b27b6180d7414"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["# remove columns with many categories or without \"useful\" feature \n", "toRm      <- grep(paste(c(\"PassengerId\",\"Survived\",\"Name\", \"Ticket\",\"Cabin\"), \n", "                   collapse = \"|\"), names(titanic))\n", "checkCorr <- titanic[,-toRm]\n", "\n", "checkCorr$Sex       <- revalue(checkCorr$Sex, c(\"male\" = 1, \"female\" = 2))\n", "checkCorr$Embarked  <- revalue(checkCorr$Embarked, c(\"S\" = 1, \"Q\" = 2,  \"C\" = 3))\n", "checkCorr$FsizeD    <- revalue(checkCorr$FsizeD, c(\"Alone\" = 1, \"Small\" = 2, \n", "                                                   \"Medium\" = 3, \"Large\" = 4))\n", "\n", "# convert characters to numeric\n", "checkCorr$Sex       <- as.numeric(checkCorr$Sex)\n", "checkCorr$Embarked  <- as.numeric(checkCorr$Embarked)\n", "checkCorr$FsizeD    <- as.numeric(checkCorr$FsizeD)\n", "\n", "corrData            <- cor(checkCorr) # find pairwise correlation\n", "\n", "# plot correlation matrix\n", "corrplot(corrData, method = \"square\", order = \"hclust\")"], "metadata": {"_cell_guid": "c7692b12-08c3-4956-8176-efd8ea228a56", "_execution_state": "idle", "_uuid": "94a4865628fa95c4ab9e6c085640830f1a4897d8"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# identify correlated predictors with correlation > 0.8 for removal\n", "find.corr <- findCorrelation(corrData, cutoff = .8, names = FALSE, exact = TRUE)\n", "find.corr # all pairwise correlation is less than .8 so we proceed to model training"], "metadata": {"_cell_guid": "8060a103-de64-4ddc-b200-21d47d27a7ad", "_execution_state": "idle", "_uuid": "c831bf592674f37a82c12c53790d1409912e1997"}, "cell_type": "code"}, {"source": ["# 3. Model training \n", "## 3.1 Organizing things"], "metadata": {"_cell_guid": "84d485f5-175d-4334-940f-b7bd63ced0f5", "_uuid": "49b609bc6e94da49657cf928e83b2a1b2c8079bd"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["str(titanic)"], "metadata": {"_cell_guid": "9b59e88c-e3a2-42cc-b581-561457963ea8", "_execution_state": "idle", "_uuid": "f983d96081f6f8ed8a45b6dc386e53c2fc9ecfe1"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# remove features that will not be used for model training leaving PassengerId\n", "toRm      <- grep(paste(c(\"Name\", \"Ticket\", \"Cabin\"), collapse = \"|\"), names(titanic))\n", "titanic   <- titanic[,-toRm]\n", "\n", "# convert characters to factors\n", "titanic$Pclass     <- factor(titanic$Pclass)\n", "titanic$Sex        <- factor(titanic$Sex)\n", "titanic$Embarked   <- factor(titanic$Embarked)\n", "titanic$FsizeD     <- factor(titanic$FsizeD)"], "metadata": {"collapsed": true, "_cell_guid": "7bddd5f3-786a-40d2-927c-a1fa76b698bb", "_execution_state": "idle", "_uuid": "2e11872a3369cafdd3898a3f4b2833ba05fc5113"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# separate training from test set\n", "titanic.train          <- titanic[!is.na(titanic$Survived),]\n", "titanic.train$Survived <- factor(ifelse(titanic.train$Survived == 1, \"yes\", \"no\"))\n", "titanic.test           <- titanic[is.na(titanic$Survived),]\n", "titanic.test           <- titanic.test[,-grep(\"Survived\", names(titanic.test))]\n"], "metadata": {"collapsed": true, "_cell_guid": "09b531c4-5ad5-4147-aa53-acb4e915d7f4", "_execution_state": "idle", "_uuid": "0513c865af16d48311aeb8a69db1c6747d625984"}, "cell_type": "code"}, {"source": ["## 3.2 Model training\n", "compare 4 (support vector machine with radial basis kernel, random forest, gradient boosting and logistic regression) models, tune parameters using repeated cross-validation repeating 5 times. \n", "Even though RF and GBM do not require features to be centered and scale, let's do so for uniformity."], "metadata": {"_cell_guid": "24b7ba6c-b9d4-4f38-aaa1-1533627dfe2e", "_uuid": "bd598216dae92595f2b7c2f1d6e683dcec87f0c7"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["cntr <- trainControl(method = \"repeatedcv\", repeats = 5)\n", "\n", "f    <- Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + FsizeD \n", "f    <- as.formula(f)"], "metadata": {"collapsed": true, "_cell_guid": "168c7d26-622d-4f35-ae0b-55a1363a28c9", "_execution_state": "idle", "_uuid": "116dfe3a5f90fe390bb07480efc895d6a2e3f11d"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["set.seed(009)\n", "svm.fit <- train(f, data = titanic.train,\n", "                 method = \"svmRadial\",\n", "                 trControl = cntr,\n", "                 preProcess = c(\"center\", \"scale\"),\n", "                 verbose = FALSE)\n", "\n", "set.seed(009)\n", "rf.fit <- train(f, data = titanic.train,\n", "                method = \"rf\",\n", "                trControl = cntr,\n", "                preProcess = c(\"center\", \"scale\"),\n", "                verbose = FALSE)\n", "\n", "set.seed(009)\n", "gbm.fit <- train(f, data = titanic.train,\n", "                 method = \"gbm\",\n", "                 trControl = cntr,\n", "                 preProcess = c(\"center\", \"scale\"),\n", "                 verbose = FALSE)\n", "\n", "set.seed(009)\n", "log.fit <- train(f, data = titanic.train,\n", "                 method = \"glm\",\n", "                 family = binomial(link = \"logit\"),\n", "                 trControl = cntr,\n", "                 preProcess = c(\"center\", \"scale\"))\n"], "metadata": {"_cell_guid": "30ca12de-5b15-49f4-a353-ec333999b4b0", "_uuid": "d8c7fa9de47364a812e37ae8461df715e1a4dba4"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# put them together for comparison\n", "out <- resamples(list(SVM = svm.fit, RF = rf.fit, GBM = gbm.fit, Log = log.fit))\n", "summary(out)"], "metadata": {"_cell_guid": "40de5637-9eff-4a5d-93ec-222af52c397f", "_uuid": "7913dbde7fb64f6ebb15ceb9e6cae810191ac563"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["bwplot(out)"], "metadata": {"_cell_guid": "a0222793-0d17-4821-8e33-43820668feed", "_uuid": "dbd445b4da1037ed07236872d625b30a280f4154"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["dotplot(out)"], "metadata": {"_cell_guid": "b35b787f-8dfd-429e-acf8-2417eb31d342", "_uuid": "2d150a57a083a0c5ed765c37a7af41cd2804f259"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# There does not seem to be much differences especially between GBM, RF and SVM. \n", "# Let us do a hypothesis test"], "metadata": {"collapsed": true, "_cell_guid": "6a45fdb8-afcb-4df2-b671-37f04979c725", "_uuid": "57b0f46528408a347c90d3906a28590dd1a2569f"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# Hypothesis test: H_0 is such that there is no difference in performance \n", "# between the models trained\n", "modelDiff <- diff(out)\n", "summary(modelDiff)"], "metadata": {"_cell_guid": "23228440-90f4-48da-b4de-febd43342584", "_uuid": "b20fcd72b62e57a8bd5fd4dc46d46f9896bcf9a4"}, "cell_type": "code"}, {"source": ["The p-values on accuracy confirm our interpretation of the graphs above. \n", "We proceed with GBM"], "metadata": {"_cell_guid": "a423e780-8020-4a7e-b1ed-7c3339058ff2", "_uuid": "96d82ecaa6603fefa36d342eb0e5afc9b8a56829"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["print(gbm.fit)"], "metadata": {"_cell_guid": "1bed1e70-fc47-48a3-9df0-65ff638c64d4", "_execution_state": "idle", "_uuid": "b2bc9b5f1273606a45ad17422f9009cfc4e9259d"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# confusion matrix\n", "confusionMatrix(gbm.fit)"], "metadata": {"_cell_guid": "e5e318e3-45fa-4b7c-b88e-35e1754fe146", "_uuid": "93aaf15db3a5414f783e3b548972dd481a091f04"}, "cell_type": "code"}, {"outputs": [], "execution_count": null, "source": ["# variable importance\n", "plot(varImp(gbm.fit))"], "metadata": {"_cell_guid": "9fbfef55-09f6-4ca1-bbf8-71206cb0be12", "_uuid": "5b3b4282f07dd0ee5f4583e666bd17900246c0e0"}, "cell_type": "code"}, {"source": ["# 4. Prediction\n", "Finally predict trained gbm on the test set"], "metadata": {"_cell_guid": "5fd76a1e-bb47-41c4-b335-8cc9c8212e97", "_uuid": "7dec6e792c8fcb522421414ed57a7af3bce2e726"}, "cell_type": "markdown"}, {"outputs": [], "execution_count": null, "source": ["gbm.predict <- predict(gbm.fit, newdata = titanic.test)\n", "gbm.predict <- ifelse(gbm.predict == \"no\", 0, 1)\n", "\n", "Out <- as.data.frame(titanic.test$PassengerId)\n", "Out$Survived <- gbm.predict\n", "colnames(Out)[1] <- \"PassengerId\"\n", "\n", "write.csv(Out, file = \"TitanicSurvived.csv\", row.names = F)\n", "\n"], "metadata": {"collapsed": true, "_cell_guid": "d7dca771-efcd-4852-91a0-f3810d7e0413", "_execution_state": "idle", "_uuid": "014269a40a50a6a898a5c08a1a265126fc3b668d"}, "cell_type": "code"}], "metadata": {"kernelspec": {"display_name": "R", "name": "ir", "language": "R"}, "language_info": {"mimetype": "text/x-r-source", "codemirror_mode": "r", "name": "R", "version": "3.4.1", "pygments_lexer": "r", "file_extension": ".r"}}}