{"cells":[{"metadata":{"_uuid":"28f9c9f2eea46c230cf1c515ad6bda5d4a26f979","_execution_state":"idle","trusted":false},"cell_type":"markdown","source":"- 1 Introduction\n  - 1.1 Load and check data\n  - 1.2 Exploratory Data Analysis\n  - 1.3 Imputation\n- 2 Feature Engineering\n  - 2.1 What’s in a name?\n  - 2.2 Do families sink or swim together?\n  - 2.3 Treat a few more variables …\n- 3 Missingness\n  - 3.1 Sensible value imputation\n  - 3.2 Predictive imputation\n  - 3.3 Feature Engineering: Round 2\n- 4 Prediction\n  - 4.1 Split into training & test sets\n  - 4.2 Building the model\n  - 4.3 Variable importance\n  - 4.4 Prediction!\n- 5 Conclusion"},{"metadata":{"_uuid":"f881cb2275c3801b7bb8960f589009d0e2635970"},"cell_type":"markdown","source":"## 1 Introduction\n### 1.1 Load and check data"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"ac467136be510e7eafe8269e9a5b0dca7149a052"},"cell_type":"code","source":"# Load packages\nlibrary('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('plyr')\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm\nlibrary('xgboost')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f826070dfab785b99cf6164e77860e57c4a00e68","_kg_hide-output":true},"cell_type":"code","source":"train <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\nfull  <- bind_rows(train, test) # bind training & test data","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"754fe5b28688c35a153f1141eb10f8b003cead82"},"cell_type":"markdown","source":"### 1.2 Exploratory Data Analysis (데이터 전처리의 과정)"},{"metadata":{"trusted":true,"_uuid":"3474fa4aa1edbfec5c96340fb1cc57f8c3b8f307"},"cell_type":"code","source":"# check data\nstr(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"da17cfc7c17f5fb7676531ef6156818a4551f872"},"cell_type":"markdown","source":"**(1309, 12)**의 data.frame형태를 가지는것을 알 수 있다. 확인해야 하는것은 \n  - 변수가 의미하는것은 무엇인지?\n\n  - 변수 형태가 제대로 설정되었는지? \n    Survived, Pclass, Embarked는 범주형 변수이므로 factor로 바꿔주는게 옳음.\n    \n  - 결측치는 존재하는지? \n    눈에 보이는 결측치는 Age에 NA와 cabin에 \"\"가 보임. 하지만 둘의 결측치 형태가     다르므로 \"\"의 경우 NA로 바꿔줘야함.\n    \n  - summary()등을 이용하여 간단한 탐색"},{"metadata":{"_uuid":"b283902a00dce9059ffb3be1c6eb174322c7b9db"},"cell_type":"markdown","source":"- 변수설명\n\n|변수 이름|설명|  \n|---|---|  \n|Survived|생존 (1) or 사망 (0)|\n|Pclass|좌석등급 1에 가까울 수록 좋음|\n|Name|승객의 이름|\n|Sex|승객의 성별|\n|Age|승객의 나이|\n|SibSp|탑승한 형제 자매 / 배우자의 수|\n|Parch|탑승한 부모 / 어린이의 수|\n|Ticket|티켓 번호|\n|Fare|티켓 요금|\n|Cabin|수랍장|\n|Embarked|승선항 C = Cherbourg, Q = Queenstown, S = Southampton|"},{"metadata":{"_uuid":"62c1cea7c69695474b4c79a8e2f98063c540b9a5"},"cell_type":"markdown","source":"- 결측치 **\"\" -> NA** 변경"},{"metadata":{"trusted":true,"_uuid":"4fc92e31f425391e0e07bfcfe2393592f42fcc3b"},"cell_type":"code","source":"train <- read.csv('../input/train.csv', stringsAsFactors = F, na.strings=c(\"\"))\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F, na.strings=c(\"\"))\n\nfull  <- bind_rows(train, test) # bind training & test data","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9a28edcaf249ec6e00404c393d705541e87e5c84"},"cell_type":"code","source":"apply(full,2,function(x) sum(is.na(x)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b0c5b1d6765938bd14d450bbb46ba48c0fd141e8"},"cell_type":"markdown","source":"- 변수타입 변경"},{"metadata":{"trusted":true,"_uuid":"4a77bcd6ef9444b5840fdb47c5d72cbc2b506753"},"cell_type":"code","source":"#변수 Type변경\nfull$Pclass <- as.factor(full$Pclass)\nfull$Embarked <- as.factor(full$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f7000859db84bd9bc20a78c726cd5e587da296a3"},"cell_type":"markdown","source":"- Summary()를 통한 간단한 데이터 탐색"},{"metadata":{"trusted":true,"_uuid":"a8b81dc379a6b9e8d9d5240e3d4637ac3d95b297"},"cell_type":"code","source":"summary(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"62bdc62f9bb2c6ea02f8b310eccfe09f9f25e2af"},"cell_type":"markdown","source":"- Fare 및 Embarked의 결측치 채우기"},{"metadata":{"trusted":true,"_uuid":"bb341a3c2ac46e8ac1e3fdd922240c8231756851"},"cell_type":"code","source":"full  %>% filter(is.na(Fare))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a2e691591df186e975b98bd284e71313d84ed081"},"cell_type":"code","source":"full  %>% filter(is.na(Embarked))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"09db5aa2ea7cb4e5bd5c18ccb7cc2094215ab930"},"cell_type":"markdown","source":"![](https://choco9966.github.io/Team-EDA/1week/image/embarked.png)\n\n*출처:\nhttps://rstudio-pubs-static.s3.amazonaws.com/237185_55be842b64c3449cb28d247ecfa9a410.html*\n\n상식적인 접근에서 Fare과 관련있는 요소는 Pclass와 Embarked이다. 그래서 그 둘의 관계를 알아보기 위해 boxplot을 그리면 아래와 같다."},{"metadata":{"trusted":true,"_uuid":"91bc8321c4024d4e25e0e336a3de7a3dceab2187"},"cell_type":"code","source":"# Use ggplot2 to visualize embarkment, passenger class, & median fare\nggplot(full, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), \n    colour='red', linetype='dashed', lwd=0.5) +\n  scale_y_continuous(labels=dollar_format()) +\n  theme_classic() + theme(legend.position = \"none\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bd5dd8a179a46f22e3fa50088b139ec3f2d74a44"},"cell_type":"markdown","source":"위 그림에서 주황색,초록색,파란색은 각각 Pclass : 1, 2, 3 을 의미한다. 그런데 NA의 값이 Embarked : C, Pclass : 1의 요금의 median과 굉장히 비슷하다. 그래서 값을 더 자세히 보면 아래와 같다"},{"metadata":{"trusted":true,"_uuid":"a11f993a5d74cfd7b169d01fcf5f1d06665da7ee"},"cell_type":"code","source":"full  %>% group_by(Embarked,Pclass) %>% filter(Pclass==1)  %>% summarise(medi_Fare = median(Fare,na.rm=TRUE))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"231fbab79f243cb5efa6e4dfb8abff85d34d65c1"},"cell_type":"markdown","source":"따라서 결측치를 C로 채워준다."},{"metadata":{"trusted":true,"_uuid":"712249d6afd75fbb41065fabbc20b7fe3795889b"},"cell_type":"code","source":"full[c(62,830),]$Embarked <- 'C'","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"492d0b6dfc37a586851121d17729467345d235b5"},"cell_type":"code","source":"full[c(62,830),]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0353e1e2da8d6b73665ae09a2c0a587e3e85c603"},"cell_type":"code","source":"full  %>% filter(is.na(Fare))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"253eefe08d461fa0b419645dc4a6e0ef3b09d235"},"cell_type":"code","source":"full  %>% group_by(Embarked,Pclass) %>% filter(Pclass==3)  %>% summarise(medi_Fare = median(Fare,na.rm=TRUE))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"caff473fe27c0c9aa25888b4720c81f5a5b2d8b9"},"cell_type":"markdown","source":"마찬가지로 Embarked : S, Pclass : 3의 median값을 넣어주면 될 것 같다."},{"metadata":{"trusted":true,"_uuid":"3fb5d3c52a9adfb8b7b8797a33f227ddb516b9fb"},"cell_type":"code","source":"full[1044,]$Fare <- 8.05","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1ce720c67644ebe60b90e4356b3c3204a058f805"},"cell_type":"markdown","source":"위에서 발생한 Fare > 500의 이상치를 먼저 살펴보면 아래와 같다."},{"metadata":{"trusted":true,"_uuid":"c7c983c910ef3326c3fab6a7a32ff64abbc59299"},"cell_type":"code","source":"full  %>% filter(Fare > 500)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"381753aaa1812c087581464fcb3cb1438f7ef2eb"},"cell_type":"markdown","source":"신기하게 티켓번호와 Fare, Embarked가 모두 동일한것을 볼 수 있다. 그리고 Cabin의 경우도 앞자리수가 동일한것을 볼 수 있다. 이를 통해서 우리는 이들을 함께 탑승한 사람이라고 보고 Feature engineering을 할 수 있을것이다. 추가로 680과 1235는 Cardeza를 공유하는걸로 봐서 더 확실하게 가족관계인것을 알 수 있다."},{"metadata":{"trusted":true,"_uuid":"dd64c9ef52e8821110523bf8376f313aeaa00590"},"cell_type":"code","source":"# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Show title counts by sex\ntable(full$Sex, full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7c6c2cfcb64811562c4944bcc0e63d4ee960e03f"},"cell_type":"code","source":"# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n# Show title counts by sex again\ntable(full$Sex, full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4a3026fc441ac9d6ae120b24a9c1eb8e71df3375"},"cell_type":"code","source":"# Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name,  \n                      function(x) strsplit(x, split = '[,.]')[[1]][1])","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2e83152f8b0b75406e9b3ac5a02a343b231c3d9e"},"cell_type":"markdown","source":"아래를 보면 앞의 Surname이 동일한 사람이 많은것을 볼 수 있다. 우리는 이와 Fare, cabin 등을 통해서 가족관계를 증명할 것이다."},{"metadata":{"trusted":true,"_uuid":"23904342233265a0549fc2ecb7a08c1bef536647"},"cell_type":"code","source":"table(full$Sex, full$Surname)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a461c98b21e5632f9d4d83765b13a7c53fdd7695"},"cell_type":"code","source":"# Create a family size variable including the passenger themselves\nfull$Fsize <- full$SibSp + full$Parch + 1","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"78d6989de4f7cc20ac3254ec1d86fc8f2d1ccfa8"},"cell_type":"code","source":"paste(full$Surname, full$Fsize, sep='_')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"407391b2438a3ebfe6ba5fcdab5cd35f55332385"},"cell_type":"code","source":"# Create a family variable \nfull$Family <- paste(full$Surname, full$Fsize, sep='_')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"59dba74d4277abab7d4225c77176eade5088645c"},"cell_type":"code","source":"full  %>% head(100)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ae06bc60fd42451589f1a3c1f7f0dfbd613f8a67"},"cell_type":"code","source":"apply(full,2,function(x) sum(is.na(x)))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9b107b8549663f4f16c76869074a7d157738024f"},"cell_type":"code","source":"full$Cabin <- substr(full$Cabin,1,1) ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"559fdbe3bee85b129922e736db87a1c05687e508"},"cell_type":"code","source":"full  %>% filter(is.na(Cabin))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"63e360254c1c49cfe01ef9d3cdbf17bf7558df85"},"cell_type":"code","source":"full %>% filter(Fsize > 1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0d9b1805a88d128c90dd6104f37c95c10a23ed6b"},"cell_type":"code","source":"Fmailyname = unique(full$Family)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"70cd9dec45d16d6e035676ea3951709ac12e9806"},"cell_type":"code","source":"full  %>% filter(Family == 'Braund_2') %>% summarise(n_distinct(Cabin))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"969a851a93cf991ae1be565f018296ba2a66b718"},"cell_type":"code","source":"Family_name <- unique(full$Surname)\ncabin_not_match = list()\na = 0\nfor(i in Family_name){\n    a <- full  %>% filter(Surname == i) %>% summarise(n_distinct(Cabin))\n    if(a!=1){\n        cabin_not_match[[length(cabin_not_match)+1]] <- i\n    }\n}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d582b519c8aecb153c45fdb6206cf017c68091c4"},"cell_type":"code","source":"full  %>% filter(Surname == 'Peter')\nfull[c(534,1309),]$Cabin <- \"F E69\"\n\nfull  %>% filter(Surname == 'Wick')\nfull[c(857,1109),]$Cabin <- 'C7'","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0e02ba5cbc05ca3905dd9f58d62815412053c26d"},"cell_type":"code","source":"# Use ggplot2 to visualize the relationship between family size & survival\nggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n    geom_bar(stat='count', position='dodge') +\n    scale_x_continuous(breaks=c(1:11)) +\n    labs(x = 'Family Size', fill='') + \n    scale_fill_discrete(labels=c(\": Died \", \": Survived\")) + \n    theme_classic() +\n    theme(legend.position= \"bottom\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0331c7cca25e8cd03eaf04113c25052e228d19ed"},"cell_type":"code","source":"# Discretize family size\nfull$FsizeD[full$Fsize == 1] <- 'singleton'\nfull$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$FsizeD[full$Fsize > 4] <- 'large'\n\nfull$FsizeD <- as.factor(full$FsizeD)\n# Show family size by survival using a mosaic plot\nmosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bc6445d6822c75a4ab330e39f554754e2c9a9394"},"cell_type":"markdown","source":"모자이크 플롯은 우리가 싱글톤과 대가족 사이에 생존 페널티가 있다는 우리의 규칙을 보존하고 있다는 것을 보여줍니다. 그러나 작은 가족의 승객들에게는 혜택이 있습니다. 나이 변수를 좀 더 하고 싶은데, 263행에는 나이 값이 빠져 있어서 결손증을 해결할 때까지 기다려야 할 것 같아요."},{"metadata":{"trusted":true,"_uuid":"856472c76d157f7e745414fceace8733c96a29a8"},"cell_type":"code","source":"# This variable appears to have a lot of missing values\nfull$Cabin[1:28]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"82da1394298e451dd0ea1c998cf27899d4238acf"},"cell_type":"code","source":"# The first character is the deck. For example:\nstrsplit(full$Cabin[2], NULL)[[1]]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7a90265f5e3fd6be69cdeacaeeaec9624b48bd00"},"cell_type":"markdown","source":"![](https://choco9966.github.io/Team-EDA/1week/image/pclass.PNG)"},{"metadata":{"trusted":true,"_uuid":"ffe0d44787177ae2b48ac99410dbbc4e5ac09b82"},"cell_type":"code","source":"# Create a Deck variable. Get passenger deck A - F:\nfull$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b12ffa9a81ce4fc9a3c32c6262d959dca112dd43"},"cell_type":"code","source":"full$Deck[1:28]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"feb78e70307231ab15d4c9f8ae4983b32759d08a"},"cell_type":"code","source":"sum((full$Deck %in% c(\"M\",\"L\",\"R\",\"J\",\"H\",\"G\",\"F\",\"E\",\"D\")) == TRUE & full$Pclass != 3 )","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0fe76531607c591d00042c09c83143fad028fa1d"},"cell_type":"code","source":"full  %>% filter(!is.na(Survived)) %>% filter((Deck %in% c(\"M\",\"L\",\"R\",\"J\",\"H\",\"G\",\"F\",\"E\",\"D\")) == TRUE & Pclass != 3)  %>% group_by(Survived)  %>% count()","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"2ddad4307644656cb46da74f1d36872981bd3503"},"cell_type":"code","source":"full$Closed_boat <- ifelse((full$Deck %in% c(\"M\",\"L\",\"R\",\"J\",\"H\",\"G\",\"F\",\"E\",\"D\")) == TRUE & full$Pclass != 3,1,0)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"11ad3824c807187a3c95986a255ead17e6e0dba8"},"cell_type":"code","source":"summary(full$Closed_boat)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"4741749dabe668ce2937e1b81161c3c48a9d12f5"},"cell_type":"code","source":"# Make variables factors into factors\nfactor_vars <- c('Pclass','Sex','Embarked'\n                 ,'Closed_boat')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n\n# Perform mice imputation, excluding certain less-than-useful variables:\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf') ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"333bff1adda46df73c3ac0e43616c5df92dca86b"},"cell_type":"code","source":"mice_output <- complete(mice_mod)\nmice_output2 <- complete(mice_mod,2)\nmice_output3 <- complete(mice_mod,3)\nmice_output4 <- complete(mice_mod,4)\nmice_output5 <- complete(mice_mod,5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7b582a87afe1f4c6213a224c2375a95f1b34df08"},"cell_type":"code","source":"# Plot age distributions\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen', ylim=c(0,0.04))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a736c90c1a3ca4a8d8ad7be372e7f36b9b06a508"},"cell_type":"code","source":"full$Age <- (mice_output$Age + mice_output2$Age + mice_output3$Age + mice_output4$Age + mice_output5$Age)/5","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ba970cf59142a08078e79dce8729ffe55a69905b"},"cell_type":"code","source":"# First we'll look at the relationship between age & survival\nggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n    labs(x = 'Age', fill='') + \n    scale_fill_discrete(labels=c(\": Died \", \": Survived\")) +\n  theme_classic() +\n    theme(legend.position= \"bottom\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2f854368d2226e08578aed7646ab1e7f7ab2cc64"},"cell_type":"markdown","source":"0에서 20 사이의 특정 부분에서 모두 죽는 나이대가 발견하는것을 보고 그를 확인하기 위해 범위를 좁혀봄"},{"metadata":{"trusted":true,"_uuid":"9f652f97358f22223f1c2a7152d4aac53f065994"},"cell_type":"code","source":"# First we'll look at the relationship between age & survival\nfull[1:891,]  %>% filter(Age<20)  %>% ggplot(aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n    labs(x = 'Age', fill='') + \n    scale_fill_discrete(labels=c(\": Died \", \": Survived\")) +\n  theme_classic() +\n    theme(legend.position= \"bottom\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a1fd9f1c62ea18dc01ed3946e040ff9fa5d5fd52"},"cell_type":"code","source":"summary(full$Sex)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0f69c5317925f00214c2f95d08b8cb856407e766"},"cell_type":"code","source":"# Create the column child, and indicate whether child or adult\nfull$Female_Child[full$Age < 20 & full$Sex == 'female'] <- 1\nfull$Female_Child[is.na(full$Female_Child)] <- 0\nfull$Male_Child[full$Age <= 10 & full$Sex == 'male'] <- 1\nfull$Male_Child[is.na(full$Male_Child)] <- 0\n# Show counts\ntable(full$Female_Child, full$Survived)\ntable(full$Male_Child, full$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f58e49a2190c2b75ac422499c92a4948c1530ec8"},"cell_type":"code","source":"# Adding Mother variable\nfull$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n\n# Show counts\ntable(full$Mother, full$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7c932274f0da88c43191c978e8d4a2a148636863"},"cell_type":"code","source":"# Finish by factorizing our two new factor variables\nfull$Female_Child  <- factor(full$Female_Child)\nfull$Male_Child  <- factor(full$Male_Child)\nfull$Mother <- factor(full$Mother)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f231cf31184c0a219e36b54ea802d348ca1042d4"},"cell_type":"code","source":"full$Name_length <- nchar(full$Name)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"03e5cf025a3a919273cc9088a1c33dc24a223fe5"},"cell_type":"code","source":"full  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"37920525d36910ccf48d7d77aabf7d2d38c60c55"},"cell_type":"code","source":"str(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6ef28ac1a8e0be84878e38dc534b2036650d568c"},"cell_type":"code","source":"# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ae8031998b3cc2b12c2b765c0363c0d21b007beb"},"cell_type":"code","source":"# Set a random seed\nset.seed(754)\ntrain$Title <- as.factor(train$Title)\n# Build the model (note: not all possible variables are used)\nrf_model <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch  +\n                                            Fare + Embarked + Title + Name_length + \n                                            FsizeD + Mother + Closed_boat + Female_Child + Male_Child,\n                                            data = train)\n\n# Show model error\nplot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"db581b3abfab1cbcdee5348d4edae2e665d1733c"},"cell_type":"code","source":"# Get importance\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e9246c4c800b7a335f14717d5978239c9c5b0027"},"cell_type":"code","source":"test$Title <- as.factor(test$Title)\n\n# Predict using the test set\nprediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b20412204cbdf608b0b70b851b01ef3fb7482569"},"cell_type":"code","source":"solution  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"54a91d8e2009219259e29b99030f2dc99ebe0827"},"cell_type":"code","source":"# Write the solution to file\nwrite.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3cc7f4e21211e9d4fe34b074cb0ccf6648ea635d"},"cell_type":"code","source":"family_idx <- 0\nticket_based_family_id <- plyr::ddply(full, .(Ticket), function(rows){\n    family_idx <<- family_idx + 1\n    return(data.frame(family_id = paste0(\"TICKET_\",family_idx)))\n})","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7389cbf3f83635d753126c0036a1f03cc184e4f8"},"cell_type":"code","source":"full <- adply(full, 1, function(row){\n    family_id <- NA\n    if(!is.na(row$Ticket)){\n        family_id <- subset(ticket_based_family_id,\n                           Ticket == row$Ticket)$family_id\n    }\n    return(data.frame(family_id = family_id))\n})","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"121ab8e37f6f1a77f90e81770e5c4f4b517b5c86"},"cell_type":"code","source":"full  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1e67838c633e5b8302a1c42e7be865d971d6d68e"},"cell_type":"code","source":"full <- plyr::ddply(full,\n             .(family_id),\n             function(rows){\n                 rows$avg_prob <- sum(rows$Survived,na.rm=TRUE)/length(!is.na(rows$Survived))\n                 return(rows)\n             })","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"74942e0f957710781302c84ce07a79b9ddd5aea3"},"cell_type":"code","source":"full  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8cc0533eeb6d2f003150a4dedd80bf3e4db67b42"},"cell_type":"code","source":"# Split the data back into a train set and a test set\nfull  <- full  %>% arrange(PassengerId)\ntrain <- full[1:891,]\ntest <- full[892:1309,]\n\ntrain$Title <- as.factor(train$Title)\ntest$Title <- as.factor(test$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"929b0d5f0770694818f6610e1ffd296d37b036c3"},"cell_type":"code","source":"apply(train,2,function(x) sum(is.na(x)))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c9d989f4163d87202eb878097fce5c2e0424ae06"},"cell_type":"code","source":"# Set a random seed\nset.seed(754)\n\n# Build the model (note: not all possible variables are used)\nrf_model1 <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age +  \n                                            Fare + Embarked + Title + Name_length + avg_prob + \n                                            Mother + Closed_boat + Female_Child + Male_Child,\n                                            data = train)\n\n# Show model error\nplot(rf_model1, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model1$err.rate), col=1:3, fill=1:3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7399909b51af12bbe7e3719d9d14109ffd28b85f"},"cell_type":"code","source":"# Get importance\nimportance    <- importance(rf_model1)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"398df571c1bf01add4cc01fc1645d6813de4e6e7"},"cell_type":"code","source":"test$Title <- as.factor(test$Title)\n\n# Predict using the test set\nprediction <- predict(rf_model1, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"18144f063567dbf3f29e12bc8ef18470731a3bd3"},"cell_type":"code","source":"# Write the solution to file\nwrite.csv(solution, file = 'rf_mod_Solution2.csv', row.names = F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c2b150e7699887ecc4fe0563fd163668cef8fb49"},"cell_type":"code","source":"prediction1 <- predict(rf_model1, test)\nprediction0 <- predict(rf_model, test)\ntable(prediction0,prediction1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c7f9111ac454ba5ea0599bd3c5ae5edcb5e78b89"},"cell_type":"code","source":"full  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4cf26febe3dc74556753f3041c0067ca4cf7b183"},"cell_type":"code","source":"# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]\n\ntrain$Title <- as.factor(train$Title)\ntest$Title <- as.factor(test$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e696ffc3025d262408378a7cb15c2a63553b7532"},"cell_type":"code","source":"set.seed(43)\nrand <- sample(1:nrow(train), 0.9*nrow(train))\n\ntrain_y <- train[rand,2]; valid_y <- train[-rand,2];\ntrain_x <- train[rand,-c(1,2)];  valid_x <- train[-rand,-c(1,2)]; ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"00325a4cfaa56547a6ce4c47f365783343401b55","_kg_hide-output":true},"cell_type":"code","source":"dval <- xgb.DMatrix(data = data.matrix(valid_x), label = valid_y)\ndtrain <- xgb.DMatrix(data = data.matrix(train_x), label = train_y)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"98f2030946b35243725900e63ba97a344a1a09f1"},"cell_type":"code","source":"p <- list(objective = \"binary:logistic\",\n                 booster = \"gbtree\",\n                # eval.metric = \"f1\",\n                 nthread = 2,\n                 eta = 0.05,\n                 max_depth = 7,\n                 gamma = 0.9,\n                 #subsample = 0.8,\n                 #colsample_bytree = 0.8,\n                 scale_pos_weight = 50,\n                 nrounds = 1000)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ebc35ad2e34ecf725580df819ecc5eb3a38effb7"},"cell_type":"code","source":"myxgb_model <- xgb.train(params = p, data = dtrain, p$nrounds, list(val = dval), print_every_n = 20, early_stopping_rounds = 50)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"81c1088142294a3940de2066d4c26050442e744b"},"cell_type":"code","source":"xgb.importance(colnames(train), model=myxgb_model) %>% \n  xgb.plot.importance(top_n = 10)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1a1968f44ad589ef9c68c9221352aba12b006957"},"cell_type":"code","source":"PassengerId <- test$PassengerId\ndtest  <- test %>% select(-c(PassengerId,Survived))\ndtest <- xgb.DMatrix(data.matrix(dtest))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2a150c651ef45727d4f8cf0f19d6efe5cbcdf941"},"cell_type":"code","source":"prediction <- predict(myxgb_model, dtest)\nprediction","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b110a1102bda0cc0ccdcf57f077672c21dc165c9"},"cell_type":"code","source":"# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution1 <- data.frame(PassengerID = test$PassengerId, Survived = prediction)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"deeab5f499302d60c6ab655fc1688c5465076475"},"cell_type":"code","source":"solution1  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"66ddab485909214b6d68ea78034093e842830f61"},"cell_type":"code","source":"solution1$Survived <- ifelse(solution1$Survived>=0.5,1,0)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3a9686da3b5d6c3733214630d90fbf44971dff80"},"cell_type":"code","source":"prediction1 <- predict(myxgb_model, dtest)\nprediction1 <- ifelse(prediction1>=0.5,1,0)\nprediction <- predict(rf_model1, test)\ntable(prediction1,prediction)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"881357254d841996904856ffec5c3ef1dcf77d5d"},"cell_type":"code","source":"prediction","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b71e3fcbf81168af2d17fb595c268366a52944b5"},"cell_type":"code","source":"solution1 %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f3c4d2f50111851cef472d71ce57ce1730ae2aaf"},"cell_type":"code","source":"# Write the solution to file\nwrite.csv(solution1, file = 'xgboost_mod_Solution.csv', row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}