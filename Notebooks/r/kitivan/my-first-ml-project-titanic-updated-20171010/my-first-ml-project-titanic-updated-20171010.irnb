{"cells": [{"cell_type": "markdown", "source": ["1. Introduction\n", "2. File import and data check\n", "3. Data imputation\n", "4. Data Exploration and Variable Selection\n", "5. Classifcation modelling and prediction\n", "\n", "\n", "# 1. Introduction\n", "\n", "I am new to mahcine learning and this is my first try on Kaggle. In this practice, I will try to have some data visualisation and several machine learing algorithm for prediction. The mojority voting of different learning results will be used in the final testset prediction. \n", "Any feedback are welcome!\n", "\n", "# 2. Data Exploration and Variable Selection"], "metadata": {"_cell_guid": "2ab22c87-2968-42b5-82ea-d08bb9917b4a", "_uuid": "f430368fc71761ad717e8f93beece07779a7eba1"}}, {"source": ["#load the library\n", "library(plyr)\n", "library(dplyr)\n", "library(ggplot2)\n", "library(caret)\n", "library(gridExtra)\n", "library(modeest)\n", "library(randomForest)\n", "library(fastAdaboost)\n", "library(kernlab)\n", "library(xgboost)\n", "#File input\n", "trainset <- read.csv('../input/train.csv', na.strings=c(\"\", \"NA\"), sep=\",\", header=TRUE, stringsAsFactors = FALSE)\n", "testset  <- read.csv('../input/test.csv',  na.strings=c(\"\", \"NA\"), sep=\",\", header=TRUE, stringsAsFactors = FALSE)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "cb9b608d-2e09-4c82-a18e-17cb082ee111", "_uuid": "766a9c5cb2c652a53800999fc7e6a058b78a816a"}, "outputs": []}, {"cell_type": "markdown", "source": ["Before starting to do the exploratory analysis, let's explore the data and see any missing value in it."], "metadata": {"_cell_guid": "89a0e585-1cb1-41dd-8984-c75367b0b740", "_uuid": "5e07456f3f5aeb82b25b09eef301d31c487e7ebd"}}, {"source": ["str(trainset)\n", "str(testset)\n", "\n", "head(trainset)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "322d4f32-35ec-4fd5-998b-9a57dbc7b4df", "_uuid": "bb1eb40c1da8e38b5135207c6d3cfcb025747f44"}, "outputs": []}, {"cell_type": "markdown", "source": ["There are 891 obs. & 12 variables in trainset and 418 obs. &  11 variables in testset.\n", "\n", "Let's check for the missing value in each column.\n"], "metadata": {"_cell_guid": "5121b274-c925-4127-9483-ee9c54001dd8", "_uuid": "845f8e8df8034e037d5495b2f82a8d165357a288"}}, {"source": ["sapply(trainset, function (x) sum(is.na(x)))\n", "sapply(testset, function (x) sum(is.na(x)))"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "b73f059a-0388-4d12-8395-8aa8593ef953", "_uuid": "097feb2e0b075d35cc55066cd61958b0a522f1ec"}, "outputs": []}, {"cell_type": "markdown", "source": ["There are quite a lot of missing values. Let's see if any imputation can be done.\n", "\n", "# 3. Data imputation\n", "# Imputation on variable Fare\n", "\n", "The Fare cost is usually related to location of embarkation and Pclass. Therefore, both variables will be used for predicting Fare cost. Firstly, we combine the trainset and dataset with these 3 variables and check the the passenger Pclass and location of embarkation..\n"], "metadata": {"_cell_guid": "4eef1781-6941-4e2f-85c9-dd6f4ba007da", "_uuid": "2e79066da573b5ab2518d23603a4758f8e2ca609"}}, {"source": ["#check for the passenger Pclass and location of embarkation\n", "testset[which(is.na(testset$Fare)),]\n", "\n", "#Combine dataset with column Pclass, Embarked and Fare\n", "Fare_impute_df <- data.frame(Pclass = c(trainset$Pclass, testset$Pclass), Embarked = c(trainset$Embarked, testset$Embarked), Fare = c(trainset$Fare, testset$Fare))\n"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "47e0a7a4-c795-4b48-8f59-e979353febda", "_uuid": "ded7bfa307372b292d5ee82286419787a23f08fa"}, "outputs": []}, {"cell_type": "markdown", "source": ["Pclass = 3 and Embarked = S are selected and the fare distribution will be studied..\n"], "metadata": {"_cell_guid": "82f323ef-3e15-4328-b76a-e0ea2e3a0722", "_uuid": "67da8808f04fd6914c3edfe73d943c5a3355ba9f"}}, {"source": ["Fare_impute_df %>%\n", "  filter (Pclass == 3 & Embarked == \"S\") %>%\n", "  ggplot (aes(x=Fare)) +\n", "  geom_histogram()"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "4b595f53-4c83-49de-8186-436b98a523ca", "_uuid": "b6715c7b53e6a671bdf7bebda86d21e581a6f7e9"}, "outputs": []}, {"cell_type": "markdown", "source": ["The distribution is rightly skewed and therefore the median will be used for imputation."], "metadata": {"_cell_guid": "50b94be3-5821-4a26-8e0d-e6c3a48e7b98", "_uuid": "772d348e711a8e4107a1a5a0f1ce0985650da64d"}}, {"source": ["testset$Fare[153] <- median(Fare_impute_df$Fare[Fare_impute_df$Pclass == 3 & Fare_impute_df$Embarked == \"S\"], na.rm=TRUE)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "36cf8e4d-d7b8-440e-8a34-7d7aa5d56985", "_uuid": "e0765b770dd0b46d4010be04a888aaf0d0e30b07"}, "outputs": []}, {"cell_type": "markdown", "source": ["# Imputation on variable embarked\n", "\n", "Same as above, the fare and the Pclass will be used to impute the missing value of variable embarked."], "metadata": {"_cell_guid": "849429a5-d905-400d-b881-0fb6ab2eb121", "_uuid": "ebb97dfa0db57ce4fb80ab70c5dbefb7e9fb58b6"}}, {"source": ["trainset[which(is.na(trainset$Embarked)),]\n", "\n", "embarked_impute_df <- data.frame(Pclass = c(trainset$Pclass, testset$Pclass), Embarked = as.factor(c(trainset$Embarked, testset$Embarked)), Fare = c(trainset$Fare, testset$Fare))"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "5ba4cae3-fb60-42ac-87c6-b60ac9741b62", "_uuid": "e53497073d790f38555df11f3486ef36bfe45b47"}, "outputs": []}, {"cell_type": "markdown", "source": ["Both passenger are Pclass 1 and Fare 80.\n", "Let's check the port of embark when pclass = 1 and fare is around 75 - 85. Then the most frequent class will be used for imputation.\n"], "metadata": {"_cell_guid": "03c38cca-d2a2-48de-8c5c-e7a82666a4b2", "_uuid": "cb87c3abadeef4c9211bd3f548a7df3c0541a9dc"}}, {"source": ["embarked_impute_df %>%\n", "  na.omit() %>%\n", "  filter (Pclass == 1 & Fare >= 75 & Fare <= 85) %>%\n", "  group_by(Embarked) %>%\n", "  summarise(count = n())"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "f87e0a2d-fb96-4c00-893a-907824908660", "_uuid": "4935b45dfbb23db1856d157a6bbb89d38db4f9c5"}, "outputs": []}, {"cell_type": "markdown", "source": ["Therefore, the missing value will be imputed by C"], "metadata": {"_cell_guid": "b568b99e-5149-48b8-9755-2c8d36ed9da9", "_uuid": "69812d5270e1947ddb90668c554abd37adb595af"}}, {"source": ["trainset$Embarked[c(62,830)] = \"C\""], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "04d0ff3d-3768-42c7-8da5-da8f20dd4ca0", "_uuid": "730f0dacf0a4cc30803647529d1734d7fa466817"}, "outputs": []}, {"cell_type": "markdown", "source": ["# Imputation on variable age\n", "\n", "There are more than 20% of observation missing in age variable and other variables are not quite related to age. We will first investigate any relationship between survival rate and age variable. It may be dropped if no significant iteraction detected.\n", "\n", "By intuition, the younger kids should have higher chance to survive. We will try to divide the age in to group with interval 20, 10 and 5 and study any different in survival rate among different age group."], "metadata": {"_cell_guid": "e302fd05-a390-4309-91ed-f671a2361557", "_uuid": "cadb9fc99fb2a03a4abc246d1f137d5291a61fff"}}, {"source": ["Age_impute <- data.frame(Survived = trainset$Survived, Age = trainset$Age)\n", "Age_impute$Agegroup1<-cut(Age_impute$Age, seq(0,80,20), labels=c(1:4))\n", "Age_impute$Agegroup2<-cut(Age_impute$Age, seq(0,80,10), labels=c(1:8))\n", "Age_impute$Agegroup3<-cut(Age_impute$Age, seq(0,80,5), labels=c(1:16))\n", "\n", "#Plot the graph between survival and age group\n", "Agegroup1 <- ggplot(Age_impute, aes(x=factor(Agegroup1), fill=factor(Survived))) +\n", "  geom_bar(position = \"fill\")\n", "\n", "Agegroup2 <- ggplot(Age_impute, aes(x=factor(Agegroup2), fill=factor(Survived))) +\n", "  geom_bar(position = \"fill\")\n", "\n", "Agegroup3 <- ggplot(Age_impute, aes(x=factor(Agegroup3), fill=factor(Survived))) +\n", "  geom_bar(position = \"fill\")\n", "\n", "Agegroup1\n", "Agegroup2\n", "Agegroup3"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "668ef0f9-95a3-4259-a900-afa30d082f31", "_uuid": "758f2e8675a4c2b4fb2e06f47309ccd46c49e233"}, "outputs": []}, {"cell_type": "markdown", "source": ["From above plot, the survival rate seem different from age 0-15, 16-60 and 61 or above.\n", "Therefore the age group will further transform to 3 classes according above range and combine 4 graph to study the differences.\n", "\n", "\n"], "metadata": {"_cell_guid": "67c6750a-89b3-469c-942b-1c3e4c097ccb", "_uuid": "71b091e5f59231a3ec4d98bb5bfc82cc53d97257"}}, {"source": ["Age_impute<-Age_impute %>%\n", "  mutate(Agegroup4 = ifelse(Age<=15,1,\n", "                            ifelse(15<Age & Age<=60,2,\n", "                                   ifelse(Age>60,3, \"NA\"))))\n", "\n", "Agegroup4 <- ggplot(Age_impute, aes(x=factor(Agegroup4), fill=factor(Survived))) +\n", "  geom_bar(position = \"fill\")\n", "\n", "#COmbine 4 graph together on one page\n", "grid.arrange(Agegroup1, Agegroup2, Agegroup3, Agegroup4, nrow=2, ncol=2)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "e4eca1d7-0780-4619-bd23-e7b36139eb48", "_uuid": "c6a8732d769598897bece3b56a74daab9516def4"}, "outputs": []}, {"cell_type": "markdown", "source": ["It seems that the agegroup 4 shows the significantly different in survival rate. The chisq test will be used for verifying the best one by the lowest chi square statistic p-value."], "metadata": {"_cell_guid": "72e1a4c1-cff5-4683-985a-28847004869d", "_uuid": "2804806c3e96da62c7d9e03a7873d225465e56c0"}}, {"source": ["chisq.test(table(Age_impute$Survived, Age_impute$Agegroup1, useNA = \"ifany\"))\n", "chisq.test(table(Age_impute$Survived, Age_impute$Agegroup2, useNA = \"ifany\"))\n", "chisq.test(table(Age_impute$Survived, Age_impute$Agegroup3, useNA = \"ifany\"))\n", "chisq.test(table(Age_impute$Survived, Age_impute$Agegroup4, useNA = \"ifany\"))"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "11d4a326-1a96-43e6-931a-c157bdc52f82", "_uuid": "d0d6a142ea4aa3f4c50979b20970c422702474f6"}, "outputs": []}, {"cell_type": "markdown", "source": ["There are some cells in the contingency table which expected value is less than 5. Therefore, there is warning message in R output. The fisher exact test should be used in this case, but I will just leave it for time saving.\n", "\n", "Agegroup 4 will be used in both trainset and testset."], "metadata": {"_cell_guid": "2e0c26e2-3d3f-4908-b7af-12fef1e20fbe", "_uuid": "d7ba738f312bf7e91e3b8d3385992da5ff11de3a"}}, {"source": ["trainset<-trainset %>%\n", "  mutate(Agegroup = ifelse(Age<=15,\"kids\",ifelse(15<Age & Age<=60,\"adults\",ifelse(Age>60,\"elderly\", \"NA\")))) \n", "testset<-testset %>%\n", "  mutate(Agegroup = ifelse(Age<=15,\"kids\",ifelse(15<Age & Age<=60,\"adults\",ifelse(Age>60,\"elderly\", \"NA\")))) "], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "539f4411-8b21-402b-ba38-070bfa9c2f29", "_uuid": "4e9705c21b34f0a667f91f386dc9e65e58a12c0a"}, "outputs": []}, {"cell_type": "markdown", "source": ["For the cabin, this column has a lot of missing values and it should not be quite closely related to the response variable. Therefore it is dropped.\n"], "metadata": {"_cell_guid": "825da016-4613-4c4e-a709-85014573f0cc", "_uuid": "055f2b9fc87f97d389afaa6d9cf82f9a282b3d3d"}}, {"source": ["trainset$Cabin <- NULL\n", "testset$Cabin <- NULL"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "5c1df850-1e00-45fe-a97d-0802ee29e54c", "_uuid": "ba90e9f171b8f3a3da12c4899e092a687b4028d8"}, "outputs": []}, {"cell_type": "markdown", "source": ["# 4. Exploratory analysis & variable selection"], "metadata": {"_cell_guid": "cf77830d-062e-4329-9795-04fed71ce35e", "_uuid": "4cbab298002268da8e475b87cc34e3c30d928419"}}, {"source": ["#Response variable distribution. \n", "#Although it is not 50:50 balance, it is not too biased therefore no oversampling needed.\n", "ggplot(trainset, aes(x=Survived)) +\n", "  geom_bar()"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "c911e341-864c-4e4f-b534-9896775d46d4", "_uuid": "272da9e771b179a2f276c3ca31aa61081e5cfdb8"}, "outputs": []}, {"source": ["#Distribution of response variable conditional to Pclass. \n", "#Pclass 1 has highest survival rate and Pclass 3 has lowest survival rate.\n", "ggplot(trainset, aes(x=as.factor(Survived), fill=as.factor(Pclass))) +\n", "  geom_bar(position=\"fill\")"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "9b035746-1d68-44fd-b942-1326e4e77cff", "_uuid": "a575fc3a285bb0a1dc88f9e8f29315a825d1b605"}, "outputs": []}, {"source": ["#Distribution of response variable conditional to Sex\n", "#Female has higher survival rate then Male. \n", "ggplot(trainset, aes(x=as.factor(Survived), fill=as.factor(Sex))) +\n", "  geom_bar(position=\"fill\")"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "830f7e37-1d1a-438b-bce7-3d3a5a8f84dc", "_uuid": "3adeed7dafeb918a6a5c3e56b252a67a0f2ee988"}, "outputs": []}, {"source": ["#Distribution of age group conditional to response variable\n", "#We have investigated it in above imputation.\n", "ggplot(trainset, aes(x=as.factor(Agegroup), fill=as.factor(Survived))) +\n", "  geom_bar(position=\"fill\")"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "0e4e58d5-af03-4fc3-963a-a263da4313ee", "_uuid": "e6fd29c33dd1f952809d1b095da9eeff17c0d8fa"}, "outputs": []}, {"source": ["#Distribution of Fare conditional to response variable\n", "#Higher the fare price, higher survival rate.\n", "summary(trainset$Fare)\n", "ggplot(trainset, aes(fill=as.factor(Survived), x=Fare)) +\n", "  geom_histogram(position = \"dodge\")"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "0b275948-f1f1-4040-b902-1339435148d6", "_uuid": "4330f2d40a54e13d04024358c448e5c15e83ed09"}, "outputs": []}, {"source": ["#Distribution of Embarked conditional to response variable\n", "#It is interesting that there are different survival rates according to port of Embarkation.\n", "ggplot(trainset, aes(x=as.factor(Embarked), fill=as.factor(Survived))) +\n", "  geom_bar(position=\"fill\")"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "ce9795ee-43c1-482f-91e0-026d9fc0ec82", "_uuid": "4a8700bc579067eaafb55ba01d290093261b6ea6"}, "outputs": []}, {"source": ["#Distribution of SibSp & Parch conditional to response variable\n", "#We could see the passenger with no SibSP or Parch has less survival rate.\n", "ggplot(trainset, aes(fill=as.factor(Survived), x=SibSp)) +\n", "  geom_histogram(position = \"dodge\", binwidth = 1)\n", "\n", "ggplot(trainset, aes(fill=as.factor(Survived), x=Parch)) +\n", "  geom_histogram(position = \"dodge\", binwidth = 1)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "7bdf03af-fce1-4a60-95e5-417f3e9935ab", "_uuid": "0d3c391e8caab90a9323d8ca80691bcb9042b333"}, "outputs": []}, {"source": ["#Create a new column company. 0 is alone, 1 is with company\n", "trainset<-trainset %>%\n", "  mutate(company = ifelse(SibSp+Parch>=1,1,0))\n", "ggplot(trainset, aes(fill=as.factor(Survived), x=as.factor(company))) +\n", "  geom_bar(position = \"fill\")"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "306b4168-6393-47db-88c1-31a520e5b169", "_uuid": "cab1b3beed79ad95afbc9a3f8d3d2b796cd3e6fb"}, "outputs": []}, {"source": ["#Update the testset with the same transformation\n", "testset<-testset %>%\n", "  mutate(company = ifelse(SibSp+Parch>=1,1,0))"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "b2f5c969-f844-4460-af8a-2beb1b068d93", "_uuid": "55511cc96806e9ad626ca2059439c8410a6a5fb7"}, "outputs": []}, {"cell_type": "markdown", "source": ["# 5. Classifcation modelling and prediction\n", "\n", "5 models will be used and use the majority voting to predict the results.\n", "\n", "1. Random forest\n", "2. Logistic Regression\n", "3. Adaboost\n", "4. SVM with linear kernel\n", "5. Gradient boosting"], "metadata": {"_cell_guid": "cfabf6c0-f1fc-4c4e-a053-9165dc25315c", "_uuid": "a9d9cd6e76b2c542bef24d8f705503e2c77258de"}}, {"source": ["#Convert the categorical variable to Factor before training.\n", "trainset$Survived <- factor(trainset$Survived)\n", "trainset$Pclass <- factor(trainset$Pclass)\n", "trainset$Sex <- factor(trainset$Sex)\n", "trainset$Embarked <- factor(trainset$Embarked)\n", "trainset$Agegroup <- factor(trainset$Embarked, exclude=NULL)\n", "trainset$company <- factor(trainset$company)\n", "\n", "#Modelling\n", "set.seed(42)\n", "#rf_model <- train(Survived ~ Pclass + Sex + Fare + Embarked + Agegroup + company,\n", "#                  data=trainset,\n", "#                  method = \"rf\",\n", "#                  trControl=trainControl(method=\"cv\", number=5))\n", "\n", "\n", "#glm_model <- train(Survived ~ Pclass + Sex + Fare + Embarked + Agegroup + company,\n", "#                  data=trainset,\n", "#                  method = \"glmnet\",\n", "#                  trControl=trainControl(method=\"cv\", number=5))\n", "\n", "#adaboost_model <- train(Survived ~ Pclass + Sex + Fare + Embarked + Agegroup + company,\n", "#                  data=trainset,\n", "#                  method = \"adaboost\",\n", "#                  trControl=trainControl(method=\"cv\", number=5))\n", "\n", "#svmLinear_model <- train(Survived ~ Pclass + Sex + Fare + Embarked + Agegroup + company,\n", "#                  data=trainset,\n", "#                  method = \"svmLinear\",\n", "#                  trControl=trainControl(method=\"cv\", number=5))\n", "\n", "#xgbTree_model <- train(Survived ~ Pclass + Sex + Fare + Embarked + Agegroup + company,\n", "#                  data=trainset,\n", "#                  method = \"xgbTree\",\n", "#                  trControl=trainControl(method=\"cv\", number=5))\n", "\n", "#rf_perdict <- predict(rf_model, data = trainset)\n", "#glm_perdict <- predict(glm_model, data = trainset)\n", "#adaboost_perdict <- predict(adaboost_model, data = trainset)\n", "#svmLinear_perdict <- predict(svmLinear_model, data = trainset)\n", "#xgbTree_perdict <- predict(xgbTree_model, data = trainset)\n", "\n", "#table(trainset$Survived, rf_perdict)\n", "#table(trainset$Survived, glm_perdict)\n", "#table(trainset$Survived, adaboost_perdict)\n", "#table(trainset$Survived, svmLinear_perdict)\n", "#table(trainset$Survived, xgbTree_perdict)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "a4db2cf4-05bd-484f-a695-4ac92f0a2361", "_uuid": "a6eec8f72bd0f30ada18663730352a2feabaf205"}, "outputs": []}, {"source": ["#Since it takes long time to run above script here, i copy the results from my notebook.\n", "\n", "#table(trainset$Survived, rf_perdict)\n", "#   rf_perdict\n", "#      0   1\n", "#  0 528  21\n", "#  1  56 286\n", "#table(trainset$Survived, rf_perdict)\n", "#   rf_perdict\n", "#      0   1\n", "#  0 528  21\n", "#  1  56 286\n", "#table(trainset$Survived, glm_perdict)\n", "#   glm_perdict\n", "#      0   1\n", "#  0 468  81\n", "#  1 109 233\n", "#table(trainset$Survived, adaboost_perdict)\n", "#   adaboost_perdict\n", "#      0   1\n", "#  0 523  26\n", "#  1  51 291\n", "#table(trainset$Survived, svmLinear_perdict)\n", "#   svmLinear_perdict\n", "#      0   1\n", "#  0 468  81\n", "#  1 109 233\n", "#table(trainset$Survived, xgbTree_perdict)\n", "#   xgbTree_perdict\n", "#      0   1\n", "#  0 513  36\n", "#  1  82 260"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "11632bf8-1ee7-46fe-860a-08f31518712b", "_uuid": "3bcf3e119d201127775443225e0563359fd55a91"}, "outputs": []}, {"cell_type": "markdown", "source": ["Since glm and svm linear kernel did not work well,  they will be taken out. The majority voting of remaining 3 models will be used in the testset prediction."], "metadata": {"_cell_guid": "40727bdf-f0bb-4d1f-a57a-aa97fca65ed2", "_uuid": "d5864f1721c4d9332c9bd3513dc3e680c0fec013"}}, {"source": ["#Testset prediction\n", "#Convert the categorical variable to Factor before prediction\n", "testset$Pclass <- factor(testset$Pclass)\n", "testset$Sex <- factor(testset$Sex)\n", "testset$Embarked <- factor(testset$Embarked)\n", "testset$Agegroup <- factor(testset$Embarked, exclude=NULL)\n", "testset$company <- factor(testset$company)\n", "\n", "#prediction\n", "#rf_perdict_testset <- predict(rf_model, newdata = testset)\n", "#adaboost_perdict_testset <- predict(adaboost_model, newdata = testset)\n", "#xgbTree_perdict_testset <- predict(xgbTree_model, newdata = testset)\n", "\n", "#majority voting\n", "#result_combine_test <- data.frame(rf_perdict_testset, adaboost_perdict_testset, xgbTree_perdict_testset)\n", "#majority_test <- apply(result_combine_test, 1, mfv)\n", "\n", "#Submission\n", "#submission <- data.frame(PassengerId = testset$PassengerId, Survived = majority_test)\n", "#write.csv(submission, file=\"submission_20170924.csv\", row.names = FALSE)"], "cell_type": "code", "execution_count": null, "metadata": {"_cell_guid": "6b5eea36-dd82-4d57-a06a-4565f7fe8add", "_uuid": "cdca8403f2a7787718a7bf17797a3c907673583e"}, "outputs": []}, {"cell_type": "markdown", "source": ["Thank you for taking the time for my first data mining project on Kaagle. I look forward to working on more different project. All comments are welcome!"], "metadata": {"_cell_guid": "5d45a204-362e-4716-8c91-d027d8ea1888", "_uuid": "219c88cbc842efd8bc7cb8877a83a4f6da0de1e7"}}], "nbformat": 4, "nbformat_minor": 1, "metadata": {"language_info": {"name": "R", "file_extension": ".r", "mimetype": "text/x-r-source", "pygments_lexer": "r", "version": "3.4.1", "codemirror_mode": "r"}, "kernelspec": {"name": "ir", "language": "R", "display_name": "R"}}}