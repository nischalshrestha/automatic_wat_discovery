{"nbformat": 4, "nbformat_minor": 1, "metadata": {"language_info": {"mimetype": "text/x-r-source", "codemirror_mode": "r", "pygments_lexer": "r", "file_extension": ".r", "version": "3.4.1", "name": "R"}, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "cells": [{"source": ["## Titanic Classification Problem ##\n", "\n", "The aim of this kernel is to explore the titanic data set and the implement different classification methods on the training data. Each method would then be evaluated and the most accurate will be selected for determining which passenger survives the Titanic encounter on the test data.  "], "cell_type": "markdown", "metadata": {"_cell_guid": "6871992c-e368-4a11-a34c-d2516563fc33", "_execution_state": "idle", "_uuid": "85aa3bac3d838264d996d747616be587738cc4ac"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["##Loading the required libraries and data sets. \n", "library(tidyverse) #visualization and data wrangling\n", "library(Amelia) #Visualize N/As\n", "library(randomForest) #random forest models\n", "library(caTools) #train/test spilt\n", "\n", "train <- read.csv(\"../input/train.csv\")\n", "test <- read.csv(\"../input/test.csv\")"], "metadata": {"_cell_guid": "51aba4e3-25be-495e-8ad8-9cc9dd82ecd7", "_execution_state": "idle", "_uuid": "841bae9947ef4c7a53f95c16c08bf5b2bd9382ad"}}, {"source": ["## 1. Data Exploration and Visualization \n", "\n", "Making some graphs of the training data - dealing with missing data as well"], "cell_type": "markdown", "metadata": {"_cell_guid": "a2cd9cd0-b55c-4e5a-bffb-1e2d2e3fa862", "_execution_state": "idle", "_uuid": "26fd3c7be51944d006aaca0932565ddc54fe4489"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["str(train)\n", "summary(train)"], "metadata": {"_cell_guid": "d3719c13-7ccf-42f0-ba0a-f7d67f432a01", "_execution_state": "idle", "_uuid": "c9564c450d7bfa532575d9bfec3d21209f8a11ee"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["any(is.na(train)) #Are there NA values?\n", "missmap(train, legend = FALSE)"], "metadata": {"_cell_guid": "1a481590-ac44-4ba4-8b03-eb749d843193", "_execution_state": "idle", "_uuid": "830e7eef280d964017ffe20316b47c0ffed2be88"}}, {"source": ["From the Missingness map it is clear that most of the N/A values comes from the age column. Since there are a lot of N/As it is not good to simply eliminate these values. It is therefore appropriate to add in values based upon the average age. However, we can be a bit more nuanced about this: Let's see if there is an age difference between the ticket classes"], "cell_type": "markdown", "metadata": {"_cell_guid": "c07945aa-1fe2-4d9a-8641-190a3cdd4fd3", "_execution_state": "idle", "_uuid": "dbcc8094cb0e6841f9e0c9473f3ab248d0e66cfd"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["ggplot(train, aes(x = as.factor(Pclass), y = Age)) + geom_boxplot(aes(fill = as.factor(Pclass))) + \n", "                                                    labs(title = \"Age According to Ticket Classes\",\n", "                                                           x = \"Ticket Classes\", y = \"Age\")"], "metadata": {"_cell_guid": "91149d8c-7280-4a9a-ba57-728e1d2073f6", "_execution_state": "idle", "_uuid": "e5cda500e699a58a31844d26b7120a38d925ddde"}}, {"source": ["Visually speaking, there are significant differences between the distribution of age between ticket classes where by first class passengers are much older than second and third class passengers. We can run an ANOVA to see if there are significant differences in age distribution between the three ticket classes."], "cell_type": "markdown", "metadata": {"_cell_guid": "b963b302-6669-40d8-bc8c-31d9c04d3972", "_uuid": "6a6e2452d09918fec3d9a2e67d9bb43bede78f50"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["anovamod <- lm(Age ~ as.factor(Pclass), data = train) #model for ANOVA\n", "anova(anovamod) #presenting the ANOVA table\n", "plot(anovamod) #plotting required graphs such as residuals vs fitted and QQ-plots"], "metadata": {"_cell_guid": "3558117d-3f0d-4c20-87ae-a869c3ec5a42", "_uuid": "f6fe5a406ab81c784b1d0c926ac6dfd08c2ebe6a"}}, {"source": ["We can see that our data both fits the assumptions of ANOVA, as well as having significant differences in Age distribution between the three ticket classes. This means that we can certainly fill in the gaps we have in our age data by the average age of each ticket class. \n", "\n", "Next then we should find the averages of the age of each of the ticket classes and then fill them into the missing age data with their respective ticket classes. "], "cell_type": "markdown", "metadata": {"_cell_guid": "cfc4eb29-67f7-4876-b8dd-272175d7c5cc", "_uuid": "35ade7fe3a994150839aca2c225ce9d1e844e659"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["first_class <- filter(train, Pclass == 1)\n", "floor(mean(first_class[,6], na.rm = T))\n", "second_class <- filter(train, Pclass == 2)\n", "floor(mean(second_class[,6], na.rm = T))\n", "third_class <- filter(train, Pclass == 3)\n", "floor(mean(third_class[,6], na.rm = T))\n", "#results came out to be 38, 29 and 25\n", "\n", "for (i in (1:nrow(train))) {\n", "    if (is.na(train[i,6]) == TRUE){\n", "        if (train[i,3] == 1){\n", "            train[i,6] <- 38\n", "        } else if (train[i,3] == 2){\n", "            train[i,6] <- 29\n", "        } else if (train[i,3] == 3){\n", "            train[i,6] <- 25\n", "        } \n", "    } else {\n", "        train[i,6] <- train[i,6]\n", "    }\n", "}"], "metadata": {"_cell_guid": "191e2ce7-78f3-4f66-a03f-02ee1902b375", "_uuid": "4546a30eaac6b38e1b62b91c9289f0697525e21c"}}, {"source": ["Now we can redo what we did to check for NA Values before. "], "cell_type": "markdown", "metadata": {"_cell_guid": "a7624a55-b5e6-433d-86f9-8e79fec9bf8a", "_uuid": "4d811e6a310dc3e3b66ecc2d6b674d38d089c48f"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["missmap(train, legend = FALSE)"], "metadata": {"_cell_guid": "383c6f17-1579-4a61-9a7f-93b6e41c2db7", "_uuid": "e3689890a83a4e9e8cf458239ae03e8bc4902d34"}}, {"source": ["As we can see, the Age column no longer has missing values! Now we can start to build models that predict each passenger's survival rate! "], "cell_type": "markdown", "metadata": {"_cell_guid": "c80e0290-e2a2-4420-ac21-a73d3f53a2b8", "_uuid": "599ea624c5df1a3177a5b2325b0b3ce5f61a065d"}}, {"source": ["## 3. Model Construction and Comparison ##\n", "\n"], "cell_type": "markdown", "metadata": {"_cell_guid": "40847421-db7b-4f2c-b2c7-f7c14a5def1f", "_uuid": "b3942696569abc780b8163025db184ee0ff4546b"}}, {"source": ["Since we're not really interested in feature engineering in this kernel, we will remove the columns that don't really have a lot of bearings on our interested model. Here, we're going to split the train data into a train data for training and a train data for testing to compare two models of classification: basic logistic and random forest. Then we're going to evaluate each model using a mis-classification error standard, of which we will fit into our train data and predict using our test data. "], "cell_type": "markdown", "metadata": {"_cell_guid": "27f401e1-c858-4650-b7c6-fad9ea830141", "_uuid": "2cfdb96c9a405e2e41f430593158b76b0335dce9"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["train <- select(train, -PassengerId, -Name, -Ticket, -Cabin) \n", "set.seed(101) \n", "split <- sample.split(train$Survived, SplitRatio = 0.7) #this is from the caTools library \n", "train_training <- subset(train, split == TRUE)\n", "train_test <- subset(train, split == FALSE)"], "metadata": {"_cell_guid": "c7d64670-755c-42fc-9f2f-e4d5b836765f", "collapsed": true, "_uuid": "f84614d8bf01bf47a62a084c3daa2988aa3fe46a"}}, {"source": ["Running the logistic model. The step function helps us reduce redundant features in the model whereby the model with the lowest AIC is chosen. "], "cell_type": "markdown", "metadata": {"_cell_guid": "bf1e2477-485f-481d-a03c-715da206925a", "_uuid": "69e0f1dbc7279524ca77c5300f713d977f212d02"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["logistic_model <- glm(Survived ~.,family = binomial(link = \"logit\"), data = train_training)\n", "summary(logistic_model)\n", "step(logistic_model)"], "metadata": {"_cell_guid": "3a179918-3de9-49d5-bc09-0edd1d0579fd", "_uuid": "9ef17dc46c277ec057203d2df852e692fc8360c0"}}, {"source": ["As you can see the features selected below has the lowest AIC. Let's run a filtered model through our train_training data. "], "cell_type": "markdown", "metadata": {"_cell_guid": "8aba9bd7-fea4-4f60-a21d-32cbe2e9eae7", "_uuid": "7d5caa27924cba4274d6e4d458fc6843d0574d1c"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["logistic_model_filtered <- glm(Survived~ Pclass + Sex + Age + SibSp + Fare, family = binomial(link = \"logit\"), data = train_training)\n", "summary(logistic_model_filtered)"], "metadata": {"_cell_guid": "c0dcab1b-4afc-4754-aeb8-ad0db357953d", "_uuid": "5d160bc263659fc40d47d2e459c899c3fda6acf5"}}, {"source": ["Let's do predictions!"], "cell_type": "markdown", "metadata": {"_cell_guid": "b47282b2-29c8-4b39-b780-b94a1493de2a", "_uuid": "a9cde5be55e0d17e2e2c4b7fef66c7d0fcb17bd6"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["test_predictions <- predict(logistic_model_filtered, newdata = train_test, type = 'response')\n", "table(train_test$Survived, test_predictions > 0.5)"], "metadata": {"_cell_guid": "b907e150-1fd3-44ce-a87c-3e91c5769197", "_uuid": "979c35e04cc8beca9668ce5806f978b67fd9303e"}}, {"source": ["Now we have to calcuate the missclassification error. This is done by the mean number of times the predictions are not accurate to the true values. "], "cell_type": "markdown", "metadata": {"_cell_guid": "1bc32bd9-3207-406d-9e28-74b9688071e7", "_uuid": "bcfd65ddd2b3a810f4424b11d1e2a3aa8a980c72"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["test_predictions_results <- ifelse(test_predictions > 0.5,1,0) #converting true-false values into 1s and 0s\n", "misClasificError_logit <- mean(test_predictions_results != train_test$Survived)\n", "print(paste('Accuracy',1-misClasificError_logit)) #0.774"], "metadata": {"_cell_guid": "af4a0dcf-5d66-46e1-bb18-2b8ce7447fa3", "_uuid": "222e706d94504dc0c19d9518341cce574d11e762"}}, {"source": ["Let's fit a random forest model using the randomForest library"], "cell_type": "markdown", "metadata": {"_cell_guid": "baf41684-e2b0-4808-8f50-632cee4f6886", "_uuid": "0393e90ea8f96636afc39fcd340ae6a5ada5e7f6"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["rf_model <- randomForest(as.factor(Survived)~.,data = train_training, importance = TRUE)\n", "print(rf_model)\n", "rf_model$importance\n", "rf_model$confusion"], "metadata": {"_cell_guid": "c808ae84-b486-46e4-ad13-6394a4274385", "_uuid": "508a6525886fb2d313faf93770922cfff8d9aeee"}}, {"source": ["The confusion table looks good on the train_training data. Let's do some predictions and calculations."], "cell_type": "markdown", "metadata": {"_cell_guid": "cb1d1db5-8286-4bfe-a48f-c1e41e5e660e", "_uuid": "a76ef5464c3fc436755b14ae649a8d1ebda6985a"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["rf_test_prediction <- predict(rf_model, train_test)\n", "table(rf_test_prediction,train_test$Survived)\n", "misClasificError_rf <- mean(rf_test_prediction != train_test$Survived)\n", "print(paste('Accuracy',1-misClasificError_rf)) #~0.828"], "metadata": {"_cell_guid": "db6edd03-54d1-44a0-b2cd-01ea5903fe34", "_uuid": "8dfc905ee7f6304244771e940854775cc35ec612"}}, {"source": ["Now we should look at the test data, given that we know that the randomForest model looks better than basic logistic regression."], "cell_type": "markdown", "metadata": {"_cell_guid": "cc832da6-fe0f-4e4f-b061-976675063534", "_uuid": "bbc9d226d341b7dd677c07ea6fdf04425efeb5a2"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["missmap(test, legend = FALSE)"], "metadata": {"_cell_guid": "7c3d7179-1c61-46ec-bd09-e5086eda1393", "_uuid": "6f550fe1ba5ef9c735317946d32d51d16958b809"}}, {"source": ["The test data looks exactly like the train data, so let's complete some filling in of the Age missing data. "], "cell_type": "markdown", "metadata": {"_cell_guid": "1c43b83f-d150-4ca7-ab71-68ad519cacfe", "_uuid": "b97ec105bc5faba751c2f0353fffaab374a1f83f"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["first_class_test <- filter(test, Pclass == 1)\n", "floor(mean(first_class_test[,5], na.rm = T))\n", "second_class_test <- filter(test, Pclass == 2)\n", "floor(mean(second_class_test[,5], na.rm = T))\n", "third_class_test <- filter(test, Pclass == 3)\n", "floor(mean(third_class_test[,5], na.rm = T))\n", "#results came out to be 40, 28 and 24\n", "\n", "for (i in (1:nrow(test))) {\n", "  if (is.na(test[i,5]) == TRUE){\n", "    if (test[i,2] == 1){\n", "      test[i,5] <- 40\n", "    } else if (test[i,2] == 2){\n", "      test[i,5] <- 28\n", "    } else if (test[i,2] == 3){\n", "      test[i,5] <- 24\n", "    } \n", "  } else {\n", "    test[i,5] <- test[i,5]\n", "  }\n", "}"], "metadata": {"_cell_guid": "cd6ac3a7-095b-41c1-abe6-dae9ff20489a", "_uuid": "75812b4edbad4e06e55fccaf7e6e74859d48687a"}}, {"source": ["Let's check the missmap of the test data again"], "cell_type": "markdown", "metadata": {"_cell_guid": "d21da194-9cdd-41c1-aca7-d74b22c7cfe4", "_uuid": "bfdd60a690ae5c84091f2ed3871d9da26ea480db"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["missmap(test, legend = FALSE)"], "metadata": {"_cell_guid": "13132ec5-7e3e-4367-8262-7edc496d5746", "_uuid": "8107058d6fa3dded7b610674e7b8a8971e828f95"}}, {"source": ["However we need to do two things:\n", " 1. Transform our test data into the form of our train data i.e. removing extra columns\n", " 2. Make sure that the factors of the training data and the test data are the same"], "cell_type": "markdown", "metadata": {"_cell_guid": "66388e75-5319-41c5-b7ac-39e8518eee65", "_uuid": "bab556cdc3afb1476625763d94b69d06fdc2d78f"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["PassengerId <- test[,1] #saving the passengerid column for later\n", "test <- test[,-c(1,10,3,8)] #removing columns\n", "str(test) #check str of test\n", "str(train) #check str of train"], "metadata": {"_cell_guid": "0ec2d434-be9d-4c82-ba6c-73fac90f9ed8", "_uuid": "e92da1e9425ba30f635819920f536981675d9590"}}, {"source": ["We noticed that both train and test have different factors for Embarked, of which we missed the \"\" value from the missingness map. Let's see which rows in the training data that has a different factor"], "cell_type": "markdown", "metadata": {"_cell_guid": "10f21cb2-2a3a-4cb1-a225-828a966d9698", "_uuid": "85c8f1dd801abfe8e04603607737f0fb01860b3a"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["(which(is.na(train$Embarked == \"\"))) "], "metadata": {"_cell_guid": "941afa4c-1ee8-44e5-88b3-c3d8a02855a4", "_uuid": "bbce44d3f18fe48868fdd5062c740836822574cb"}}, {"source": ["As we can see there are only 2 rows that are missing \"\", which means we can simply drop them from our training data"], "cell_type": "markdown", "metadata": {"_cell_guid": "bc976585-c0d2-42b8-8a8e-a9ff609c1096", "_uuid": "d93d2fcc3dfc03d1d98eaf6fcdff031e7186463d"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["train <- train %>%\n", "            filter(Embarked != \"\") %>%\n", "            droplevels()\n", "#we check the str of train again\n", "str(train)"], "metadata": {"_cell_guid": "da4a2373-5b4c-4902-95fc-881106efceba", "_uuid": "b2f3ba6b109c64cd76f38b24c298f7a176bbfcea"}}, {"source": ["Let's run our model, do the predictions and export it to a submission file! "], "cell_type": "markdown", "metadata": {"_cell_guid": "ac2c48a8-310e-4d91-801d-c7525865d48b", "_uuid": "2630a3b04b8590ed0555360ad6ad57e9f93f5538"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["## Now we run the entire model on the train data set\n", "test_model_final <- randomForest(as.factor(Survived)~.,data = train, importance = TRUE)\n", "\n", "## Run predictions\n", "test_model_final_predictions <- predict(test_model_final, test, predict.all = TRUE)\n", "\n", "#Exporting predictions into a file \n", "results_final <- as.vector(test_model_final_predictions$aggregate)\n", "results_frame <- data.frame(PassengerId, results_final)\n", "colnames(results_frame) <- c(\"PassengerId\", \"Survived\")\n", "\n", "which(is.na(results_frame$Survived == T)) #check for N/A values"], "metadata": {"_cell_guid": "a61f5b45-a142-49ee-9aea-091f3766df5a", "_uuid": "08fd1a2d80edcc546e9f9be3bfbc11e44e7c55db"}}, {"source": ["But wait! We have NA values! Since it's only 1 value we can do nothing more but to replace it with 0."], "cell_type": "markdown", "metadata": {"_cell_guid": "d2c921d1-bdf0-4335-a52c-5cfcb4f435fb", "_uuid": "740559f7f48dc5dbe9055f63b74deaefb2237682"}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": ["results_frame[153,2] <- 0\n", "# Exporting to file.\n", "#write.table(results_frame, file = \"Submission.csv\", sep = \",\", row.names = FALSE)\n", "#View(results_frame)"], "metadata": {"_cell_guid": "a094a53f-e743-420a-b538-38466dbaee0e", "_uuid": "5a16933413ade946b416beb3db9f695edc72ec96"}}, {"source": [], "cell_type": "markdown", "metadata": {"_cell_guid": "c4e97f01-6949-42f4-8f10-7935a3c6d335", "_uuid": "fbdf97de14fce05a789ccc3aefca263b1a924c88"}}]}