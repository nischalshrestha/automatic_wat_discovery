{
  "metadata": {
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "metadata": {
        "_cell_guid": "6196b56b-d96b-7c0a-4aaa-7bb2587bb126",
        "_active": false,
        "collapsed": false
      },
      "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\n# Load packages\nlibrary('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm\n\n# Any results you write to the current directory are saved as output.",
      "execution_count": 157,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "836fe481-6087-ce41-3842-0110aa9a7dc1",
        "_active": false,
        "collapsed": false
      },
      "source": "train <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\nfull  <- bind_rows(train, test) # bind training & test data\n\n# check data\nstr(full)",
      "execution_count": 158,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "f9e51b70-2b37-c2cb-2785-904c67184c53",
        "_active": false,
        "collapsed": false
      },
      "source": "# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Show title counts by sex\ntable(full$Sex, full$Title)",
      "execution_count": 159,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "fd2c9026-198c-28da-680e-786cac4a402f",
        "_active": false,
        "collapsed": false
      },
      "source": "# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n# Show title counts by sex again\ntable(full$Sex, full$Title)",
      "execution_count": 160,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "f742ca34-71b5-915c-86dd-36247dd2056c",
        "_active": false,
        "collapsed": false
      },
      "source": "# Create a family size variable including the passenger themselves\nfull$Fsize <- full$SibSp + full$Parch + 1\n\n# Create a family variable \nfull$Family <- paste(full$Surname, full$Fsize, sep='_')\n\n",
      "execution_count": 161,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "aa050d69-8c0e-b065-2a3c-89b0a6a423d0",
        "_active": false,
        "collapsed": false
      },
      "source": "# Use ggplot2 to visualize the relationship between family size & survival\nggplot(full[1:891,], aes(x = Pclass, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:90)) +\n  labs(x = 'Class') +\n  theme_few()",
      "execution_count": 162,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "47550692-233f-23b2-e86c-002d272c4895",
        "_active": false,
        "collapsed": false
      },
      "source": "# Discretize family size\nfull$FsizeD[full$Fsize == 1] <- 'singleton'\nfull$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$FsizeD[full$Fsize > 5] <- 'large'\n\n# Show family size by survival using a mosaic plot\nmosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)",
      "execution_count": 163,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "6cc94bfa-20a2-8fa1-8d01-0aa8a5c8c7b6",
        "_active": false,
        "collapsed": false
      },
      "source": "str(full)",
      "execution_count": 164,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "d4184d19-1a6e-c90b-2dec-ffdb6bc69575",
        "_active": false,
        "collapsed": false
      },
      "source": "factor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n                 'Title','Family','FsizeD')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n\n# Perform mice imputation, excluding certain less-than-useful variables:\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf') ",
      "execution_count": 165,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "8b5800bd-7339-d927-e5a4-c1431423704c",
        "_active": false,
        "collapsed": false
      },
      "source": "mice_output <- complete(mice_mod)",
      "execution_count": 166,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "44a2337f-a5b3-de0f-04be-232c77bd7018",
        "_active": false,
        "collapsed": false
      },
      "source": "par(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen', ylim=c(0,0.04))",
      "execution_count": 167,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "d03011d8-d2ff-199a-66e3-126f9f7744a6",
        "_active": false,
        "collapsed": false
      },
      "source": "full$Age <- mice_output$Age\n\nsum(is.na(full$Age))",
      "execution_count": 168,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "0ad4da24-8549-b7c0-a10b-ae769b3e0841",
        "_active": false,
        "collapsed": false
      },
      "source": "ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n  theme_few()",
      "execution_count": 169,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "2e646bfd-595e-6d26-6cbb-81e45a6d382e",
        "_active": false,
        "collapsed": false
      },
      "source": "full$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\n\n# Show counts\ntable(full$Child, full$Survived)",
      "execution_count": 170,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "0988e7a7-8039-170d-2c32-9d3aaae3a7cd",
        "_active": false,
        "collapsed": false
      },
      "source": "full$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n\n# Show counts\ntable(full$Mother, full$Survived)",
      "execution_count": 171,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "63ada610-54b3-95a0-c5b4-e4ff4270e829",
        "_active": false,
        "collapsed": false
      },
      "source": "full$Child  <- factor(full$Child)\nfull$Mother <- factor(full$Mother)",
      "execution_count": 172,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "278cef8c-13aa-a1f2-af1e-4712050dc4b8",
        "_active": false,
        "collapsed": false
      },
      "source": "md.pattern(full)",
      "execution_count": 173,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "d45402f0-e349-2a80-5845-a380aae924cd",
        "_active": false,
        "collapsed": false
      },
      "source": "train <- full[1:891,]\ntest <- full[892:1309,]",
      "execution_count": 174,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "a0a90645-ab1d-6af9-2f92-12e4f399961a",
        "_active": false,
        "collapsed": false
      },
      "source": "# Set a random seed\nset.seed(754)\n\n# Build the model (note: not all possible variables are used)\nrf_model <- randomForest(data = train,factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Child + Mother)\n\n# Show model error\nplot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)",
      "execution_count": 175,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "5736bc90-b885-6639-92cb-529d34a5c653",
        "_active": false,
        "collapsed": false
      },
      "source": "# Get importance\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()",
      "execution_count": 176,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "f4f041a3-0080-9136-c95f-4ef42558422c",
        "_active": false,
        "collapsed": false
      },
      "source": "# Predict using the test set\nprediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = test$Survived)\n\n# Write the solution to file\nwrite.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)",
      "execution_count": 177,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    }
  ]
}