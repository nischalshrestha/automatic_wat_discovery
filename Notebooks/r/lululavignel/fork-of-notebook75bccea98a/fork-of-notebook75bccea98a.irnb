{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6196b56b-d96b-7c0a-4aaa-7bb2587bb126"
      },
      "outputs": [],
      "source": [
        "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n",
        "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "# Load packages\n",
        "library('ggplot2') # visualization\n",
        "library('ggthemes') # visualization\n",
        "library('scales') # visualization\n",
        "library('dplyr') # data manipulation\n",
        "library('mice') # imputation\n",
        "library('randomForest') # classification algorithm\n",
        "\n",
        "# Any results you write to the current directory are saved as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "836fe481-6087-ce41-3842-0110aa9a7dc1"
      },
      "outputs": [],
      "source": [
        "train <- read.csv('../input/train.csv', stringsAsFactors = F)\n",
        "test  <- read.csv('../input/test.csv', stringsAsFactors = F)\n",
        "\n",
        "full  <- bind_rows(train, test) # bind training & test data\n",
        "\n",
        "# check data\n",
        "str(full)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f9e51b70-2b37-c2cb-2785-904c67184c53"
      },
      "outputs": [],
      "source": [
        "# Grab title from passenger names\n",
        "full$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n",
        "\n",
        "# Show title counts by sex\n",
        "table(full$Sex, full$Title)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "fd2c9026-198c-28da-680e-786cac4a402f"
      },
      "outputs": [],
      "source": [
        "# Titles with very low cell counts to be combined to \"rare\" level\n",
        "rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n",
        "                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n",
        "\n",
        "# Also reassign mlle, ms, and mme accordingly\n",
        "full$Title[full$Title == 'Mlle']        <- 'Miss' \n",
        "full$Title[full$Title == 'Ms']          <- 'Miss'\n",
        "full$Title[full$Title == 'Mme']         <- 'Mrs' \n",
        "full$Title[full$Title %in% rare_title]  <- 'Rare Title'\n",
        "\n",
        "# Show title counts by sex again\n",
        "table(full$Sex, full$Title)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f742ca34-71b5-915c-86dd-36247dd2056c"
      },
      "outputs": [],
      "source": [
        "# Create a family size variable including the passenger themselves\n",
        "full$Fsize <- full$SibSp + full$Parch + 1\n",
        "\n",
        "# Create a family variable \n",
        "full$Family <- paste(full$Surname, full$Fsize, sep='_')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "aa050d69-8c0e-b065-2a3c-89b0a6a423d0"
      },
      "outputs": [],
      "source": [
        "# Use ggplot2 to visualize the relationship between family size & survival\n",
        "ggplot(full[1:891,], aes(x = Pclass, fill = factor(Survived))) +\n",
        "  geom_bar(stat='count', position='dodge') +\n",
        "  scale_x_continuous(breaks=c(1:90)) +\n",
        "  labs(x = 'Class') +\n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "47550692-233f-23b2-e86c-002d272c4895"
      },
      "outputs": [],
      "source": [
        "# Discretize family size\n",
        "full$FsizeD[full$Fsize == 1] <- 'singleton'\n",
        "full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\n",
        "full$FsizeD[full$Fsize > 5] <- 'large'\n",
        "\n",
        "# Show family size by survival using a mosaic plot\n",
        "mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6cc94bfa-20a2-8fa1-8d01-0aa8a5c8c7b6"
      },
      "outputs": [],
      "source": [
        "str(full)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d4184d19-1a6e-c90b-2dec-ffdb6bc69575"
      },
      "outputs": [],
      "source": [
        "factor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n",
        "                 'Title','Family','FsizeD')\n",
        "\n",
        "full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n",
        "\n",
        "# Set a random seed\n",
        "set.seed(129)\n",
        "\n",
        "# Perform mice imputation, excluding certain less-than-useful variables:\n",
        "mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf') "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "8b5800bd-7339-d927-e5a4-c1431423704c"
      },
      "outputs": [],
      "source": [
        "mice_output <- complete(mice_mod)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "44a2337f-a5b3-de0f-04be-232c77bd7018"
      },
      "outputs": [],
      "source": [
        "par(mfrow=c(1,2))\n",
        "hist(full$Age, freq=F, main='Age: Original Data', \n",
        "  col='darkgreen', ylim=c(0,0.04))\n",
        "hist(mice_output$Age, freq=F, main='Age: MICE Output', \n",
        "  col='lightgreen', ylim=c(0,0.04))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d03011d8-d2ff-199a-66e3-126f9f7744a6"
      },
      "outputs": [],
      "source": [
        "full$Age <- mice_output$Age\n",
        "\n",
        "sum(is.na(full$Age))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0ad4da24-8549-b7c0-a10b-ae769b3e0841"
      },
      "outputs": [],
      "source": [
        "ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n",
        "  geom_histogram() + \n",
        "  # I include Sex since we know (a priori) it's a significant predictor\n",
        "  facet_grid(.~Sex) + \n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2e646bfd-595e-6d26-6cbb-81e45a6d382e"
      },
      "outputs": [],
      "source": [
        "full$Child[full$Age < 18] <- 'Child'\n",
        "full$Child[full$Age >= 18] <- 'Adult'\n",
        "\n",
        "# Show counts\n",
        "table(full$Child, full$Survived)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0988e7a7-8039-170d-2c32-9d3aaae3a7cd"
      },
      "outputs": [],
      "source": [
        "full$Mother <- 'Not Mother'\n",
        "full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n",
        "\n",
        "# Show counts\n",
        "table(full$Mother, full$Survived)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "63ada610-54b3-95a0-c5b4-e4ff4270e829"
      },
      "outputs": [],
      "source": [
        "full$Child  <- factor(full$Child)\n",
        "full$Mother <- factor(full$Mother)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "278cef8c-13aa-a1f2-af1e-4712050dc4b8"
      },
      "outputs": [],
      "source": [
        "md.pattern(full)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d45402f0-e349-2a80-5845-a380aae924cd"
      },
      "outputs": [],
      "source": [
        "train <- full[1:891,]\n",
        "test <- full[892:1309,]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a0a90645-ab1d-6af9-2f92-12e4f399961a"
      },
      "outputs": [],
      "source": [
        "# Set a random seed\n",
        "set.seed(754)\n",
        "\n",
        "# Build the model (note: not all possible variables are used)\n",
        "rf_model <- randomForest(data = train,factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Child + Mother)\n",
        "\n",
        "# Show model error\n",
        "plot(rf_model, ylim=c(0,0.36))\n",
        "legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5736bc90-b885-6639-92cb-529d34a5c653"
      },
      "outputs": [],
      "source": [
        "# Get importance\n",
        "importance    <- importance(rf_model)\n",
        "varImportance <- data.frame(Variables = row.names(importance), \n",
        "                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n",
        "\n",
        "# Create a rank variable based on importance\n",
        "rankImportance <- varImportance %>%\n",
        "  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n",
        "\n",
        "# Use ggplot2 to visualize the relative importance of variables\n",
        "ggplot(rankImportance, aes(x = reorder(Variables, Importance), \n",
        "    y = Importance, fill = Importance)) +\n",
        "  geom_bar(stat='identity') + \n",
        "  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n",
        "    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n",
        "  labs(x = 'Variables') +\n",
        "  coord_flip() + \n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f4f041a3-0080-9136-c95f-4ef42558422c"
      },
      "outputs": [],
      "source": [
        "# Predict using the test set\n",
        "test$Survived <- predict(rf_model, test)\n",
        "\n",
        "# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\n",
        "solution <- data.frame(PassengerID = test$PassengerId, Survived = test$Survived)\n",
        "\n",
        "# Write the solution to file\n",
        "write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e3c528a9-f95a-c952-b55c-b60de6ae886b"
      },
      "outputs": [],
      "source": ""
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}