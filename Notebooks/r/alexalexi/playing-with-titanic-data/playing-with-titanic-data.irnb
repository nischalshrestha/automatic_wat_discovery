{"cells": [{"execution_count": null, "cell_type": "code", "outputs": [], "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \nsuppressMessages(library(tidyverse))\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(stringr)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nlist.files(\"../input\")\n\n# Any results you write to the current directory are saved as output.", "metadata": {"trusted": false, "_execution_state": "idle", "_uuid": "18f7e8bc980fd5cebc6725313783e4cddc93032f", "_cell_guid": "6a92fdbe-acf7-4c67-9cab-506369c25aa1"}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": " 1. inspect a family what was the distribution of classes, by embarkation\n   point? \nGet the deck letter? \nwhat is the family size? were the ticket\n   prices fair? can we see what the pricing policy was? how did age and\n   other factors affect survival?\nlength of name vs. price of ticket", "metadata": {"_cell_guid": "d3ba60e6-38f5-4e6d-834a-36e1649794c7", "_execution_state": "idle", "_uuid": "7aaf674f5f1e761f1e35f751193e467b602e4124", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "Megal Risdal credit", "metadata": {"_cell_guid": "da39e885-06a2-483c-a476-9392dddc9716", "_execution_state": "idle", "_uuid": "aa6e9f28a11361e3845d3126021e6854a3745c07", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "df_training <- read_csv('../input/train.csv')\ndf_testing  <- read_csv('../input/test.csv')\n\ndf  <- bind_rows(df_training, df_testing)", "metadata": {"_cell_guid": "ad5fe6c0-95b4-4de6-ad2d-e98ffbcdd597", "trusted": false, "_execution_state": "idle", "_uuid": "b748aaef45c0a0a0239df6226910e6589db7355c", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "### Get a feeling for what the data looks like\n\nglimpse gives a good starting point for what the data look like in practice.  To understand what all the variables mean, review the dataset 'metadata', [here][1], or click on the 'Input Files' button at the top of this kernel script.\n\n\n  [1]: https://www.kaggle.com/c/titanic/data", "metadata": {"_cell_guid": "620ba14c-920b-4c8b-a5b2-08df3bfad3fa", "_execution_state": "idle", "_uuid": "fe5f4449f36ca0e7b68c5c65409712d5c2110716", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "glimpse(df)", "metadata": {"_cell_guid": "bc22771a-973c-4a7b-b5e0-ebff8efece03", "trusted": false, "_execution_state": "idle", "_uuid": "6178d452d9777107556d3c5c8de08f36989c3420", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "", "metadata": {"_cell_guid": "7986cb29-91fa-45c3-b23f-83bc75283fa4", "trusted": false, "_execution_state": "idle", "_uuid": "b322273dda7b843ff7cb2db8b2b66157cf6220ee", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "head(df)", "metadata": {"_cell_guid": "759c52cb-87ef-4faf-bb1b-474e7aae15e4", "trusted": false, "_execution_state": "idle", "_uuid": "21c2cd0eab5fc56ac080b9ecc0316f9b1861db34", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "survival_table <- df %>% \n    filter(is.finite(Survived)) %>%\n    group_by(Pclass, Survived) %>% \n    summarise(n_group = n()) %>%\n    group_by(Pclass) %>%    # strictly speaking this line is redundant but it's clearer to understand this way\n    mutate(n_class_total = sum(n_group)) %>%\n    mutate(percent_of_class = n_group / n_class_total)\n\nsurvival_table", "metadata": {"_cell_guid": "82520173-b7b2-4ce6-b495-371950b43604", "trusted": false, "_execution_state": "idle", "_uuid": "c8441bee934fa410fea700e101a496cfa0676953", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Another way to show the same date:\n# 'pivot' the table so we see survival status as column headings\nsurvival_table %>%\n    select(one_of(c('Pclass','Survived','percent_of_class'))) %>%\n    spread(\"Survived\",\"percent_of_class\")", "metadata": {"_cell_guid": "c3b0aef6-c1ac-42e8-97ec-8b917797c2b5", "trusted": false, "_execution_state": "idle", "_uuid": "e728f7724fd776d12ec5e15f66e0ac68acf5df11", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# A further way to show the survival rates. Using ggplot2, we can \n# create a 'heatmap' from coloured tiles, and put labels on to show the values:\nsurvival_table %>%\n    ggplot(aes(x=factor(Survived), y = factor(Pclass),   # 'factor' is just to get the scales looking nice\n               fill = percent_of_class)) +\n    geom_tile() +   \n    coord_equal()  + # this just makes all the tiles square instead of rectangular\n    labs(title=\"Survival Rates on RMS Titanic\", subtitle=\"by passenger class, ignoring unknown cases\",\n         x=\"Survival Status\", y = \"Passenger Class\") +\n    geom_text(aes(label= percent_of_class), colour=\"white\") +\n    geom_text(aes(label= sprintf(\"%1.1f%%\",      # 'sprintf...' is to format the percentages in a legible way\n                                 100*percent_of_class)), \n              nudge_y = -0.2, colour=\"pink\")\n", "metadata": {"_cell_guid": "ca8e5430-99d2-4699-a4e7-e79aca91edb4", "trusted": false, "_execution_state": "idle", "_uuid": "fafb3b81bae8e70f1ebfc2a6e4e02cda59dc5abe", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "###Ticket prices distribution", "metadata": {"_cell_guid": "354eff44-2b88-4ed1-8962-54ac156e9191", "_execution_state": "idle", "_uuid": "1cbda48c04e374235e58594e952e5aa63bcc2589", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# first, create a couple of new variables (columns)\n# variable 'deck' using the first character in the Cabin number column\ndf <- df %>% \n    mutate(deck = str_sub(Cabin, 1,1))\n\n# a 'child' variable. Note we create this as a 'factor', this makes it easier to read later\ndf <- df %>%\n    mutate(ac = Age>=16, adult_child = factor(Age>=16, labels=c('child','adult')))\n\n# make the 'embarked' variable more readable, and put them in the correct order of the voyage\n# recall, C = Cherbourg, Q = Queenstown, S = Southampton\ndf <- df %>%\n    mutate(embarked_name = factor(Embarked, \n                                  levels=c('S','C','Q'), \n                                  labels=c('Southampton','Cherbourg','Queenstown')))", "metadata": {"_cell_guid": "3328a1cb-b00f-4cb0-b429-cdcb423a5151", "trusted": false, "_execution_state": "idle", "_uuid": "e415890a3591111173d735f84b3b15381ca4c41a", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "head(df)\n", "metadata": {"_cell_guid": "e35fb7d3-9cf0-4322-ad3e-445e43323843", "trusted": false, "_execution_state": "idle", "_uuid": "a14f8268243fc7bd1fe44e20e19ba8deec0b5abf", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# now, get a general view of the distribution of ticket prices\n# note, the y-axis is meaningless, it's just there so that we can 'jitter'\n# the individual points to make them a bit more legible\ndf %>% \n    filter(Fare>0) %>%\n    ggplot(aes(x=Fare, y=0)) +\n    geom_jitter(aes(colour=factor(Pclass)))\n    ", "metadata": {"_cell_guid": "25d4a9a3-5f82-4cb5-94f7-83bb64fbbbf8", "trusted": false, "_execution_state": "idle", "_uuid": "938206526f8aec5c26704d2fdf3b3e570d1147d3", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# What can we do to make this picture clearer to understand?\n# Firstly, let's use a 'log scale' to make the low fares more visible\ndf %>% \n    filter(Fare>0) %>%\n    ggplot(aes(x=Fare, y=0)) +\n    geom_jitter(aes(colour=factor(Pclass))) +\n    scale_x_continuous(trans='log2')", "metadata": {"_cell_guid": "25f44d29-b22c-484a-9a18-af9e419d01d6", "trusted": false, "_execution_state": "idle", "_uuid": "fb79323a5013e7256ac2df01275caefe5ff78e67", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# next, we can use a 'density' graph. This shows roughly the distribution\n# of number of passengers at each level of fare\ndf %>% \n    filter(Fare>0) %>%\n    mutate(class = factor(Pclass)) %>%\n    ggplot(aes(x=Fare)) +\n    geom_density(aes(group=class, colour=class, fill=class, alpha=0.15)) +\n    scale_x_continuous(trans='log2')", "metadata": {"_cell_guid": "1d71f0eb-e16d-4b39-94f2-3b02a56087b7", "trusted": false, "_execution_state": "idle", "_uuid": "939fbf5f0f19b5278c04f713f0bfc8b27c2e9eb7", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "df %>% \n    filter(Fare>0) %>%\n    mutate(class = factor(Pclass)) %>%\n    ggplot(aes(x=Fare)) +\n    geom_density(aes(group=class, colour=class, fill=class, alpha=0.15)) +\n    scale_x_continuous(trans='log2') +\n    facet_wrap(~deck)", "metadata": {"_cell_guid": "13a6df81-1dc6-47b5-8d98-83a43c76b952", "trusted": false, "_execution_state": "idle", "_uuid": "8ab2965d7faa19359ac2937a4b1600536a551aef", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "df %>% \n    filter(Fare>0 & !is.na(embarked_name)) %>%\n    mutate(class = factor(Pclass)) %>%\n    ggplot(aes(x=Fare)) +\n    geom_density(aes(group=class, colour=class, fill=class, alpha=0.15)) +\n    scale_x_continuous(trans='log2') +\n    coord_cartesian(ylim=c(0,3)) +\n    facet_wrap(~embarked_name) +\n    theme(legend.position='top') +\n    scale_alpha(guide='none') +\n    labs(title=\"Fares on RMS Titanic\", subtitle=\"by embarkation point\")\n", "metadata": {"_cell_guid": "e2608419-48a8-4bf7-9dee-8e13b4a1e359", "trusted": false, "_execution_state": "idle", "_uuid": "5232149480562920bf8031b909d9f899edcdc37d", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "", "metadata": {"_cell_guid": "b421537c-2009-41f6-9f29-6c04eddca95f", "trusted": false, "_execution_state": "idle", "_uuid": "85ec84d7fac044da3f73f41afd229de545ed540c", "collapsed": false}}], "nbformat": 4, "metadata": {"language_info": {"version": "3.4.0", "pygments_lexer": "r", "mimetype": "text/x-r-source", "codemirror_mode": "r", "name": "R", "file_extension": ".r"}, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "nbformat_minor": 0}