{"cells":[{"metadata":{"_cell_guid":"686e6ee3-1e59-4d61-868e-75b5f4066056","_uuid":"4c8555b50d4f6f0e40007d6947887c681fda2a54","_execution_state":"idle","_kg_hide-output":true,"trusted":true},"cell_type":"code","source":"# Load packages\nlibrary('readr') # data readf\nlibrary('ggplot2') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"345b69d5-3770-41cf-823b-c2d0e270f981","_uuid":"bbac16ad15164c753ae7773b1b8236a63a357b62"},"cell_type":"markdown","source":"## I - Load and check data"},{"metadata":{"_cell_guid":"ade8c164-9df5-429c-b217-6cfb1f171d5d","_uuid":"8cc15776493b2a84c33811f30a46408ef4acb226","_kg_hide-output":true,"_kg_hide-input":false,"trusted":true},"cell_type":"code","source":"# load data\ntrain <- read_csv('../input/train.csv')\ntest <- read_csv(\"../input/test.csv\")\n\nfull <- bind_rows(train,test) # bind training & test data","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"9c385f4a-7b6c-405c-a52d-e4a777e09194","_uuid":"28c3dd915e741d69bb3e4b75245d413518ca0e84","trusted":true},"cell_type":"code","source":"# check data\nstr(full)\nsummary(full)\nhead(full)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"f87fa1d2-9409-4c47-b7df-3acc115d5dfb","_uuid":"20d909d2dd087dd2d5bd1bd3fc2baee0e95897a7"},"cell_type":"markdown","source":"## II - Engineer features"},{"metadata":{"_cell_guid":"8f904e3e-d8eb-4d4f-9c45-c76207916c8a","_uuid":"7421a3d66c1e75bdd0fae55c6e9573a57f449367","trusted":true},"cell_type":"code","source":"# Process Name Column\n    # Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n    # Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n    # Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n    # Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])\n\ntable(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"9771a694-ceb7-49c0-b885-2644950c0907","_uuid":"1c99b61570855f5922a72bd42b33213206307522","trusted":true},"cell_type":"code","source":"# Process Cabin Column\n    # Count number of Cabins\nfull$NCabins <- full$Cabin\nfor(i in 1:length(full$Cabin)){\n    if(is.na(full$NCabins[i])){\n        full$NCabins[i] = 0\n    }else{\n    s = strsplit(full$NCabins[i],\" \")\n    full$NCabins[i] = length(s[[1]])\n  }\n} \ntable(full$NCabins)\n\n    # Create a Deck variable. Get passenger deck A - F:\nfull$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))\ntable(full$Deck)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"c6d739ca-43e6-4663-a3ac-92fbff4a23c5","_uuid":"7734a39354475de10b4ddf97a696c6bf6c6acb88","trusted":true},"cell_type":"code","source":"# Missing embarkment\nfull[which(is.na(full$Embarked)), ]\n    # Since their fare was $80 for 1st class, they most likely embarked from 'C'\nfull$Embarked[c(62, 830)] <- 'C'","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d4ee3ce6e7627d1611ec6cf75bf530cdb84eb7c5","trusted":true},"cell_type":"code","source":"# Missing fare\nfull[which(is.na(full$Fare)), ]\n    # Replace missing fare value with median fare for class/embarkment\nfull$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"fe1dbbe1-754d-4a17-a913-da3ad0a7421f","_uuid":"0f32490fd0f7a42bd1e1d855c19f3935cf50818d","trusted":true},"cell_type":"code","source":"# Process Age Column\n    # Make variables factors into factors\nfactor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n                 'Title','Surname','SibSp', 'Parch')\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n    # Perform mice imputation, excluding certain less-than-useful variables:\nset.seed(123)\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Ticket','Cabin','SibSp', 'Parch','Surname','Survived')], method='rf')                  \n    # Replace Age variable from the mice model.\nage = full$Age\nfull$Age <- complete(mice_mod)$Age  \n                     \n    # ALTERNATIVE! replace missing value with a random sample from raw data\n#set.seed(123)\n#for(i in 1:length(full$Age)){\n#  if(is.na(full$Age[i])){\n#    full$Age[i] = sample(na.omit(full$Age),1)\n#  }\n#}\n                         \n    # check effect\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Before Replacement', ylim=c(0,0.04),xlab = \"age\")\nhist(age, freq=F, main='After Replacement', ylim=c(0,0.04))","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"fb3b3ec1-4543-46e7-90cb-2f758a339071","_uuid":"072cf0b13bdc960ad985cdb1b6dd57c3663004f3"},"cell_type":"markdown","source":"## III - Make Prediction"},{"metadata":{"_cell_guid":"28601a9d-f90d-4f6e-b6ef-ed038e9564ff","_uuid":"e777f3d859479d894aae262c4d5f6556ac4b0c08","trusted":true},"cell_type":"code","source":"# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]\n\n# Build the model (note: not all possible variables are used)\nset.seed(765)\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + \n                         Fare + Embarked + Title + NCabins,\n                         data = train,\n                         ntree = 10000,\n                         importance = TRUE\n                        )\n\n# Show model error\nplot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"dba3c11d-f18b-4d96-a904-c2f93d32aba6","_uuid":"25b7ed89dccbe5099d805bf8cca3295b36bfe4ca","trusted":true},"cell_type":"code","source":"rf_model","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"d40ce141-79d7-41b0-a6a3-220c3d8262ab","_uuid":"f2e7faf8acbe62a4592300d872242a274930cf1b","trusted":true},"cell_type":"code","source":"# Get importance\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\nlibrary('ggthemes') # visualization\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"7c5a70a3-9d7d-451e-ae0c-eccd7492bf75","_uuid":"6197ebfd7aa09d86bd3be08c77cf59b3a65414dd","trusted":true},"cell_type":"code","source":"# Predict using the test set\nprediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# Write the solution to file\nwrite.csv(solution, file = 'rfsolution.csv', row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}