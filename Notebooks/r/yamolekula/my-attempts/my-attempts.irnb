{"cells":[
 {
  "cell_type": "code",
  "execution_count": null,
  "metadata": {
   "collapsed": false
  },
  "outputs": [],
  "source": "#read train/test data\r\ntrain<-read.csv(\"../input/train.csv\",na.strings=c('NA',''),stringsAsFactors=F)\r\ntest<-read.csv(\"../input/test.csv\",na.strings=c('NA',''),stringsAsFactors=F)\r\n\r\n#train<-read.csv(\"train.csv\",na.strings=c('NA',''),stringsAsFactors=F)\r\n#test<-read.csv(\"test.csv\",na.strings=c('NA',''),stringsAsFactors=F)\r\n\r\n#loading libraries\r\nlibrary(randomForest)\r\nlibrary(party)\r\nlibrary(rpart)\r\nrequire(rattle)\r\nlibrary(rattle)\r\n\r\n#checking the missing data\r\ncheck.missing<-function(x) return(paste0(round(sum(is.na(x))/length(x),4)*100,'%'))\r\ndata.frame(sapply(train,check.missing))\r\ndata.frame(sapply(test,check.missing))\r\n\r\n#combine train/test data for pre-processing\r\ntrain$Cat<-'train'\r\ntest$Cat<-'test'\r\ntest$Survived<-NA\r\nfull<-rbind(train,test)\r\n\r\n#Embarked\r\ntable(full$Embarked)\r\n#  C   Q   S \r\n#270 123 914 \r\n# subset(full, is.na(Embarked)) -> Google -> \"S\"...\r\nfull$Embarked[is.na(full$Embarked)]<-'S'\r\n\r\n#Extract Title from Name\r\nfull$Title<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][2])\r\nfull$Title<-gsub(' ','',full$Title)\r\naggregate(Age~Title,full,median)\r\nfull$Title[full$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'\r\nfull$Title[full$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\r\n\r\n#check the result\r\naggregate(Age~Title,full,summary, digits=2)\r\n#         Title Age.Min. Age.1st Qu. Age.Median Age.Mean Age.3rd Qu. Age.Max.\r\n#1          Col    47          52         54       54          57       60   \r\n#2           Dr    23          38         49       44          52       54   \r\n#3         Lady    38          38         39       42          44       48   \r\n#4       Master    0.33        2          4        5.50        9       14   \r\n#5         Miss    0.17        15         22       22          30       63   \r\n#6         Mlle    24          24         24       24          24       24   \r\n#7          Mme    24          24         24       24          24       24   \r\n#8           Mr    11          23         29       32          39       80   \r\n#9          Mrs    14          27         36       37          46       76   \r\n#10          Ms    28          28         28       28          28       28   \r\n#11         Rev    27          30         42       41          52       57   \r\n#12         Sir    40          45         49       51          52       70   \r\n#13 theCountess    33          33         33       33          33       33   \r\n\r\n#Adding FamilySize\r\nfull$FamilySize<-full$Parch+full$SibSp+1\r\n\r\n#Fare\r\n# create a decision tree for Fare based on Pclass+Title+Sex+SibSp+Parch (1 Passenger)\r\nfit.Fare<-rpart(Fare[!is.na(Fare)]~Pclass+Title+Sex+SibSp+Parch,data=full[!is.na(full$Fare),],method='anova')\r\n# display the results\r\nprintcp(fit.Fare) \r\nfancyRpartPlot(fit.Fare, main=\"Fare decision tree - overkill, predicting the 1 single missing Fare\")\r\n#predict(fit.Fare,full[is.na(full$Fare),])\r\n#    1044 \r\n#12.08246 \r\n#> summary(full$Fare)\r\n#\r\n#   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \r\n#  0.000   7.896  14.450  33.300  31.280 512.300       1 \r\nfull$Fare[is.na(full$Fare)]<-predict(fit.Fare,full[is.na(full$Fare),])\r\n\r\n#FamilyId2\r\nSurname<-sapply(full$Name,function(x) strsplit(x,'[.,]')[[1]][1])\r\nFamilyId<-paste0(full$FamilySize,Surname)\r\nfull$FamilyId<-factor(FamilyId)\r\nFamily<-data.frame(table(FamilyId))\r\nSmallFamily<-Family$FamilyId[Family$Freq<=2]\r\nFamilyId[FamilyId %in% SmallFamily]<-'Small'\r\nfull$FamilyId2<-factor(FamilyId)\r\n\r\n#Age decision tree (regression) method to predict the 20.09% missing Age data\r\nfit.Age<-rpart(Age[!is.na(Age)]~Pclass+Title+Sex+SibSp+Parch+Fare,data=full[!is.na(full$Age),],method='anova')\r\nfancyRpartPlot(fit.Age, main=\"Age decision tree - predict the 20.09% missing Age data\")\r\nfull$Age[is.na(full$Age)]<-predict(fit.Age,full[is.na(full$Age),])\r\n\r\n#Adding Mother\r\nfull$Mother<-0\r\nfull$Mother[full$Sex=='female' & full$Parch>0 & full$Age>18 & full$Title!='Miss']<-1\r\n#Adding Child\r\nfull$Child<-0\r\nfull$Child[full$Parch>0 & full$Age<=18]<-1\r\n\r\n#check missing \r\ndata.frame(sapply(full,check.missing))\r\n\r\n#Exact Deck from Cabin number\r\nfull$Deck<-sapply(full$Cabin, function(x) strsplit(x,NULL)[[1]][1])\r\ndeck.fit<-rpart(Deck~Pclass+Fare,data=full[!is.na(full$Deck),])\r\nfull$Deck[is.na(full$Deck)]<-as.character(predict(deck.fit,full[is.na(full$Deck),],type='class'))\r\nfull$Deck[is.na(full$Deck)]<-'UNK'\r\n\r\n#Excat Position from Cabin number\r\nfull$CabinNum<-sapply(full$Cabin,function(x) strsplit(x,'[A-Z]')[[1]][2])\r\nfull$num<-as.numeric(full$CabinNum)\r\nnum<-full$num[!is.na(full$num)]\r\nPos<-kmeans(num,3)\r\nfull$CabinPos[!is.na(full$num)]<-Pos$cluster\r\nfull$CabinPos<-factor(full$CabinPos)\r\nlevels(full$CabinPos)<-c('Front','End','Middle')\r\nfull$num<-NULL\r\n#side.train<-full[!is.na(full$Side),]\r\n#side.test<-full[is.na(full$Side),]\r\n#side.fit<-rpart(Side~FamilyId+FamilySize,side.train,method='class')\r\n#full$Side[is.na(full$Side)]<-as.character(predict(side.fit,side.test,type='class'))\r\n\r\n#factorize the categorical variables\r\nfull<-transform(full,\r\n                Pclass=factor(Pclass),\r\n                Sex=factor(Sex),\r\n                Embarked=factor(Embarked),\r\n                Title=factor(Title),\r\n                Mother=factor(Mother),\r\n                Child=factor(Child),\r\n                FamilyId2=factor(FamilyId2),\r\n                Deck=factor(Deck)\r\n                )\r\n\r\n#split train/test data\r\ntrain<-full[full$Cat=='train',]\r\ntest<-full[full$Cat=='test',]\r\ntrain$Survived<-factor(train$Survived)"
 }
],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"}}, "nbformat": 4, "nbformat_minor": 0}