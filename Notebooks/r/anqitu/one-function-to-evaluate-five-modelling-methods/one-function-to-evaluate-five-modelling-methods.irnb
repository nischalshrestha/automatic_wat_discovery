{"cells":[{"metadata":{"_uuid":"e7113870413f4182a59e6524ee50522451ac56bf","_cell_guid":"ed37a9e9-52f9-4ddb-8d33-e7ce77bff845"},"cell_type":"markdown","source":"Several modelling methods, including Logistic Model, Decision Tree, Random Forest, Gradient Boosting and Support Vector Machine will be used to predict the survival. My favourite part is the ONLY ONE function to evaluate all models to compare their performance."},{"metadata":{"_uuid":"1322bfc2c674516f6b882abba9d630fe13088db2","_cell_guid":"415517d0-87f2-4f1d-8cf8-28486ad63db0"},"cell_type":"markdown","source":"# 1. Data preprocessing"},{"metadata":{"_uuid":"731d85d5dab857d9a88c1f97b673356d3e174f83","_cell_guid":"ceb78138-3292-4048-abd9-2a3fabb08f85"},"cell_type":"markdown","source":"## 1.0. Combine both sets of data for data preprocessing"},{"metadata":{"_kg_hide-input":false,"_kg_hide-output":true,"_uuid":"8ded0aa21173540c4ea75f9faf064326e0fbd49b","trusted":true,"_cell_guid":"567b42f8-9b08-43d6-ac03-4272d8131e19"},"cell_type":"code","source":"library(dplyr)\ntest_data <- read.csv(\"../input/test.csv\")\ntrain_data <- read.csv(\"../input/train.csv\")\nfull  <- bind_rows(train_data,test_data)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":false,"_uuid":"658eed697b52e316e869e74b105b3bb3b7892410","trusted":true,"_cell_guid":"da76269b-9075-4a8e-9c93-597c715b2b0c"},"cell_type":"code","source":"summary(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9da4a1cb3e7d19b6e0ef21cfa658e0e5781aa586","_cell_guid":"004eeaa8-d0af-4f6c-80ea-f909487e7d59"},"cell_type":"markdown","source":"## 1.1. Factoring"},{"metadata":{"_execution_state":"idle","_uuid":"54c4f10c186d17c38c2fd8200e69af2a966912ed","trusted":true,"_cell_guid":"46b63cae-51f9-4967-898a-b0e455a79a87"},"cell_type":"code","source":"# Summary shows that some variables are treated as continuous, which need to be factored\nfull$Survived <- factor(full$Survived)\nfull$Pclass <- factor(full$Pclass,levels = c(1,2,3),labels=c(\"Upper\",\"Middle\",\"Lower\"))\nfull$Name <- factor(full$Name)\nfull$Ticket <- factor(full$Ticket)\nfull$Embarked <- factor(full$Embarked, levels = c(\"C\",\"Q\",\"S\"),labels=c(\"C\",\"Q\",\"S\"))\nfull$Cabin <- factor(full$Cabin)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ef14366c31d13f450b784dfe6821b43a451e0ea0","_cell_guid":"c74348bd-f16c-400a-a411-3d0fa49ca064"},"cell_type":"markdown","source":"# 1.2. Drop unnecessary columns "},{"metadata":{"_uuid":"e58499bcff376e72586fc427bf4fa04ddda134f6","trusted":true,"_cell_guid":"4fad9453-620a-4673-98ea-05ed2ea4e3df"},"cell_type":"code","source":"# Name which is not helpful and Cabin which has many missing values\nfull <- subset(full, select = -c(Name, Cabin))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"beeeb7cb26b6bc87c6022d0bd63760fddb63412a","_cell_guid":"55b15919-8b82-4344-8d33-5ec1c5049eb7"},"cell_type":"markdown","source":"## 1.3. Add possibly relavant colomns"},{"metadata":{"_uuid":"9ae4bfd5e32b4870b62f268eb997a67244ecdcfd","trusted":true,"_cell_guid":"027c9957-6735-4440-8d48-7051e4e3d74b"},"cell_type":"code","source":"# 'RepeatedTickets' and 'HasRepeatedTickets' column\nticket_counts <- as.data.frame(table(full$Ticket))\ncolnames(ticket_counts) <- c(\"Ticket\",\"RepeatedTickets\")\nfull <- merge(full,ticket_counts,by=\"Ticket\")\nfull <- subset(full, select = -c(Ticket))\nfull <- full[order(full$PassengerId),] \n\n# Create a IsSingle variable including the passenger themselves\nfull$IsSingle <- factor(ifelse((full$SibSp+full$Parch)== 0, 'Yes','No'))\nfull$SibSp <- factor(full$SibSp)\nfull$Parch <- factor(full$Parch)\nlevels(full$Parch)[levels(full$Parch) %in%  c('5','6','9')] <- '>5'","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7a1d703ecb6467e3983bb92419e7944cb5731be3","_cell_guid":"66014131-cf7c-40b8-8e82-e52ea746a9ed"},"cell_type":"markdown","source":"## 1.4. Fix missing/empty values with mice"},{"metadata":{"_kg_hide-output":true,"_uuid":"cb2f082c046ade33fa54daf37f3b42a6a79dcced","trusted":true,"_cell_guid":"071bca15-e217-4e1f-b192-ff307ca08363"},"cell_type":"code","source":"# Age, Fare ad=nd Embarked has NAs\nlibrary(mice)\nset.seed(1912)\nfull_mice <- mice(subset(full, select = -c(Survived)),m = 1, meth='rf')\nfull_complete <- complete(full_mice)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bd86731d933e79fb22623f3be735ebda2fc1e224","trusted":true,"_cell_guid":"02f6de6d-bf17-428c-a127-b35e60e54444"},"cell_type":"code","source":"# Check distribution before and after fixing missing values\ndensityplot(full_mice)\n\n# Complete the data\nfull$Age <- full_complete$Age\nfull$Fare <- full_complete$Fare\nfull$Embarked <- full_complete$Embarked","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"32e22da34de9be5ab654fa9813716a31f6063a47","_cell_guid":"51fd8bdf-f6c8-4fc7-83a6-d4de1a754605"},"cell_type":"markdown","source":"## 1.5 Get back splitted trainset data and testset data by their row number"},{"metadata":{"_uuid":"c0e14f54d52f56800b1d049d4d10eb602dc93869","trusted":true,"_cell_guid":"a3b7ba1d-3565-4aca-a688-8e1c858001f0"},"cell_type":"code","source":"full_train <- full[1:891,]\nfull_test <- full[892:1309,]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"13a1184d96d8df13d2ab2289ca2590b4cf6d4364","_cell_guid":"011aadef-98b5-4d30-9e29-e84067a24268"},"cell_type":"markdown","source":"# 2. Data Exploration and Visualization\nHere, we use data plotting to visualize the relationship between the different variables(X) and survival(Y).\n'ggthemes' provides several plotting themes to make the plots more visually appealling."},{"metadata":{"_uuid":"bcd85b86f5581c53e7f03e3490b1c46942ea0439","trusted":true,"_cell_guid":"90285870-9ea2-450e-85d6-034ac2053229"},"cell_type":"code","source":"library(ggplot2)\nlibrary(ggthemes)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5a9079eb580d971e47aaf92570e79aff71df93be","_cell_guid":"e38d038d-c54a-4feb-8b69-1dcc52b811c0"},"cell_type":"markdown","source":"## 2.1. Use boxplot for categorical variables to compare the possobility of surviving"},{"metadata":{"_uuid":"e937774dc40d01697e16664c7d1b54a7691b9cd1","trusted":true,"_cell_guid":"4299d0b7-8e37-4128-be00-d3621c5def52"},"cell_type":"code","source":"# People with lower class has lower rate of surviving\nggplot(full_train, aes(x = Pclass, fill = Survived)) +\n  geom_bar(stat='count', position='dodge') +\n  labs(x = 'Ticket class') +\n  geom_text(stat='count',aes(label=..count..),vjust=-1, position = position_dodge(width = 1)) +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"76cc8512b542178c7a6e7b762a9a9d2a27244f18","trusted":true,"_cell_guid":"8ca3abac-f6b9-4849-8184-1087d5e34c46"},"cell_type":"code","source":"# Men has lower rate of surviving\nggplot(full_train, aes(x = Sex, fill = Survived)) +\n  geom_bar(stat='count', position='dodge') +\n  geom_text(stat='count',aes(label=..count..),vjust=-1, position = position_dodge(width = 1)) +\n  labs(x = 'Sex') +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4cee412a17b9c0b643c5bf523db21a6d9f923aa8","trusted":true,"_cell_guid":"5cfda7a8-7e5d-48f9-9a49-824b5d93040f"},"cell_type":"code","source":"# People with one/two siblings/spouses has slightly higher rate of surviving\nggplot(full_train, aes(x = SibSp, fill = Survived)) +\n  geom_bar(stat='count', position='dodge') +\n  labs(x = 'No. of Siblings / Spouses') +\n  geom_text(stat='count',aes(label=..count..),vjust=-1, position = position_dodge(width = 1)) +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"83fe90d2d221bf80db86a93010f14a38eefe5901","trusted":true,"_cell_guid":"b7ad1be3-b0b8-4783-9a1a-35bb24958b36"},"cell_type":"code","source":"# People with one/two parents/children has higher rate of surviving\nggplot(full_train, aes(x = Parch, fill = Survived)) +\n  geom_bar(stat='count', position='dodge') +\n  labs(x = 'No. of Parents / Children') +\n  geom_text(stat='count',aes(label=..count..),vjust=-1, position = position_dodge(width = 1)) +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fe8c77221436d1915a326a890c58c2f50941dae0","trusted":true,"_cell_guid":"6d571ca3-b5fd-4695-8503-c52d86f824e1"},"cell_type":"code","source":"# People who are single are less likely to survive\nggplot(full_train, aes(x = IsSingle, fill = Survived)) +\n  geom_bar(stat='count', position='dodge') +\n  labs(x = 'Is Single') +\n  geom_text(stat='count',aes(label=..count..),vjust=-1, position = position_dodge(width = 1)) +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"55fe539692a49bc0dd7ee02d8051fb0d9809d1f6","trusted":true,"_cell_guid":"0bf584b2-3a77-477a-9870-d5a4832a96ea"},"cell_type":"code","source":"# People embarked in Cherbourg are more likely to survive\nggplot(full_train, aes(x = Embarked, fill = Survived)) +\n  geom_bar(stat='count', position='dodge') +\n  labs(x = 'Embarked') +\n  geom_text(stat='count',aes(label=..count..),vjust=-1, position = position_dodge(width = 1)) +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d18aafda8696a7d10aea14aea2ca8ca20797f4d9","_cell_guid":"4b9689dc-a84e-46e2-9e22-3483689a39dc"},"cell_type":"markdown","source":"## 2.2. Use boxplot for continuous variables to compare the possobility of surviving\n"},{"metadata":{"_uuid":"c8e14da4d9fbd347dfd1be2ce1488173ab0381b0","trusted":true,"_cell_guid":"a6b836ea-82c9-462a-962c-d97fb82aa54c"},"cell_type":"code","source":"ggplot(full_train, aes(x = Survived, y= Age)) +\n  geom_boxplot() +\n  labs(x = 'Ticket class') +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"67020003aed24ee803e68a8fff2c1a46afed3fdb","trusted":true,"_cell_guid":"0865998a-5e54-4282-820c-b3d443cc0ef8"},"cell_type":"code","source":"# People paying for higher fare are more likely to survive\nggplot(full_train, aes(x = Survived, y= Fare)) +\n  geom_boxplot() +\n  labs(x = 'Fare') +\n  theme_economist()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3a20d87c930457144b93b88183f0f6e8e367286e","trusted":true,"_cell_guid":"ba1fd45d-a1f5-4c92-903c-3e7632ccbb0c"},"cell_type":"code","source":"ggplot(full_train, aes(x = Survived, y= RepeatedTickets)) +\n  geom_boxplot() +\n  labs(x = 'RepeatedTickets') +\n  theme_economist()\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d6ddbef94117d1154a39810614418c6a248b94b5","_cell_guid":"19f828f4-8b74-4f3a-9f47-ce1abc5d7bbf"},"cell_type":"markdown","source":"# 3. Model Building"},{"metadata":{"_uuid":"d2d7a1660530e9c89667ad62f3889f6afba58be8","_cell_guid":"002b3744-4b7a-4aaf-b930-5fa5d99baf02"},"cell_type":"markdown","source":"# 3.0 Preparation\nBefore the model building starts, we need to do some preparation for the data.\n'caTools' provides a good splitting method with randomness."},{"metadata":{"_kg_hide-output":true,"_uuid":"8a63e7536dab2adc97930460b6b5da1c2275b5e4","trusted":true,"_cell_guid":"acf1c3f7-b641-4422-92e0-61c8bd51ede4"},"cell_type":"code","source":"# split trainset data\nlibrary(caTools)\nset.seed(1912)\n# Generate a random number sequence that can be reproduced to verify results.\n# 70% trainset. Stratify on Y = Survived \nsplit <- sample.split(Y = full_train$Survived, SplitRatio = 0.7)\ntrainset <- subset(full_train, split == T)\ntestset <- subset(full_train, split == F)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"889e7408483f4b704b031b3b0ea271af4402e2dc","_cell_guid":"a9613bc3-42af-4ac0-b6a3-a67ad838fe88"},"cell_type":"markdown","source":"It is convenient to create a data frame to store the accuracy rates of all models when you build many models.\nA function to analyse each model's performance is also useful and can be reused for many other projects."},{"metadata":{"_kg_hide-output":true,"_uuid":"ece643d01c0cef2a115a4fb428d1524dbe21b3eb","trusted":true,"_cell_guid":"259e019c-d4ba-4113-8a75-da9d721fbe77"},"cell_type":"code","source":"# a dataframe for storing result\nresult <- data.frame(model=character(),\n                     dataset=character(),\n                     error_rate=double(),\n                 accuracy_rate=double(),\n                 auc=double())\n\n# function for testing error rate \nlibrary(ROCR)\ntest <- function(name, dataset, testdata, model, result, model_type) {\n  # Output the probability from the logistic function for test cases in the data.\n  if (model_type == 'glm'){\n    predict_prob <- predict(model, newdata = testdata, type = \"response\")\n    # Set the threshold for predicting Y = 1 based on probability. One choice is to use the proportion of 1 (survived) in the data.\n    threshold <- 0.5\n    predict <- ifelse(predict_prob >= threshold, 1, 0) \n    roc_pr <-  prediction(predict_prob, \n                          testdata$Survived)\n    perform <- performance(roc_pr,measure = \"tpr\",\n                           x.measure = \"fpr\")\n    auc <- performance(roc_pr,measure=\"auc\")\n    auc <- auc@y.values[[1]]\n  }\n  \n  if (model_type == 'tree'){\n    predict_prob <- predict(model,testdata, type=\"prob\")[,2]\n    predict <- predict(model, newdata = testdata, type = \"class\")\n    roc_rpart <- prediction(predict_prob,testdata$Survived)\n    perform <- performance(roc_rpart,measure = \"tpr\",\n                                 x.measure = \"fpr\")\n    auc <- performance(roc_rpart,measure=\"auc\")\n    auc <- auc@y.values[[1]]\n  }\n  \n  if (model_type == 'gbm'){\n    predict_prob <- predict(model,testdata, type=\"prob\")[,2]\n    predict <- predict(model, newdata = testdata)\n    roc_rpart <- prediction(predict_prob,testdata$Survived)\n    perform <- performance(roc_rpart,measure = \"tpr\",\n                           x.measure = \"fpr\")\n    auc <- performance(roc_rpart,measure=\"auc\")\n    auc <- auc@y.values[[1]]\n  }\n  \n  \n  # Create a confusion matrix with actuals on rows and predictions on columns based on the entire dataset credit.\n  print(table(testdata$Survived, predict))\n  \n  # Error Rate, assuming equal weightage to FP & FN.\n  error_rate <- round(mean(testdata$Survived != predict),3)\n  print(paste('Error Rate =', error_rate))\n  print(paste('Accuracy Rate =', 1 - error_rate))\n  print(paste('AUC', auc))\n  df<-data.frame(name,dataset,error_rate,1-error_rate, auc)\n  names(df)<-c(\"model\",\"dataset\",\"error_rate\", \"accuracy_rate\", \"auc\")\n  result <<- rbind(result, df)\n}","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0e5b11ef1aed74a68667e5a5524ec9f3b8a96810","_cell_guid":"10e5dba1-398d-45fe-97c9-be4025dc4330"},"cell_type":"markdown","source":"## 3.1. Logistic model"},{"metadata":{"_uuid":"4235903ad11ceaf02e2c9580213563d5a95ffbd8","trusted":true,"_cell_guid":"6f3593dd-2322-471e-88e4-39c39141fc4f"},"cell_type":"code","source":"# First logistic model with all relevant variables\nglm1_full <- glm(Survived ~ .-PassengerId, family = binomial, data = trainset)\ntest('glm1_full','trainset',trainset, glm1_full, result, 'glm')\ntest('glm1_full','testset', testset, glm1_full, result, 'glm')\nsummary(glm1_full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cc2ae0d3eb261e4b970612d38e4acbe2fbd62ce1","trusted":true,"_cell_guid":"f9a4f601-68ac-4229-b90a-08387cd2438e"},"cell_type":"code","source":"# glm2 built with variables of significant level (has * in summary) in the full model\nglm2 <-glm(Survived ~ Pclass + Sex + Age + SibSp3, family = binomial, data = trainset)\nsummary(glm2)\ntest('glm2','trainset',trainset, glm2, result, 'glm')\ntest('glm2','testset', testset, glm2, result, 'glm')","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"_uuid":"85e4b101240727108f5ec88f3fa66a1fa171d8c2","trusted":true,"_cell_guid":"8a2d7483-5026-4d29-b16f-49ad1f8b4bcc"},"cell_type":"code","source":"# glm3 by step method from glm1_full\nglm3 <- step(glm1_full, data = trainset)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4de27f267edf70c1828615c0d8368754668baf75","trusted":true,"_cell_guid":"d3868fb4-a07f-4f6c-a72e-3e0a8498dbe7"},"cell_type":"code","source":"summary(glm3)\ntest('glm3','trainset',trainset, glm3, result, 'glm')\ntest('glm3','testset', testset, glm3, result, 'glm')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1c1edeac06d0232149bc4047c40f10416cb3ce08","_cell_guid":"a1c8f20f-051c-4093-9f31-e4cdfcfd4f02"},"cell_type":"markdown","source":"## 3.2. Decision Tree Model (Classification)"},{"metadata":{"_uuid":"fc8c06273ef72ba17b3c5aec0d6dfb6f66340e36","trusted":true,"_cell_guid":"9e12fb72-b80f-49cb-a16e-c6c254dbd2b6"},"cell_type":"code","source":"library(rpart)\nlibrary(rpart.plot)\t\t\t# For Enhanced tree plots via PRP()\n\n# The first unpruned model\ntree1 <- rpart(Survived ~ Pclass + Sex + Age + \n                 SibSp + Parch + Fare +\n                 Embarked + + RepeatedTickets + IsSingle, data = trainset, method = 'class', control = rpart.control(minsplit = 2, cp = 0))\ntest('tree1','trainset',trainset, tree1, result, 'tree')\ntest('tree1','testset', testset, tree1, result, 'tree')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d22c8283517c06f873b826ebb2b200d84bd41ac7","trusted":true,"_cell_guid":"2f6d596b-d39a-4578-90dc-7ff2b09ff020"},"cell_type":"code","source":"# We need to prune the tree to prevent overfitting as shown \n# in the low accuracy rate for the test set\n# Optimal cp = cp that result in lowest CV error.\ncp.opt <- tree1$cptable[which.min(tree1$cptable[,\"xerror\"]),\"CP\"]\n# Prune the max tree m2 using a particular cp value (i.e. a specified penalty level for model complexity)\ntree2 <- prune(tree1, cp = cp.opt)\nprp(tree2, type=2, extra=104, nn=T, nn.box.col = 'light blue')\ntest('tree2','trainset',trainset, tree2, result, 'tree')\ntest('tree2','testset', testset, tree2, result, 'tree')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"15ced425a9bd7227ed41b8461b139e28123bae7e","_cell_guid":"7aaf89a4-5b82-4c1e-b99e-ce6d8e00cdd0"},"cell_type":"markdown","source":"## 3.3. RandomForest Model (Classification)"},{"metadata":{"_kg_hide-output":true,"_uuid":"19031f75382d7076809814da883d52526bf7c654","trusted":true,"_cell_guid":"b7df91b9-e271-43b2-866b-e865a2e2a792"},"cell_type":"code","source":"library(randomForest)\n\n# rf1_full\nrf1 <- randomForest(Survived ~ .-PassengerId,   data=trainset)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a68836a6c47530955a005b4eefb637b60bc082f2","trusted":true,"_cell_guid":"abcb4024-f96c-4857-a4e7-19d3b82a0842"},"cell_type":"code","source":"test('rf1','trainset',trainset, rf1, result, 'tree')\ntest('rf1','testset', testset, rf1, result, 'tree')","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"_uuid":"7a90adf2f801c81caed645fff6b91138b10ace7c","trusted":true,"_cell_guid":"f3e5bf52-f995-4258-b632-441cbacf91e7"},"cell_type":"code","source":"# Get important variables for the second model to be built\nlibrary(varSelRF)\nrf.vs1 = varSelRF(subset(trainset, select=-c(PassengerId, Survived)),\n                  trainset$Survived, ntree = 200, ntreeIterat = 100,\n                  vars.drop.frac = 0.2)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"947d4d5b2c8eaf77f9fd5393ac6c73cb99cfc7d7","trusted":true,"_cell_guid":"43580ca7-cf4d-4209-8b49-a75b08b7e9ac"},"cell_type":"code","source":"#rf2 with selected avriables\nrf2 <- randomForest(Survived ~ Fare+Pclass+RepeatedTickets+Sex,   data=trainset)\ntest('rf2','trainset',trainset, rf2, result, 'tree')\ntest('rf2','testset', testset, rf2, result, 'tree')","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"_uuid":"ee559a077c6d7ce684c8d6a26220b2b8ced1b4c9","trusted":true,"_cell_guid":"21702db8-5330-4b20-b8eb-157179545680"},"cell_type":"code","source":"# Third model by Tuning\ntune <- tuneRF (subset(trainset, select=-c(PassengerId, Survived)),\n                trainset$Survived,\n                ntreeTry = 500)\nrf3 <- randomForest(Survived ~ .-PassengerId,   data=trainset,\n                             ntree=1000,mtry=3, do.trace=50)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1a305e1962a6f9b71b4380911ee0f67f20b262e0","trusted":true,"_cell_guid":"d1e0e3f6-6877-48e2-9f26-7e207cb7e995"},"cell_type":"code","source":"test('rf3','trainset',trainset, rf3, result, 'tree')\ntest('rf3','testset', testset, rf3, result, 'tree')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"391e8556dbbb24d896c3afdee1c4ab5a826a37a6","trusted":true,"_cell_guid":"3f364a0b-f687-4256-867e-b7e05d32ea60"},"cell_type":"code","source":"# Select variables from the 3rd model\nrf.vs3 = varSelRF(subset(trainset, select=-c(PassengerId, Survived)),\n                  trainset$Survived, ntree = 1000, mtry=3,ntreeIterat = 100,\n                  vars.drop.frac = 0.2)\nrf.vs3\n\n#rf4 with selected avriables\nrf4 <- randomForest(Survived ~ Pclass+Sex,   data=trainset,\n                    ntree=1000,mtry=3, do.trace=50)\ntest('rf4','trainset',trainset, rf4, result, 'tree')\ntest('rf4','testset', testset, rf4, result, 'tree')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4404675eca45977a991c1298792a1b28b3c76e46","_cell_guid":"2c49cd66-dc8e-4385-b0b8-635663ab17bb"},"cell_type":"markdown","source":"## 3.4. Gradient Boosting"},{"metadata":{"_kg_hide-output":true,"_uuid":"ce036189412b13fbdd4cea67fbb8698a145ebf39","trusted":true,"_cell_guid":"c703f053-5853-4300-921e-377bcb49bfb6"},"cell_type":"code","source":"#TUNING PARAMETERS FOR GBM \nlibrary('caret')\nlibrary('gbm')\ngbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9), \n                        n.trees = (1:30)*50, \n                        shrinkage = 0.01,\n                        n.minobsinnode = 20)\nfitControl <- trainControl(method = \"repeatedcv\",\n                           number = 4,\n                           repeats = 4,\n                           ## Estimate class probabilities\n                           classProbs = FALSE,\n                           ## Evaluate performance using \n                           ## the following function\n                           savePredictions = T)\n\ngbmFit1 <- train(Survived ~ .-PassengerId, \n                 data = trainset, \n                 method = \"gbm\", \n                 trControl = fitControl, \n                 verbose = FALSE, \n                 ## Now specify the exact models \n                 ## to evaluate:\n                 tuneGrid = gbmGrid)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"26bd3da7a165f9038f0a9a6f2abb06a0106fde1d","trusted":true,"_cell_guid":"f88e06ab-ed0a-460d-b925-e4520651bd8b"},"cell_type":"code","source":"test('gbmFit1','trainset',trainset, gbmFit1, result, 'gbm')\ntest('gbmFit1','testset', testset, gbmFit1, result, 'gbm')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3f1f12741503b778e0cacf058da44eff7780477f","_cell_guid":"0529541d-b15b-4900-b637-24b3f1deb1be"},"cell_type":"markdown","source":"## 3.5. Support Vector Machine"},{"metadata":{"_kg_hide-output":true,"_uuid":"d852615f5c529841e2c86182c230e778882869de","trusted":true,"_cell_guid":"d28ac904-8d30-48cc-96fd-9931dcaff1fe"},"cell_type":"code","source":"ctrl <- trainControl(method=\"cv\",\n                     number = 2,\n                     summaryFunction=twoClassSummary,\n                     classProbs=TRUE)\ngrid <- expand.grid(sigma = c(.01, .015, 0.2),\n                    C = c(0.75, 0.9, 1, 1.1, 1.25))\nlibrary(kernlab)\ntrainset$Survived <- factor(trainset$Survived, levels =c(0,1), labels=c(\"died\",\"survived\"))\ntestset$Survived <- factor(testset$Survived, levels =c(0,1), labels=c(\"died\",\"survived\"))\nsvm_Linear <- train(Survived ~ .-PassengerId, \n                    data = trainset, \n                    method = \"svmRadial\",\n                    metric=\"ROC\",\n                    trControl=ctrl,\n                    tuneGrid=grid\n)\nsvm_Linear","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0e884a11a79f49588fe5b1548b186cd9eb9946d2","trusted":true,"_cell_guid":"b291d9c0-cac8-44e9-a18c-fc95b6884d09"},"cell_type":"code","source":"test('svm_Linear','trainset',trainset, svm_Linear, result, 'gbm')\ntest('svm_Linear','testset', testset, svm_Linear, result, 'gbm')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a92f97479d0f3402ab20f1e5c9dfef968defc5c1","_cell_guid":"166053e5-1677-447b-92d0-1002f15e002c"},"cell_type":"markdown","source":"# 4. Compare performance for all models built so far"},{"metadata":{"_uuid":"1477e3207a5d49535d1695ad708294294ce9aaa7","trusted":true,"_cell_guid":"73d7856a-4bf2-4919-bb58-122593d54894"},"cell_type":"code","source":"# Order the testset result by Accuracy rate or AUC\ntestset_result <- result[result$dataset=='testset',]\ntestset_result[order(testset_result$accuracy_rate,  decreasing = TRUE),]\ntestset_result[order(testset_result$auc,  decreasing = TRUE),]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9f0a4dd18d296664203b8f6c2918a47c78c40529","trusted":true,"_cell_guid":"5dee02d1-e496-41ec-9730-5c813211ac61"},"cell_type":"code","source":"full_test$Survived <- predict(rf3, newdata = full_test, type = \"class\")\nresult <- subset(full_test,select = c(PassengerId, Survived))\nresult <- transform(result, Survived = as.integer(as.character(Survived)))\nwrite.csv(result, file = \"result.csv\", row.names=F)\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}