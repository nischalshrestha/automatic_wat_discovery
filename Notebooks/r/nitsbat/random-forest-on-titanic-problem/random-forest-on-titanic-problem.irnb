{"cells": [{"execution_count": null, "cell_type": "code", "source": ["library(ggplot2) # Data visualization\n", "library(readr) # CSV file I/O, e.g. the read_csv function\n", "library(stringr)\n", "# Input data files are available in the \"../input/\" directory.\n", "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n", "\n", "system(\"ls ../input\")\n", "\n", "\n", "training <- read.csv(\"../input/train.csv\")\n", "test <- read.csv(\"../input/test.csv\")\n", "test$Survived <- rep(\"None\")\n", "data.combined <- rbind(training,test)\n", "#data.combined[892,]\n", "#table(training$Survived)\n", "#table(training$Pclass)\n", "training$Pclass <- as.factor(training$Pclass)\n", "p <- ggplot(training, aes(x=Pclass,fill= factor(Survived)))\n", "p <- p + geom_histogram(stat=\"count\",width=0.5)+ xlab(\"Pclass\")+ ylab(\"Total Count\")+ labs(fill = \"Survived\")\n", "\n", "dup_names <- as.character(data.combined[which(duplicated(data.combined$Name)),\"Name\"])\n", "dup_names <- data.combined[which(data.combined$Name %in% dup_names),]\n", "master <- data.combined[which(str_detect(data.combined$Name,\"Master.\")),]\n", "misis <- data.combined[which(str_detect(data.combined$Name,\"Miss.\")),]\n", "#misis[1:5,]\n", "mises <- data.combined[which(str_detect(data.combined$Name,\"Mrs\")),]\n", "#mises[1:5,]\n", "mister <- data.combined[which(data.combined$Sex == \"male\"),]\n", "#mister[1:5,]\n", "extract_title <- function(name){\n", "  name <- as.character(name)\n", "  \n", "  if(length(grep(\"Miss.\",name)) > 0){\n", "    return(\"Miss.\")\n", "  }\n", "  else if(length(grep(\"Master.\",name)) > 0){\n", "    return(\"Master.\")\n", "  }\n", "  else if(length(grep(\"Mrs.\",name)) > 0){\n", "    return(\"Mrs.\")\n", "  }\n", "  else if(length(grep(\"Mr.\",name)) > 0){\n", "    return(\"Mr.\")\n", "  }\n", "  else{\n", "    return(\"Other\")\n", "  }\n", "}\n", "\n", "title <- NULL\n", "for(i in 1:nrow(data.combined))\n", "{\n", "  title <- c(title,extract_title(data.combined[i,\"Name\"]))\n", "}\n", "\n", "data.combined$title <- as.factor(title)\n", "\n", "\n", "# ggplot() for the newly data\n", "\n", "# as it is only seven yes we can convert it into factor\n", "data.combined$SibSp <- as.factor(data.combined$SibSp)\n", "\n", "\n", "data.combined$SibSp <- as.factor(data.combined$Parch)\n", "\n", "\n", "\n", "# Let's make a family factor and add it to the frame (family size)\n", "\n", "Sib <- c(training$SibSp,test$SibSp)\n", "PAr <- c(training$Parch,test$Parch)\n", "\n", "data.combined$family.size <- as.factor(Sib+PAr+1)\n", "\n", "\n", "#experimenting on Ticket\n", "#data.combined$Ticket[1:5]\n", "tick <- ifelse(data.combined$Ticket == \"\",\"\",substr(data.combined$Ticket,1,1))\n", "\n", "#Adding a column in dat.combined according to ticket letter\n", "data.combined$ticket.letter <- as.factor(tick)\n", "data.combined$Cabin <- as.character(data.combined$Cabin)\n", "#data.combined$Cabin[1:100]\n", "\n", "#Lots of no empty cabins\n", "#Making empty cabins as \"U\" Unknown\n", "data.combined[which(data.combined$Cabin==\"\"),\"Cabin\"] <- \"U\"\n", "#data.combined$Cabin[1:100]\n", "\n", "#look on first letter of cabin and making it a factor\n", "fact <- as.factor(substr(data.combined$Cabin,1,1))\n", "#str(fact)\n", "#levels(fact)\n", "\n", "#adding the variable to dataframe as cabinLeter\n", "\n", "data.combined$cabinLetter <- fact\n", "\n", "#High level plot\n", "library(stringr)\n", "cht <- ifelse(str_detect(data.combined$Cabin,\" \"),\"MC\",\"SC\") #Mc for multiple cabins\n", "#length(which(cht == \"MC\")) \n", "\n", "# Making it a variable of dataframe\n", "data.combined$MulitpleCabin <- as.factor(cht)\n", "data.combined[1:2,]\n", "\n", "    \n", "library(randomForest)\n", "\n", "# creating the default parameters Pclass and title\n", "rf.train <- data.combined[1:891,c(\"Pclass\",\"title\")]\n", "#rf.train[1:50,]\n", "rf.labels <- as.factor(training$Survived)\n", "\n", "set.seed(1234)\n", "# randomForest function takes x and y axis with importance as TRUE and number of decission tree as ntree\n", "rf.1 <- randomForest(x=rf.train,y=rf.labels,importance = TRUE,ntree = 1000)\n", "rf.1\n", "varImpPlot(rf.1)\n", "\n", "\n", "#creating random forest by adding sibsp\n", "rf.train <- data.combined[1:891,c(\"Pclass\",\"title\",\"SibSp\")]\n", "set.seed(1234)\n", "# randomForest function takes x and y axis with importance as TRUE and number of decission tree as ntree\n", "rf.2 <- randomForest(x=rf.train,y=rf.labels,importance = TRUE,ntree = 1000)\n", "#rf.2\n", "varImpPlot(rf.2)\n", "\n", "\n", "#creating random forest by adding \n", "rf.train <- data.combined[1:891,c(\"Pclass\",\"title\",\"Parch\")]\n", "set.seed(1234)\n", "# randomForest function takes x and y axis with importance as TRUE and number of decission tree as ntree\n", "rf.3 <- randomForest(x=rf.train,y=rf.labels,importance = TRUE,ntree = 1000)\n", "#rf.3\n", "varImpPlot(rf.3)\n", "\n", "#creating random forest by adding sibsp and Parch\n", "rf.train <- data.combined[1:891,c(\"Pclass\",\"title\",\"SibSp\",\"Parch\")]\n", "set.seed(1234)\n", "# randomForest function takes x and y axis with importance as TRUE and number of decission tree as ntree\n", "rf.3 <- randomForest(x=rf.train,y=rf.labels,importance = TRUE,ntree = 1000)\n", "#rf.3\n", "varImpPlot(rf.3)\n", "\n", "# By adding family member\n", "rf.train <- data.combined[1:891,c(\"Pclass\",\"title\",\"family.size\")]\n", "set.seed(1234)\n", "# randomForest function takes x and y axis with importance as TRUE and number of decission tree as ntree\n", "rf.4 <- randomForest(x=rf.train,y=rf.labels,importance = TRUE,ntree = 1000)\n", "#rf.4\n", "varImpPlot(rf.3)\n", "\n", "# All\n", "rf.train <- data.combined[1:891,c(\"Pclass\",\"title\",\"family.size\",\"SibSp\",\"Parch\")]\n", "set.seed(1234)\n", "# randomForest function takes x and y axis with importance as TRUE and number of decission tree as ntree\n", "rf.5 <- randomForest(x=rf.train,y=rf.labels,importance = TRUE,ntree = 1000)\n", "#rf.5\n", "varImpPlot(rf.5)\n"], "outputs": [], "metadata": {"_cell_guid": "839b8931-5ed5-42da-b7be-e88303e4306c", "_uuid": "afc9a33b5edc14a9fb9cf1329dba4ac00613203d"}}], "nbformat_minor": 1, "nbformat": 4, "metadata": {"kernelspec": {"name": "ir", "display_name": "R", "language": "R"}, "language_info": {"codemirror_mode": "r", "mimetype": "text/x-r-source", "name": "R", "version": "3.4.2", "pygments_lexer": "r", "file_extension": ".r"}}}