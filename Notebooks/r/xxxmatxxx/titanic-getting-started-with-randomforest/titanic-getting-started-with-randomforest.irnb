{"nbformat_minor": 1, "nbformat": 4, "cells": [{"cell_type": "markdown", "source": ["# **TITANIC DATASET WITH RANDOM FOREST**\n", "\n", "This is my first step on Kaggel world. \n", "\n", "Im doing this dataset with help from tutorial provided by ***Megan L. Risdal***. \n", "\n", "I hope i learn a lot from this"], "metadata": {"_uuid": "ab3b743c8c4bfb9dc16a4a8fc05f7d247230d970", "_cell_guid": "0e62c077-e87e-4c99-b310-2700db3a35fa"}}, {"cell_type": "markdown", "source": ["## 1. Load Package and Read Data"], "metadata": {"_uuid": "b47dca392a9046ebf1d5066c400ee224b0022e4f", "_cell_guid": "e31c8ba6-ae06-4754-9d7f-e08f01ddbd0e"}}, {"cell_type": "markdown", "source": ["Lets start with loading the package"], "metadata": {"_uuid": "4fe4adf533f7a11522f1f11d7f7903a08b265e60", "_cell_guid": "d247a135-adcc-494e-802d-741b77375495"}}, {"source": ["library(\"ggplot2\") # Data visualization\n", "library(\"readr\") # CSV file I/O, e.g. the read_csv function\n", "library(\"ggthemes\") # Data visualization\n", "library(\"scales\") # Data visualization\n", "library(\"dplyr\") # Data manipulation\n", "library(\"mice\") # Imputation\n", "library(\"randomForest\") # Classification Algorithm\n", "\n", "system(\"ls ../input\")\n", "\n"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "ca47cb3bf11be4cff541a70d8fbd285227653178", "_cell_guid": "22b7c502-abc6-4ebd-b8b3-81770998dfc1"}}, {"cell_type": "markdown", "source": ["Read the data from train and test datasets then combine them."], "metadata": {"_uuid": "b2ec71c0a16f3bdb31ae3779be15cbe9c91c87d8", "_cell_guid": "4bdc3ec2-2aa4-42e7-9b2f-d88d1a169e1c"}}, {"source": ["# Start with train data and read it\n", "train <- read.csv(\"../input/train.csv\", stringsAsFactors = F)\n", "test <- read.csv(\"../input/test.csv\", stringsAsFactors = F)\n", "\n", "#combine test and train datasets\n", "full <- bind_rows(train,test)\n", "\n", "# check data\n", "str(train)\n", "str(test)\n", "str(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "e8793df04b695986f64d4281a0e369a4f9e00e2c", "_cell_guid": "ee9c9b3c-ba01-4a0d-ae6e-eba945deb193"}}, {"cell_type": "markdown", "source": ["We see that there are 891 obsevation on train data and 418 observation on test data with 12 variable. \n", "\n", "And we gonna work with both of the datasets making it 1309 observation with 12 variable."], "metadata": {"_uuid": "93880cdab2dfe0301f39ed1f17cecf4e579da445", "_cell_guid": "6ba731a0-e905-4e7f-818a-3467262504ad"}}, {"cell_type": "markdown", "source": ["## 2. Get Useful Information out of Available Variables"], "metadata": {"_uuid": "d9600e5436fbb36382c4cc9c87ad1831954ff6b5", "_cell_guid": "f1256111-3674-4814-ba8f-bf5a16d80b50"}}, {"cell_type": "markdown", "source": ["Lets see the data"], "metadata": {"_uuid": "70410f3df134c1259d79167e17ff61c5af1680ae", "_cell_guid": "2c46943c-fb51-462b-ae68-df21007dfc9b"}}, {"source": ["head(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "f5f1066826949c55844272a2e41e1a7e54ec0e5a", "_cell_guid": "88f28f7f-52e2-404d-8bb9-3b9fe90d03de"}}, {"cell_type": "markdown", "source": ["### **Get the Title and Surname**\n", "From the Passenger name, we can see that there are meaningful variable to it that can be used in the prediciton. There is the **Passenger Title** and there is **Surname**. Lets extract it and get a new variable to the datasets"], "metadata": {"_uuid": "3293a32e24cb2bfc022180128e1dc9735eb4aa6e", "_cell_guid": "b52649e6-a1d9-48da-a42a-c97ad4f24db3"}}, {"cell_type": "markdown", "source": ["**Passenger Title**"], "metadata": {"_uuid": "9daba89f0ea5098be60e38c49e7d1ccebfce067c", "_cell_guid": "2d74df11-71f4-4e1d-a0e9-47606d915ecc"}}, {"source": ["#Extract the Title from Name and make new variable from it\n", "full$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n", "\n", "#See the title counts by sex \n", "table(full$Sex, full$Title)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "611c14b20a98f2d6e2c3a5101c4632286de57766", "_cell_guid": "eceeb11a-1946-4912-922a-8a0909fefd78"}}, {"cell_type": "markdown", "source": ["We can see that there are title with low counts pop-up. We can generalize this to be rare title"], "metadata": {"_uuid": "99abdf30d9573872a5c37127af7d8ca667092f35", "_cell_guid": "a508e8cb-5b95-49cb-96ea-7ecc329cf72c"}}, {"source": ["# Combined very low cell title counts\n", "rare_title <- c(\"Dona\", \"Lady\", \"the Countess\", \"Capt\", \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\")\n", "\n", "# Reassing Mlle, Ms, Mme accordingly\n", "full$Title[full$Title == \"Mlle\"]  <- \"Miss\"\n", "full$Title[full$Title == \"Ms\"]  <- \"Miss\"\n", "full$Title[full$Title == \"Mme\"]  <- \"Mrs\"\n", "full$Title[full$Title %in% rare_title]  <- \"Rare\"\n", "\n", "#See the title by sex again\n", "table(full$Sex, full$Title)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "0d8d482b0d469a6de4adeafb29c4fef8130049fd", "_cell_guid": "11046045-6a10-4c90-babd-41fb0a32507d"}}, {"cell_type": "markdown", "source": ["**Surname**"], "metadata": {"_uuid": "0e6b9652192b0555ee7cb0556aff73e57957e407", "_cell_guid": "4c26ea00-5b26-406d-be69-2ccf0a89ae4a"}}, {"source": ["#Extract the Surname from Name and make new variable from it\n", "full$Surname <- sapply(full$Name,\n", "                       function(x) strsplit(x, split = \"[,.]\")[[1]][1])\n", "#Lets see our data again\n", "head(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "7a89a748d04c905a07905fd8d46344c4960acd95", "_cell_guid": "ea5fa4dc-744e-4014-aee6-57a310e54899"}}, {"cell_type": "markdown", "source": ["We can see that there are new variables on our data (Title and Surname)"], "metadata": {"_uuid": "6b6e70e24dfbeef00d063920a167bb40dbc674b3", "_cell_guid": "2231be94-fe6e-4e6c-a4fd-d48d569e8721"}}, {"cell_type": "markdown", "source": ["### **Do Families Sink or Swim Together? **"], "metadata": {"_uuid": "dec16869d0d314cf7f775de5501e97f66207fca3", "_cell_guid": "99db00f7-1907-48f7-a8ac-fae9bf3bc1db"}}, {"cell_type": "markdown", "source": ["As we get the **Surname** from extracting passenger **Name**,  We can get family relation and their size on each passenger.  Then we can see the relation of their survival.\n", "\n", "First we are going to make a **Famiy Size** variable based on number of siblings/spouse and number of children"], "metadata": {"_uuid": "a15aefb5eb9cf2574eaeb3f0bffa1db516a0f98b", "_cell_guid": "62d5887a-9409-4b64-b0bb-80476df95cd5"}}, {"source": ["#Create a family size variable including the passenger themselves\n", "full$Fsize <- full$SibSp + full$Parch +1\n", "\n", "#Create a family variable\n", "full$Family <- paste(full$Surname, full$Fsize, sep=\"_\")"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "6b03be7249d32681644bf0ca312a9e3d0f776c4a", "_cell_guid": "306999bd-e515-4e96-b50a-8aa689d10239"}}, {"cell_type": "markdown", "source": ["Lets see the relationship between family size and survival from train data (1-891) and visualize it."], "metadata": {"_uuid": "9c14c33d0dee3b14eec4d9c6873c8e23181e7dfe", "_cell_guid": "cadc3aa1-38ee-4f88-b0c6-d5f7d13f62b4"}}, {"source": ["# Use ggplot to Visualize\n", "ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n", "    geom_bar(stat = \"count\", position = \"dodge\") +\n", "        scale_x_continuous(breaks=c(1:11)) +\n", "            labs(x = \"Family Size\") + \n", "                theme_few()"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "ba3149967df55c5f704223e245c8fec25b92d179", "_cell_guid": "ae4fe8dd-b7cf-44a9-b8ad-06104e4c1b22"}}, {"cell_type": "markdown", "source": ["We can see that there is survival penalty for singletons and family size above 4.\n", "\n", "We can collapse this variable to three levels and create **discretized family size** variable"], "metadata": {"_uuid": "a2d891a6fd9d693400ae6930ca8e4780fbfa3f29", "_cell_guid": "83d79dcf-415d-4afb-ad0c-392f9d97d2f4"}}, {"source": ["#Collapse and Discretized Family Size\n", "full$FsizeD[full$Fsize == 1] <- \"Single\"\n", "full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- \"Small\"\n", "full$FsizeD[full$Fsize >4 ] <- \"Large\"\n", "\n", "#Show Discretized Family Size by Survival using mosaic plot\n", "mosaicplot(table(full$FsizeD, full$Survived), main = \"Family Size by Survival\", shade = TRUE)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "7206fbffdcb1ba5a0d52d83749f2c701c1146c63", "_cell_guid": "c28f9720-0b57-42d5-a5a1-c587f79c265c"}}, {"cell_type": "markdown", "source": ["### **Get the Deck of Passenger**"], "metadata": {"_uuid": "a54a8bd59a072db347291c284e90225466b4f01e", "_cell_guid": "698d3f9c-a3fa-4195-b6e6-b5de6c9d5804"}}, {"cell_type": "markdown", "source": ["Another useful information that we can extract is the **Deck** of passenger from **Cabin** variable."], "metadata": {"_uuid": "875c955ec09eca373b85baaf7f1c7769a74fd073", "_cell_guid": "195e5d97-b029-4993-8db8-8f0edec32bbf"}}, {"source": ["#Lets check passenger cabin (seems have a lot of missing value)\n", "full$Cabin[1:28]"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "f53497c5e6939a0a612fbb7501811933149d4da6", "_cell_guid": "8f768ece-cfee-4210-9d41-e5891bf2a1d1"}}, {"source": ["#The first character is the deck, lets take a look\n", "strsplit(full$Cabin[2], NULL)[[1]]"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "78741e100b70af50953c64b33c6f048b20b5ed8e", "_cell_guid": "88057e9a-ca72-45af-9f9f-491577b5b08d"}}, {"source": ["#Create Deck variable\n", "full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)\n", "                            [[1]][1]))"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "244d33b0ed3de0b63e1b74e3c071d0a8d1b79754", "_cell_guid": "ec540bc8-6ffc-4cf3-9236-027f95f2ffc9"}}, {"source": ["#Lets take a look at our data again\n", "head(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "6b4978791b3a0af3bcd5a21d2e485585bd93ec0f", "_cell_guid": "2fa0eee5-7412-4669-8d11-f19d33ba5e63"}}, {"cell_type": "markdown", "source": ["##  **3. Deal With Missing Value**"], "metadata": {"_uuid": "438c9f591c9ef2cb285cfa3e84a3979dbe178724", "_cell_guid": "1df060ce-6c89-42c9-9239-5c1270a50903"}}, {"cell_type": "markdown", "source": ["We already get the useful informattion and make them variables. Another step is to deal with missing value of our data"], "metadata": {"_uuid": "f5476e30a61526467bd5b4897d3290f52f9197e0", "_cell_guid": "558c3e3a-32aa-461c-87b7-01c32cb83509"}}, {"cell_type": "markdown", "source": ["### **A. Missing Value on Embarkment and Fare using Value Imputation**"], "metadata": {"_uuid": "8f6618fbbe77aaefc447c9dd198b9625e4ffe81e", "_cell_guid": "16774be9-ce76-43ea-8433-42af575cd6e8"}}, {"cell_type": "markdown", "source": ["Since the **Passenger Class**, **Fare**, and **Embarkment** have quite relation, we can deal missing value on these variable using value imputation based on relevant variables.\n", "\n", "On the Embarkment, we have missing value on Passenger 62, 830\n", "\n", "On the Fare variable, we have missing value on Passenger 1044"], "metadata": {"_uuid": "ce6be95f2601f0785e8d2a9b576bf2db4f25b115", "_cell_guid": "b747f217-83a0-42ca-9ce2-eddf6508339c"}}, {"cell_type": "markdown", "source": ["**Embarkment**"], "metadata": {"_uuid": "53d64101b604336e59e834239adb992baabf903b", "_cell_guid": "92ac9c99-fe3b-4920-8700-d6f440c539ae"}}, {"source": ["#Passenger 62 and 830 missing embarkment\n", "full [c(62,830),]"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "914b8f90de4f88f0bb598374dbde9816939eb759", "_cell_guid": "79b40ce5-fa23-4d03-9c32-d12c26a5dd7b"}}, {"cell_type": "markdown", "source": ["They are on 1st Passenger class and $80 Fare"], "metadata": {"_uuid": "ab362d6a6649b0671897429ed61c577daf2a3a27", "_cell_guid": "7c26181c-c22f-4664-8fae-72e20e040405"}}, {"source": ["#Get rid of missing passenger ID\n", "embark_fare <- full %>% \n", "    filter(PassengerId != 62 & PassengerId != 830)\n", "\n", "#Use ggplot2 to visulize embarkment, passenger class and median fare\n", "ggplot(embark_fare, aes(x = Embarked, y = Fare, fill= factor(Pclass)))+\n", "   geom_boxplot() +\n", "        geom_hline(aes(yintercept = 80), colour = \"red\", linetype = \"dashed\", lwd = 2) +\n", "            scale_y_continuous(labels = dollar_format()) +\n", "                theme_few()\n", "\n"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "2f0d621855a875734592ae7c6c999e929d3a4e12", "_cell_guid": "971b2f95-3d3b-4fc4-b01d-3ca73d81c1d9"}}, {"cell_type": "markdown", "source": ["We can see that the median **Fare**  of Passenger Embarking from  C (Charbourg)  coincide nicely with $80. I think we can safely replace the NA value with 'C'"], "metadata": {"_uuid": "4c0c9c6a6ea73d651bc20bd71d1cc2c7e0be49a4", "_cell_guid": "e5d0439c-ed24-4d10-9895-67b6ddd41477"}}, {"source": ["#Since their fare is 80 for 1st class, they most likely to embarked from 'C', lets fill it!\n", "full$Embarked[c(62,830)] <- \"C\""], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "cf4f3103696f2c8972a08a1a7c3ccc3574fa22d5", "_cell_guid": "02f8244f-6eb4-4782-b0ab-45264aedbfd5"}}, {"cell_type": "markdown", "source": ["**Fare**"], "metadata": {"_uuid": "713b048b06d4c2e2929112e47e834eb816cc742c", "_cell_guid": "413d9e20-d93d-4d28-b59a-971a4f92ad7c"}}, {"source": ["#Passenger 1044 missing Fare\n", "full[1044, ]"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "eaadedf041a2f82717bf98ea0918bb21fc319f8c", "_cell_guid": "f9c17bf3-afa1-4930-a473-978a0fc5a857"}}, {"cell_type": "markdown", "source": ["This is **3rd Class Passenger **  who departed from **S (Southhampton)**. Lets Visualize **Fares** among all others sharing **3rd Class** and **S **Embarkment"], "metadata": {"_uuid": "131673edf0636598cbf56745dfabe9b0a97c1e6a", "_cell_guid": "24788fdf-e1dc-4679-a256-b1e6a70972e2"}}, {"source": ["#Visualize fare among 3rd Class and S Embarkment\n", "ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],\n", "        aes(x = Fare)) +\n", "        geom_density(fill = \"#99d6ff\", alpha = 0.4) +\n", "        geom_vline (aes(xintercept = median(Fare, na.rm=T)),\n", "                   colour = \"red\", linetyp = \"dashed\", lwd =1) +\n", "        scale_x_continuous(labels = dollar_format()) + \n", "                     theme_few()"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "2c2f1a711d559a4d3a77a6714ce6b92d6b97bfd5", "_cell_guid": "76f0c647-79ad-42f4-b2e7-85958dccb795"}}, {"cell_type": "markdown", "source": ["From this visualization, it seems quite reasonable to replace NA Fare value with median for their class and embarkment which is  $8.05."], "metadata": {"_uuid": "c7a2841102f67b0d30aeb7f759a1e89210f118c2", "_cell_guid": "aa7a50c5-ba0f-4379-80ba-e0a4d0b49413"}}, {"source": ["#Replacing missing value of Fare with median Fare of class/embarkment\n", "full$Fare[1044] <- median(full[full$Pclass == \"3\" & full$Embarked == \"S\",]$Fare, na.rm = TRUE)\n", "\n", "#Lets see our data now\n", "str(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "fad00d67cd42024ba74b0d73edbe6b84db8a5d9d", "_cell_guid": "501bc8fe-32f8-460c-b754-f228add833d4"}}, {"cell_type": "markdown", "source": ["### **B. Missing Value on Age using Value Prediction**"], "metadata": {"_uuid": "88acea4c9eadb3c6fe90cb7ffc25cf55f8879d04", "_cell_guid": "f6ce0250-74b7-4ad7-a5a9-6d2f284ff121"}}, {"cell_type": "markdown", "source": ["To deal with missing value on age, We will create **model of predicting Age** based on other variables using **mice** package."], "metadata": {"_uuid": "172885dbeb670f49ebbdf4a1a968966fde62538d", "_cell_guid": "8862df83-8526-42b1-979c-c7415295d9ef"}}, {"source": ["#See number of missing value on Age\n", "sum(is.na(full$Age))"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "ef8fbe39e0421727d2617cf803d097a76499857c", "_cell_guid": "10a344d0-a254-4950-acfd-a3a48a68c564"}}, {"cell_type": "markdown", "source": ["To be able to use mice imputation prediction, We need the variables to be used as predictor as a factor. "], "metadata": {"_uuid": "9bedd7d4bf173b94b4cfd701f717b1af7d89141a", "_cell_guid": "88534eb4-f75c-43e4-9aa2-e49c06f05ce9"}}, {"source": ["# Make variables into factors\n", "factor_vars <- c(\"PassengerId\", \"Pclass\", \"Sex\", \"Embarked\", \"Title\", \"Surname\", \"Family\",\"FsizeD\")\n", "\n", "full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n", "\n", "# Lets see our data again\n", "str(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "8316cfc81c75f6221e88749902f260d96b0552fb", "_cell_guid": "4f794bb4-9870-4a22-97a1-1a1581b9eec6"}}, {"source": ["#Set a random seed\n", "set.seed(129)\n", "\n", "#Perform mice imputation, excluidng less than seful variables\n", "mice_mod <- mice(full[, !names(full) %in% c(\"PassengerId\",\"Name\",\"Ticket\",\"Cabin\",\"Family\",\"Surname\",\"Survived\")], method = \"rf\")"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "6518036d652389b63c96bd634da2e4543ca729ed", "_cell_guid": "6e5edb57-0ee7-4646-8431-95c6758fd825"}}, {"source": ["#Save the complet output\n", "mice_output <- complete(mice_mod)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "4aefb5b81241d69ebb30a0d2ca7187b3fb7fed4e", "_cell_guid": "7235ed7a-89c1-42cb-b67b-a28927531ec1"}}, {"cell_type": "markdown", "source": ["To ensure that our prediction not gone completely awry, We compare it to original distribution"], "metadata": {"_uuid": "4e8710e2ed644fdb3c64b5a215a1b759c8b3d85b", "_cell_guid": "aea9ad7a-f521-4972-b1d2-bf20683d6b5c"}}, {"source": ["#Visualize age distribution\n", "par(mfrow = c(1,2))\n", "hist(full$Age, freq = F, main=\"Age: Original Data\",\n", "    col = \"darkgreen\", ylim=c(0,0.04))\n", "hist(mice_output$Age, freq=F, main=\"Age:Mice Output\",\n", "    col = \"lightgreen\", ylim=c(0,0.04))"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "a8713fb68261a32861706f3395dc6d7b0d307192", "_cell_guid": "8ada9be0-b059-4012-9792-3d7ea5226477"}}, {"cell_type": "markdown", "source": ["The distribution seems good, so lets replace our original data with the output from mice model"], "metadata": {"_uuid": "e99741a3d73a1bdeef244db959b19420ff815639", "_cell_guid": "c2a92cc9-d40b-41e1-98cf-0ffada961e31"}}, {"source": ["#Replace age variable from mice model\n", "full$Age <- mice_output$Age\n", "\n", "# Show new number of missing Age values\n", "sum(is.na(full$Age))"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "989b932cd901834beed56986d0eb3cb96d810fdf", "_cell_guid": "9fd8ce0c-bb06-41d7-aad7-4ceef286aa4e"}}, {"cell_type": "markdown", "source": ["## **4. Get Useful Information out of Available Variables - Round 2**"], "metadata": {"_uuid": "aeae9e9b0bf744b9dc27bb283bbe79b7956da109", "_cell_guid": "d23a114f-800a-426f-84b4-6bae9ba49e1d"}}, {"cell_type": "markdown", "source": ["**Age** variable is no longer missing, so we can extract new useful information from **Age-Dependant** Variables : **Mother **and **Child**.\n", "\n", "Mother is a passenger who 1) Female, 2) Over 18 year old, 3) Has more than 0 Children, 4) Does not have the Title 'Miss'\n", "\n", "Child is a passenger whose age under 18 year old"], "metadata": {"_uuid": "367ec7b75ae7e872182a631e4f551a837df6b039", "_cell_guid": "8be34496-d06c-4e70-a79a-866eff714292"}}, {"source": ["# Create the column child, and indicate whether child or adult\n", "full$Child[full$Age < 18] <- 'Child'\n", "full$Child[full$Age >= 18] <- 'Adult'\n", "\n", "# Show counts of child by survival\n", "table(full$Child, full$Survived)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "0b6f5b597a5277355f13f2300365957256922253", "_cell_guid": "6f619a64-5ee7-4037-bc83-1d001fbb72c2"}}, {"source": ["# Adding Mother variable\n", "full$Mother <- 'Not Mother'\n", "full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n", "\n", "# Show counts of mother by survival\n", "table(full$Mother, full$Survived)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "87c2dd72cb56dca32ae31a825f88ee2df1cc4bb2", "_cell_guid": "ebd5a424-ee15-4d2d-9593-01177cbfca14"}}, {"source": ["# Finish the new variable by factorizing it\n", "full$Child  <- factor(full$Child)\n", "full$Mother <- factor(full$Mother)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "5f364ad40b1d0673b9ef4f320afddd38fdc8e166", "_cell_guid": "f75fe04a-9f96-4234-bede-887f99d847c3"}}, {"cell_type": "markdown", "source": ["Lets take a look at our data again"], "metadata": {"_uuid": "22956206770b2dfcd895055e40a39752926f063e", "_cell_guid": "8b2ebf5e-8e52-4e22-bebe-c8bedf70a5ea"}}, {"source": ["head(full)\n", "str(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "56a6ed54002774d2275f68c6e2c59f2ef2f6ba70", "_cell_guid": "70f20593-5ed4-4c8e-8bbb-1e99ce529500"}}, {"cell_type": "markdown", "source": ["We already succesfully creating new variable of useful information to be included on the prediction of survival on titanice passenger.\n", "\n", "We alse successfully taken care of all the missing values.\n", "\n", "Lets double check to make sure."], "metadata": {"_uuid": "dd1c1b7616fe0a6a38d8280bdf236db995ebc437", "_cell_guid": "304e66a6-d6b5-43dd-8346-48884ec2254b"}}, {"source": ["md.pattern(full)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "c523c363effaad619452fcc30a33f4dd918b34fd", "_cell_guid": "cebbdf5b-0f2e-478d-8c9e-4c0bc5024449"}}, {"cell_type": "markdown", "source": ["## **5. Prediction**"], "metadata": {"_uuid": "cbd3ef31a73def1fcdecbace645df78c5bdafee1", "_cell_guid": "17f7b493-cabc-457a-99c3-db579738d19a"}}, {"cell_type": "markdown", "source": ["Now We are ready to predict survival among titanic passenger based on variables that we extracted and treated the missing values.\n", "\n", "For this prediction, We gonna use **randomForest** classification algortihm"], "metadata": {"_uuid": "d501fa962db36e0a4c139cd487007bd8f88d29f1", "_cell_guid": "1cbde3c2-afe2-4c6a-acd5-6e28bcaf5b44"}}, {"cell_type": "markdown", "source": ["**Lets split our data to train and test datasets**"], "metadata": {"_uuid": "257b14e5e31d2bfb1b753280ad8734e49371ffd9", "_cell_guid": "a698a089-7496-4ba9-b229-762976d5143e"}}, {"source": ["# Split the data back into a train set and a test set\n", "train <- full[1:891,]\n", "test <- full[892:1309,]"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "b698cf04340bbc8faada74da5e7a6078a2d9c1ed", "_cell_guid": "35f16adb-084c-437d-a534-10481e89a7c3"}}, {"cell_type": "markdown", "source": ["**Then lets build our model for prediction using train datasets**"], "metadata": {"_uuid": "77b8979c50dec2efe1716a2238e6309271ad106b", "_cell_guid": "03574d1f-ac2b-4c5f-97e8-567ba10c738a"}}, {"source": ["# Set a random seed\n", "set.seed(754)\n", "\n", "# Build the model (note: not all possible variables are used)\n", "rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked+\n", "                         Title + FsizeD + Child + Mother,\n", "                         data = train)\n", "\n", "# Show model error\n", "plot(rf_model, ylim=c(0,0.36))\n", "legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "1fe3a78a8229c0db711464e27bb1f8022488868f", "_cell_guid": "684e4885-5304-4b79-824e-12d85ba8e29b"}}, {"cell_type": "markdown", "source": ["**Black line** shows the overall error rate which is falls below 20%.\n", "\n", "**Red line** and **Green line** shows the error rate for '**Died**' and '**Survived**' respectively."], "metadata": {"_uuid": "33275bc6485b6217f75718c9e30a2e1186866c12", "_cell_guid": "a1b866f1-b0ae-492b-bf4a-fac855fac479"}}, {"cell_type": "markdown", "source": ["**Lets Look the Variable Importance**\n", "\n", "We can see the relative variable importance by plotting the mean decrease in Gini calculated across trees."], "metadata": {"_uuid": "23394c0f09af55e25bb5286bd8b30c7f8c0134c3", "_cell_guid": "65ccf00f-890f-40a2-9804-ab9eff5db918"}}, {"source": ["# Get importance\n", "importance    <- importance(rf_model)\n", "varImportance <- data.frame(Variables = row.names(importance), \n", "                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n", "\n", "# Create a rank variable based on importance\n", "rankImportance <- varImportance %>%\n", "  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n", "\n", "# Use ggplot2 to visualize the relative importance of variables\n", "ggplot(rankImportance, aes(x = reorder(Variables, Importance), \n", "    y = Importance, fill = Importance)) +\n", "  geom_bar(stat='identity') + \n", "  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n", "    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n", "  labs(x = 'Variables') +\n", "  coord_flip() + \n", "  theme_few()"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "24a569ff493adb9246c3001ed8c87e254d8a3776", "_cell_guid": "9f22d179-ccdb-4314-8fcb-6b0a6a7f9104"}}, {"cell_type": "markdown", "source": ["**Time to Do the Prediction!**"], "metadata": {"_uuid": "21a9547fc122a62b4c2f1af908c7d4f17be8d522", "_cell_guid": "e33e40b0-e7d9-4b22-8cc8-7fffccedb36e"}}, {"source": ["# Predict using the test set\n", "prediction <- predict(rf_model, test)\n", "\n", "# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\n", "solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n", "\n", "# Write the solution to file\n", "write.csv(solution, file = 'Titanic_Solution.csv', row.names = F)\n", "\n", "# Lets take a look of solution\n", "head(solution)"], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {"_uuid": "e26935d6852cf106e8f30a7b909483d5a6d1e45f", "_cell_guid": "1bd41135-93d8-4e52-914d-90a28fa2c40b"}}, {"cell_type": "markdown", "source": ["## **ENDING**\n", "Thank you once again for your [Tutorial ](https://www.kaggle.com/mrisdal/exploring-survival-on-the-titanic)  **Megan Risdal**\n", "\n", "Any feedback is welcome!\n", "\n", "I look forward to explore more!"], "metadata": {"_uuid": "660a7957c820d150c34149b42a41c4c48b80fd96", "_cell_guid": "e55bb6a5-e167-4e5f-9bdf-4edff5c2d22b"}}, {"source": [], "execution_count": null, "cell_type": "code", "outputs": [], "metadata": {}}], "metadata": {"language_info": {"name": "R", "mimetype": "text/x-r-source", "file_extension": ".r", "codemirror_mode": "r", "pygments_lexer": "r", "version": "3.4.1"}, "kernelspec": {"name": "ir", "language": "R", "display_name": "R"}}}