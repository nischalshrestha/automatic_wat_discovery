{"cells":[{"metadata":{"_uuid":"16422e27297c1fab355d5da8be91200d959767be"},"cell_type":"markdown","source":"## A Titanic competition entry with random forest\n"},{"metadata":{"_uuid":"407afc3b9c8b16494d38a7d7abaf45a5a7cc66de","_execution_state":"idle","trusted":true},"cell_type":"code","source":"library(ggplot2)\nlibrary(caret)\nlibrary(dplyr)\nlibrary(randomForest)\nlibrary(rpart)\nlibrary(rpart.plot)\n\ntrain <- read.csv(\"../input/train.csv\", header = TRUE, stringsAsFactors = FALSE)\ntest <- read.csv(\"../input/test.csv\", header = TRUE, stringsAsFactors = FALSE)\ntest$Survived <- NA\nall <- rbind(train, test)\nall$Survived <- as.factor(all$Survived)\n\n#Checking for missing data, a missing data point can be an indication that\n#someone died\nall$MissingData <- apply(all, 1, function(x) any(is.na(x)))\n\nall %>% group_by(MissingData) %>%\n  summarise(n = n()) %>%\n  mutate(share = n / sum(n))\n\n#Name variable contains a last name and title\nall$LastName <- gsub(\", .*\", \"\", all$Name)\n\n#Taking out the title from the name variable\nall$Title = gsub(\".*, |\\\\. .*\", \"\", all$Name)\ntable(all$Title)\n\n#Some weird titles\nmen <- c(\"Capt\", \"Col\", \"Don\", \"Dr\", \"Jonkheer\", \"Major\", \"Rev\", \"Sir\")\nwomen <- c(\"Dona\", \"Lady\", \"Mme\", \"the Countess\")\ngirls <- c(\"Mlle\", \"Ms\")\nall$Title[all$Title %in% men] <- \"Mr\"\nall$Title[all$Title %in% women] <- \"Mrs\"\nall$Title[all$Title %in% girls] <- \"Miss\"\nall$Title <- as.factor(all$Title)\n\n#Pclass is complete and can turned into factor, I don't think it makes sense to \n#view it as numeric\ntable(all$Pclass)\nall$Pclass <- as.factor(all$Pclass)\n\n#Making a ggplot comparing survival by ticket class\nall %>% filter(!is.na(Survived)) %>% \n  group_by(Pclass, Survived = ifelse(Survived == 1, \"Yes\", \"No\")) %>%\n  summarise(n = n()) %>%\n  mutate(share = n / sum(n)) %>%\n  ggplot(aes(Pclass, share, fill = Survived, label = paste(round(share * 100), \"%\", sep =\"\"))) +\n  geom_bar(position = \"stack\", stat = \"identity\", color = \"black\") +\n  geom_text(position = position_stack(vjust = 0.5)) +\n  labs(x = \"Ticket class\", y = \"Survival\", title = \"Survival by ticket class\") +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"98bf59d2c433a68ceb8adb95570f8cb28053565c"},"cell_type":"code","source":"#Sex is complete and can turned into factor\ntable(all$Sex)\nall$Sex <- as.factor(all$Sex)\n\n#Making a ggplot comparing survival by gender and ticket class\nall %>% filter(!is.na(Survived)) %>% \n  group_by(Sex, Pclass, Survived = ifelse(Survived == 1, \"Yes\", \"No\")) %>%\n  summarise(n = n()) %>%\n  mutate(share = n / sum(n)) %>%\n  ggplot(aes(Sex, share, fill = Survived, label = paste(round(share * 100), \"%\", sep =\"\"))) +\n  geom_bar(position = \"stack\", stat = \"identity\", color = \"black\") +\n  geom_text(position = position_stack(vjust = 0.5)) +\n  labs(x = \"Ticket class\", y = \"Survival\", title = \"Survival by ticket class and class\") +\n  scale_y_continuous(labels = scales::percent) +\n  facet_wrap(. ~ Pclass) +\n  theme_bw()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"84bd00c3420af59019550f04cd4ffb1e07ef4e86"},"cell_type":"code","source":"#Have to deal with age as there are so many unknown\nlength(which(is.na(all$Age)))\n\n#SibSp and Parch are both without unknown (although I suspect the data is not 100%\n#correct anyway). Obviously kept as a numeric variable.\nlength(which(is.na(all$SibSp)))\nlength(which(is.na(all$Parch)))\n\n#Adding family size\nall$FamilySize <- all$SibSp + all$Parch + 1\n\n#Ticket is complete but the char values make little sense to me, kept as char\nlength(which(is.na(all$Ticket)))\n\n#One with unknown fare. Shouldn't waste too much time there, replace with median\n#class fare of same family size (fare doesn't seem to be by person but by ticket)\nlength(which(is.na(all$Fare)))\nnoFareRow <- which(is.na(all$Fare))\nall$Fare[noFareRow] <- median(all$Fare[all$Pclass == all$Pclass[noFareRow] & \n                                         all$FamilySize == all$FamilySize[noFareRow]], na.rm = TRUE)\n\nall$FarePerson <- apply(all, 1, function(x) as.numeric(x[\"Fare\"]) / nrow(all[all$Ticket == x[\"Ticket\"], ]))\n\n#Plenty of blanks in Cabin variable but no NA, mostly Pclass 1 have cabin numbers\nlength(which(is.na(all$Cabin)))\ntable(all$Cabin == \"\", all$Pclass)\n\n#No missing embarked, turned to factor\nlength(which(is.na(all$Embarked)))\nall$Embarked <- as.factor(all$Embarked)\n\n#Trying to classify passengers into family/company groups\nall$Family <- NA\nworkData <- all[, c(\"LastName\", \"Ticket\", \"FamilySize\")]\nrepeat {\n  row <- workData[1, ]\n  ticket <- row$Ticket\n  lastName <- row$LastName\n  famSize <- row$FamilySize\n  famData <- workData[workData$LastName == lastName & workData$FamilySize == famSize, ]\n  if (!nrow(famData) == row$FamilySize) {\n    if (nrow(famData[famData$Ticket == ticket, ]) == famSize) {\n      famData <- famData[famData$Ticket == ticket, ]\n    } else {\n      famData <- workData[1, ]\n    }\n  }\n  tickets <- unique(famData$Ticket)\n  famData <- workData[workData$Ticket %in% tickets, ]\n  famCount <- nrow(famData)\n  lastNames <- paste(unique(famData$LastName), collapse = \"/\")\n  indices <- row.names(famData)\n  if (famCount > 1) all[row.names(all) %in% indices, \"Family\"] <- paste(lastNames, famCount, ticket)\n  workData <- workData[!row.names(workData) %in% indices, ]\n  if (nrow(workData) == 0) {\n    break\n  }\n}\n\n#Now that we have families, let's create two variables indicating whether a family member\n#survived or died\nall$FamilyLive <- NA\nall$FamilyDied <- NA\nfor (i in 1:nrow(all)) {\n  famData <- all[all$Family == all$Family[i] & all$PassengerId != all$PassengerId[i], ]\n  all$FamilyLive[i] <- ifelse(length(which(famData$Survived == 1)) > 0, 1, 0)\n  all$FamilyDied[i] <- ifelse(length(which(famData$Survived == 0)) > 0, 1, 0)\n}\nall$FamilyLive <- as.factor(all$FamilyLive)\nall$FamilyDied <- as.factor(all$FamilyDied)\n\n#Making a bar chart comparing survival between people with and without family survivors\nall %>% filter(!is.na(Survived)) %>%\n  group_by(FamilyLive = ifelse(FamilyLive == 1, \"Yes\", \"No\"), Survived) %>%\n  summarise(n = n()) %>%\n  mutate(share = n / sum(n)) %>%\n  ggplot(aes(x = FamilyLive, y = share, fill = Survived, label = paste(round(share * 100), \"%\", sep = \"\"))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"black\") +\n  geom_text(position = position_stack(vjust = 0.5)) +\n  scale_y_continuous(labels = scales::percent)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9e2cd03cf2db1a8e9c96a01df1bee0300699cdff"},"cell_type":"code","source":"#Making a bar chart comparing survival between people with and without family causulties\nall %>% filter(!is.na(Survived)) %>%\n  group_by(FamilyDied = ifelse(FamilyDied == 1, \"Yes\", \"No\"), Survived) %>%\n  summarise(n = n()) %>%\n  mutate(share = n / sum(n)) %>%\n  ggplot(aes(x = FamilyDied, y = share, fill = Survived, label = paste(round(share * 100), \"%\", sep = \"\"))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"black\") +\n  geom_text(position = position_stack(vjust = 0.5)) +\n  scale_y_continuous(labels = scales::percent) +\n  theme_bw()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"45c713bcc3dbfe5733d1dd799729513bcf66d975"},"cell_type":"code","source":"#Now dealing with the age problem, making a dummy matrix from possibly relevant \nimputeData <- all[, c(\"Pclass\", \"Sex\", \"Age\", \"Fare\", \"Embarked\", \"FamilySize\", \"Title\")]\ndummies <- predict(dummyVars(\" ~ .\", data = imputeData), imputeData)\n\n#The predict function is a genric function producing something from a model.\n#Both dummyVars and preprocess are treated like models in that way here.\npreprocess <- preProcess(dummies, method = \"bagImpute\")\nimputed <- as.data.frame(predict(preprocess, dummies))\n\n#Transfering the age variable with the predicted values\nall$Age = imputed$Age\n\n#Making a graph comparing age and survival\nall %>% filter(!is.na(Survived)) %>%\n  mutate(bin = paste(floor(Age / 10) * 10, \"-\", ceiling((Age + 0.1) / 10) * 10)) %>%\n  group_by(bin, Survived) %>%\n  summarise(n = n()) %>%\n  mutate(share = n / sum(n)) %>%\n  ggplot(aes(x = bin, fill = Survived, y = n, label = paste(round(share * 100), \"%\", sep = \"\"))) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"black\") +\n  geom_text(position = position_stack(vjust = 0.5)) +\n  labs(x = \"Age group\", y = \"Count\") +\n  theme_bw()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3ad07999d2fa0c3bbcb65c8f689e0d9fd6e00ad9"},"cell_type":"code","source":"#Some combination of age, family size and title seem a bit exotic to a modern\n#person but trying to capture who is a child and not\nall$Child <- ifelse(all$Age < 17 & all$Title != \"Mrs\", 1, 0)\n\n#Making a chart comparing survival per family size, facet by child and gender\nggplot(all[!is.na(all$Survived), ], aes(x = FamilySize, y = as.numeric(ifelse(Survived == 0, 0, 1)))) +\n  geom_bar(aes(y = (..count..)/sum(..count..))) +\n  geom_line(stat = \"summary\", fun.y = \"mean\", color = \"blue\") +\n  labs(y = \"Survival\") +\n  ylim(NA, 1) +\n  facet_wrap(Sex ~ ifelse(Child == 1, \"child\", \"adult\")) +\n  theme_bw()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"928ed3f3a1f0f5ee68b9f159b12bfa409f503562"},"cell_type":"code","source":"features <- c(\"Sex\", \"Child\", \"FamilyDied\", \"FamilySize\", \"FarePerson\", \"Pclass\")\ntrainData <- all[!is.na(all$Survived), features]\noutcome <- all$Survived[!is.na(all$Survived)]\n\nset.seed(111)\nfolds <- createMultiFolds(outcome, k = 3, times = 10)\ncontrol <- trainControl(method = \"repeatedcv\", number = 3, repeats = 10, index = folds)\n\nrpartModel <- train(x = trainData, y = outcome, method = \"rpart\", tuneLength = 30, trControl = control)\nprp(rpartModel$finalModel, type = 0, extra = 1, under = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3258c193f61fff225ba1b1362044e58ba5debe06"},"cell_type":"code","source":"rfModel <- randomForest(x = trainData, y = outcome, importance = TRUE)\n\ntestData <- all[is.na(all$Survived), features]\npredictions <- as.data.frame(predict(rfModel, testData))\nsubmission <- cbind(all$PassengerId[is.na(all$Survived)], predictions)\nnames(submission) <- c(\"PassengerId\", \"Survived\")\nwrite.csv(submission, \"titanic_20180921_1.csv\", row.names = FALSE)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}