{"cells": [{"execution_count": null, "cell_type": "code", "outputs": [], "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(plyr)\nlibrary(stringr)\nlibrary(InformationValue) #to compute WOE and IV\nlibrary(MLmetrics)\nlibrary(rpart)\nlibrary(randomForest)\nlibrary(dplyr)\nlibrary(e1071)\nlibrary(Amelia)\nlibrary(party)\nlibrary(gbm)\nlibrary(class)\n\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n#list.files(\"../input\")\n\n# Any results you write to the current directory are saved as output.", "metadata": {"trusted": false, "_execution_state": "idle", "_uuid": "29dc74c4ff7cace399d76265d0c17624b00965ad", "_cell_guid": "54dba9e8-c1ae-4174-89cd-fede48ce3c70"}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "train <- read_csv(\"../input/train.csv\")\ntest <- read_csv(\"../input/test.csv\")\n\ndata <- bind_rows(train,test)\ntrain.row <- 1:nrow(train)\ntest.row <- (1+nrow(train)):(nrow(train)+nrow(test)) \n\nstr(data)", "metadata": {"_cell_guid": "9ca67765-0a47-45f1-a01a-f3f1849a16d3", "trusted": false, "_execution_state": "idle", "_uuid": "92c4decfa79c20762e517aeb71a33d89b489ad17", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "We first look at the effect that Pclass has on the survival rate.", "metadata": {"_cell_guid": "ad5189ba-7d17-4129-b8d4-60e5e15a58d5", "_execution_state": "idle", "_uuid": "1e6677f0435f5d588fe24981360d3ca39624fba5", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data$Survived <- factor(data$Survived)\n\nggplot(data=data[1:nrow(train),], mapping=aes(x=Pclass,y=..count..,fill=Survived))+\ngeom_bar(stat=\"count\", position='dodge')+xlab('Pclass')+ylab('Count')+ggtitle('Survival vs Pclass')+\ngeom_text(stat=\"count\", aes(label=..count..),position=position_dodge(width = 1),vjust=-0.5)+\ntheme(plot.title=element_text(hjust=0.5),legend.position=\"bottom\")", "metadata": {"_cell_guid": "4128244f-970e-4628-8874-e6e1beeb735c", "trusted": false, "_execution_state": "idle", "_uuid": "3215686128001c3bc76bde3a81b0d5509c29230c", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "The survival rate for higher Pclass is higher than for lower class. For class 1, it's higher than 50%, and about 50% for class 2, about 25% for class 3.", "metadata": {"_cell_guid": "4d150baa-ea51-4668-9224-ece70d892252", "_execution_state": "idle", "_uuid": "25430377f804c8c439a08ab4863da6baf98487f4", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# We compute the WOE (weight of evidence) and IV (information value) of the above information.\nWOETable(X=factor(data$Pclass[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=factor(data$Pclass[1:nrow(train)]),Y=data$Survived[1:nrow(train)])", "metadata": {"_cell_guid": "1afe03dc-3461-41f9-ba41-04b06ba4e950", "trusted": false, "_execution_state": "idle", "_uuid": "982ed9afd3722a24e3f8ca2fe7cc71d9cc3d48da", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "0.5009497 implies that the information is highly predictive.", "metadata": {"_cell_guid": "1020136c-cff8-4bcd-a289-7de8545d3ab9", "_execution_state": "idle", "_uuid": "7b74ed1b032394cd3e59c1d489d7384f21368f69", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "We try to study the effect of suffix (e.g., Mr., Mrs., Dr., etc.) on the survival rate.", "metadata": {"_cell_guid": "cf759ac1-db70-4035-954a-0051dd41db1e", "_execution_state": "idle", "_uuid": "5afa4ffe3103ae43badcfcd056eacced1d3132dc", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data$Title <- gsub('(.*, )|(\\\\..*)','',data$Name)\ntable(data$Sex, data$Title)", "metadata": {"_cell_guid": "b79e6ad0-d86f-4257-898d-e92fc4449d79", "trusted": false, "_execution_state": "idle", "_uuid": "db9864c9b1ca7fc2cbc9b7f9031eb49b8f2c9ca7", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "We see some of the titles rarely appear (less than 10 times).  These may not appear at all in the testing data, and hence are not important in predicting the rate. So we combine them as Rare Title and omit them. Also, we count titles like Mlle, Mme, Ms all as Miss.", "metadata": {"_cell_guid": "fe5affc4-89be-498f-85e6-6f7f216b6786", "_execution_state": "idle", "_uuid": "ca1388c1864b2a333c7f897f8572711866c88c74", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "rareTitle <- c('Dona','Lady','the Countess','Capt','Col','Don','Dr','Major','Rev','Sir','Jonkheer')\n\ndata$Title[data$Title=='Mlle'] <- 'Miss'\ndata$Title[data$Title=='Ms'] <- 'Miss'\ndata$Title[data$Title=='Mme'] <- 'Miss'\n\ndata$Title[data$Title %in% rareTitle] <- 'Rare Title'\n\ntable(data$Sex, data$Title)", "metadata": {"_cell_guid": "c2e8f1eb-4d22-482a-92df-59a4ccc57a8a", "trusted": false, "_execution_state": "idle", "_uuid": "f1f80b5029a3c5e0bbf22f59e07df430225cb074", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data$Title <- as.factor(data$Title)\n\nggplot(data=data[1:nrow(train),], mapping=aes(x=Title,y=..count..,fill=Survived))+\ngeom_bar(stat=\"count\", position='dodge')+xlab('Title')+ylab('Count')+ggtitle('Survival vs Title')+\nscale_fill_discrete(name=\"Survived\",breaks=c(0,1))+\ngeom_text(stat=\"count\", aes(label=..count..),position=position_dodge(width = 1),vjust=-0.5)+\ntheme(plot.title=element_text(hjust=0.5),legend.position=\"bottom\")", "metadata": {"_cell_guid": "2c45f20c-87c7-4f58-9135-9553f1347d72", "trusted": false, "_execution_state": "idle", "_uuid": "b1a78980ffdb765a473eb7621c2ed33bc021e33b", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "WOETable(X=factor(data$Title[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=factor(data$Title[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Also highly predictive", "metadata": {"_cell_guid": "3c3708ae-71eb-4aca-b472-ae82d41d44d1", "trusted": false, "_execution_state": "idle", "_uuid": "f4a72b317a009e350e1d9b609fb66f54b9373814", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "The effect of other factors on Survival. ", "metadata": {"_cell_guid": "6c82c0e7-9ca0-4bb6-a62f-4d8df80b79e9", "_execution_state": "idle", "_uuid": "7cf36cb9f08c2613600c4faf8cb7f6cb3558de81", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Sex\ndata$Sex <- as.factor(data$Sex)\n\nggplot(data=data[1:nrow(train),], mapping=aes(x=Sex,y=..count..,fill=Survived))+\ngeom_bar(stat=\"count\", position='dodge')+xlab('Sex')+ylab('Count')+ggtitle('Survival vs Sex')+\ngeom_text(stat=\"count\", aes(label=..count..),position=position_dodge(width = 1),vjust=-0.5)+\ntheme(plot.title=element_text(hjust=0.5),legend.position=\"bottom\")", "metadata": {"_cell_guid": "296c66a7-2c04-45cd-b41d-386fc0894140", "trusted": false, "_execution_state": "idle", "_uuid": "b5702f430fcc33b5f4f695499f3843f8def323c6", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "WOETable(X=as.factor(data$Sex[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Sex[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Highly predictable. Females are more likely to survive than males.", "metadata": {"_cell_guid": "04ad34a3-9409-495d-b207-9808c0b8412a", "trusted": false, "_execution_state": "idle", "_uuid": "b8ce3dbf708a5bec818ca89d9a5f1bcc1aaaa84f", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Ages\nggplot(data=data[(!is.na(data$Age)) & row(data[,'Age'])<=891,], aes(x=Age,y=..count..,color=Survived))+\ngeom_line(stat='bin',binwidth=5)+labs(title=\"Survival vs Age\", x=\"Age\", y=\"Count\", fill=\"Survived\")", "metadata": {"_cell_guid": "527ad1c4-9b2d-4358-93ce-d2531868ec03", "trusted": false, "_execution_state": "idle", "_uuid": "a5e579a8bfcabd1027061d079d1062d7fc4b6a30", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "WOETable(X=factor(data$Age[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=factor(data$Age[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Highly predictable. Children at ages <=7 are more likely to survive.", "metadata": {"_cell_guid": "4c281411-75c0-4adb-b47d-8d61ac1089c2", "trusted": false, "_execution_state": "idle", "_uuid": "5d793d76421d3faba3b18a1e4ff2db2e74242387", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "ftable(xtabs(~ Pclass+Sex+Survived, data=data))\n\n#Females in higher classes (1 and 2) are more likely to survive than those in lower classes (3).", "metadata": {"_cell_guid": "a8cf9da5-23dd-44fa-9de9-0b21f4098833", "trusted": false, "_execution_state": "idle", "_uuid": "7bd0e5baabfc0a52cc59fc1673c7c4e2f03c1194", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Family size (SibSp and Parch)\ndata$FamilySize <- data$SibSp + data$Parch +1\nggplot(data=data[1:nrow(train),], mapping=aes(x=FamilySize,y=..count..,fill=Survived))+\ngeom_bar(stat=\"count\", position='dodge')+xlab('FamilySize')+ylab('Count')+ggtitle('Survival vs Family Size')+\ngeom_text(stat=\"count\", aes(label=..count..),position=position_dodge(width = 1),vjust=-0.5)+\ntheme(plot.title=element_text(hjust=0.5),legend.position=\"bottom\")", "metadata": {"_cell_guid": "6153ddef-0dad-4d18-b6ff-37e3fb01b420", "trusted": false, "_execution_state": "idle", "_uuid": "78ea33175e3c44a5cc98c119c9914abdd2a5ef02", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "WOETable(X=as.factor(data$FamilySize[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$FamilySize[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Highly predictable. Families of sizes 2-4 have higher survival rates.", "metadata": {"_cell_guid": "eb3023ad-10a6-42fd-9581-5512ea47b8e3", "trusted": false, "_execution_state": "idle", "_uuid": "5d8f1acb001d3008686d33a1bfd31302d254228f", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "#Fare\nggplot(data=data[(!is.na(data$Fare)) & row(data[,'Fare'])<=891,], aes(x=Fare,y=..count..,color=Survived))+\ngeom_line(stat='bin',binwidth=10)+labs(title=\"Survival vs Fare\", x=\"Fare\", y=\"Count\", fill=\"Survived\")", "metadata": {"_cell_guid": "336e2e3a-5535-4e6c-bf64-4aa9a12dc9bf", "trusted": false, "_execution_state": "idle", "_uuid": "0728b13371e777d562d2701a626d3a7068285b04", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "WOETable(X=as.factor(data$Fare[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Fare[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Highly predictable. The higher the fare, the higher the survival rate.", "metadata": {"_cell_guid": "9d06652e-d1f8-4bb9-9feb-0534576c8f4a", "trusted": false, "_execution_state": "idle", "_uuid": "36b152799c47a33a9992c94c09d62fe878860b6f", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "#Cabin\nggplot(data=data[1:nrow(train),], mapping=aes(x=as.factor(sapply(data$Cabin[1:nrow(train)],function(x)\n    str_sub(x,start=1,end=1))), y=..count.., fill=Survived))+\ngeom_bar(stat=\"count\", position='dodge')+xlab('Cabin')+ylab('Count')+ggtitle('Survival vs Cabin')+\ngeom_text(stat=\"count\", aes(label=..count..),position=position_dodge(width = 1),vjust=-0.5)+\ntheme(plot.title=element_text(hjust=0.5),legend.position=\"bottom\")", "metadata": {"_cell_guid": "dc6839e3-ab2c-46b0-bf64-8796898a0927", "trusted": false, "_execution_state": "idle", "_uuid": "1076394f4adcfb7fac86c7454d6760e4bd977fa3", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data$Cabin <- sapply(data$Cabin, function(x) str_sub(x,start=1,end=1))\n\nWOETable(X=as.factor(data$Cabin[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Cabin[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Highly predictable. But there are too many missing values. Not really predictive.", "metadata": {"_cell_guid": "f5c14e70-b63e-43d9-9b2b-4f7e13dc2398", "trusted": false, "_execution_state": "idle", "_uuid": "e6be1743b470fc0fd8443f15b4dec8a5cc08198f", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Embarked\nggplot(data=data[1:nrow(train),], mapping=aes(x=Embarked,y=..count..,fill=Survived))+\ngeom_bar(stat=\"count\",position='dodge')+xlab('Embarked')+ylab('Count')+ggtitle('Survival vs Embarked')+\ngeom_text(stat=\"count\", aes(label=..count..),position=position_dodge(width = 1),vjust=-0.5)+\ntheme(plot.title=element_text(hjust=0.5),legend.position=\"bottom\")", "metadata": {"_cell_guid": "5b8370bd-a563-48a9-9b9d-a18ee1d75d25", "trusted": false, "_execution_state": "idle", "_uuid": "45aeb6dbfb4164e0b3f187aee7a5c0407db05d8b", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "WOETable(X=as.factor(data$Embarked[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Embarked[1:nrow(train)]),Y=data$Survived[1:nrow(train)])\n# Highly predictable. Survival rates C > Q > S.", "metadata": {"_cell_guid": "556e1c17-05f7-4576-9df6-dbb15c67aa85", "trusted": false, "_execution_state": "idle", "_uuid": "6c4ca3fc7af081ab8319a0fe849d8bdb1ca73600", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "We fill in the missing values to improve the prediction result.", "metadata": {"_cell_guid": "fe32e2b0-e26f-4012-9c97-456190f126e8", "_execution_state": "idle", "_uuid": "6e32b4880ad6cb2da5a7ab22dd1c1c527f1e7720", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Count how many values are missing for each feature.\nattach(data)\nmissing <- list(Pclass=nrow(data[is.na(Pclass), ]))\nmissing$Name <- nrow(data[is.na(Name), ])\nmissing$Sex <- nrow(data[is.na(Sex), ])\nmissing$Age <- nrow(data[is.na(Age), ])\nmissing$FamilySize <- nrow(data[is.na(FamilySize), ])\nmissing$Fare <- nrow(data[is.na(Fare), ])\nmissing$Cabin <- nrow(data[is.na(Cabin), ])\nmissing$Embarked <- nrow(data[is.na(Embarked), ])\n\nfor (name in names(missing)){\n    if (missing[[name]][1] > 0){\n        print(paste('',name,' miss ',missing[[name]][1],' values',sep=''))\n    }\n}\ndetach(data)\n# Too many missing in Cabin. We give up this feature.", "metadata": {"_cell_guid": "9d7c779a-c59a-4497-be8f-e1f783ec16ac", "trusted": false, "_execution_state": "idle", "_uuid": "5a36fb82f5d273b02612bc23041f9ae729742f36", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Fill in Age values. We first use other features to predict Age and then fill with the predition.\nage.model <- rpart(Age ~ Pclass+Sex+SibSp+Parch+Fare+Embarked+Title, data=data[!is.na(data$Age), ],\n                  method='anova')\ndata$Age[is.na(data$Age)] <- predict(age.model,data[is.na(data$Age), ])", "metadata": {"_cell_guid": "8408b980-1f3e-4974-9416-e2d883382c92", "trusted": false, "_execution_state": "idle", "_uuid": "73269aae2aafcedfecef3349f1a399fa6f207dc7", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "#Fill in Fare and Embarked. There are only 1 or 2 missing. So we find out the missing line \n#and fill with our estimation.\ngetMissingFare <- function(total_data){\n    count <- 0\n    for (i in 1:nrow(total_data)){\n        if(is.na(total_data$Fare[i])){\n            print(i);\n            count <- count+1\n        }\n    }\n    return(count)\n}\n\ngetMissingFare(data)\ndata[1044,]", "metadata": {"_cell_guid": "501859e8-969b-4001-8b8b-00e4b968b832", "trusted": false, "_execution_state": "idle", "_uuid": "7b396a288b2999f7bf7fcd815642425ac4176313", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data$Fare[1044] <- median(data[data$Pclass=='3' & data$Embarked=='S',]$Fare, na.rm=TRUE)", "metadata": {"_cell_guid": "b5a388c4-32e7-4b8a-896f-8aa3a958ad84", "trusted": false, "_execution_state": "idle", "_uuid": "9c4b5d7306ee9cdf9047ca82b7bdc031411d436a", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data[is.na(data$Embarked),c('Pclass','Fare')]\n# Both missing values for Embarked are for passengers in Pclass 1 who bought the tickets at the \n# price $80. We set their Embarked to be C.", "metadata": {"_cell_guid": "f810a9c3-a7a5-416c-a4ac-a0ae7df74f9e", "trusted": false, "_execution_state": "idle", "_uuid": "9a8cb7578dff1374949b1dcf8646cee4eda58d7c", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "data$Embarked[is.na(data$Embarked)] <- 'C'\ndata$Embarked <- as.factor(data$Embarked)", "metadata": {"_cell_guid": "7ae82117-e11a-43dd-9615-6c139d20e6d0", "trusted": false, "_execution_state": "idle", "_uuid": "b2533937e2997870c0e11623cce7a545186ced9d", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "Model training.", "metadata": {"_cell_guid": "f13a6fe1-7435-4d17-bcf3-c189710c9b0b", "_execution_state": "idle", "_uuid": "46a5dbb1fbaa3c65375d983efde7c8dd09d23173", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "set.seed(415)\nmodel <- cforest(Survived ~ Pclass+Title+Sex+Age+FamilySize+Fare+Embarked, data=data[train.row, ],\n                controls=cforest_unbiased(ntree=2000, mtry=3))\n# cross-validation\ncv.summarize <- function(data.true,data.predict){\n    print(paste('Recall:',Recall(data.true,data.predict)))\n    print(paste('Precision:',Precision(data.true,data.predict)))\n    print(paste('Accuracy:',Accuracy(data.true,data.predict)))\n    print(paste('AUC (Area Under Curve):',AUC(data.true,data.predict)))\n}\n\nset.seed(415)\ncv.sample <- sample(1:nrow(train),as.integer(0.3*nrow(train)),replace=TRUE)\ncv.test <- data[cv.sample, ]\ncv.prediction <- predict(model,cv.test,OOB=TRUE,type=\"response\")\ncv.summarize(cv.test$Survived,cv.prediction)\n\n# The accuracy is acceptable. So we use this model to do prediction", "metadata": {"_cell_guid": "d750f135-0e16-4dc7-b80c-652a4cb902c0", "trusted": false, "_execution_state": "idle", "_uuid": "a3dc05c227598143649c063357d1b844ad3f9578", "collapsed": false}}, {"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "Prediction.", "metadata": {"_cell_guid": "1392f0b7-d7e3-40d7-aed9-50b57854c1f0", "_execution_state": "idle", "_uuid": "d2916a3306df93321f19d1d5cb4f1d5279a7f92d", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "predict.result <- predict(model, data[test.row, ], OOB=TRUE, type=\"response\")\noutput <- data.frame(PassengerId=test$PassengerId, Survived=predict.result)\nwrite.csv(output, file='output.csv', row.names=FALSE)", "metadata": {"_cell_guid": "68a09830-6211-4eb0-b462-d0dd6c2603a5", "trusted": false, "_execution_state": "idle", "_uuid": "a7b5afa22015f7c3568b6cc453bf146c5143aa2d", "collapsed": false}}], "nbformat": 4, "metadata": {"language_info": {"version": "3.4.1", "pygments_lexer": "r", "mimetype": "text/x-r-source", "codemirror_mode": "r", "name": "R", "file_extension": ".r"}, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "nbformat_minor": 0}