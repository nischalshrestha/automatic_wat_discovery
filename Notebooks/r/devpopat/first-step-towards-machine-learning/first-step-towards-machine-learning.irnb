{"cells":[{"metadata":{"trusted":true,"_uuid":"5cacd3565563d065c1607f7fd722d8a07cff06e3"},"cell_type":"code","source":"#Loading the required libraries\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(randomForest)\nlibrary(rpart)\nlibrary(rpart.plot)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5dffaa5a8006d0cb332dee73470dfcc7d000dccc","_execution_state":"idle","trusted":true},"cell_type":"code","source":"#Loading the data set\ntrain <- read.csv(\"../input/train.csv\")\ntest <- read.csv(\"../input/test.csv\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a96c04c0ac2ebd49ed39d9417b45f6cc46f4daef"},"cell_type":"code","source":"#Combining the train and test data frames in one for cleaning\ntitanic<-rbind(train[,-2],test)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":false,"_kg_hide-input":false,"trusted":true,"_uuid":"7e42190f3acd4e1c42bc2836cb10888270c336f0"},"cell_type":"code","source":"#Assigning correct data types to the variables\ntitanic$Name<-as.character(titanic$Name)\ntitanic$SibSp<-as.factor(titanic$SibSp)\ntitanic$Parch<-as.factor(titanic$Parch)\ntitanic$Ticket<-as.character(titanic$Ticket)\ntitanic$Cabin<-as.character(titanic$Cabin)\ntitanic$Pclass<-as.factor(titanic$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4aed5ed289f8409f67a278f633c5395922d3c13f"},"cell_type":"code","source":"#Performing univariate analysis\n#Embarked Variable has two rows with missing data\ntitanic %>% filter(Embarked==\"\") %>% count()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"148ea1ffccbd58e31f325b4a35b416122126542e"},"cell_type":"code","source":"table(titanic$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4e96bb370f882d71565e6801342c9df558cafcd1"},"cell_type":"code","source":"#The factor S occurs maximum times so filling the missing values with S\ntitanic$Embarked[titanic$Embarked==\"\"]=\"S\"\ntitanic$Embarked<-factor(titanic$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a604a16e09f5f56da1af1124db87e194932804ef"},"cell_type":"code","source":"#Fare Variable has NA values so we replace them with median of all the ticket fares\ntitanic %>% filter(is.na(titanic$Fare)==\"TRUE\")\ntitanic$Fare[is.na(titanic$Fare)] <- median(titanic$Fare, na.rm=TRUE)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bf57bf14fec3a7a773de70a8088fe8e0775be9b8"},"cell_type":"code","source":"#Parch, SibSp, Pclass Variables\ntable(titanic$Parch)\ntable(titanic$SibSp)\ntable(titanic$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cc363122446b91c4a09ca76179700e3f673d8fc9"},"cell_type":"code","source":"#Data Wrangling in Name Variable\ntitanic$Name<-gsub('(.*, )|(\\\\..*)','',titanic$Name)\ntitanic$Name[titanic$Name %in% c('Capt','Col','Don','Dr','Jonkheer','Major','Rev','Sir','the Countess')]<-'Officer'\ntitanic$Name[titanic$Name %in% c('Mlle','Ms','Lady','Dona')]<-'Miss'\ntitanic$Name[titanic$Name %in% c('Mme')]<-'Mrs'\ntable(titanic$Name)\nclass(titanic$Name)\ntitanic$Name<-as.factor(titanic$Name)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ec1bf87e489baee0a9d18d88d245edfce24294d6"},"cell_type":"code","source":"#Age variable\ntable(is.na(titanic$Age))\n#Age variable has 263 missing values. Imputing them using Randomforest approach\nrow.has.na <- apply(titanic, 1, function(x){any(is.na(x))})\nage_train<-titanic[!row.has.na,]\nage_test<-titanic[row.has.na,]\n#Estimating variables which are correlated with Age\nsummary(aov(Age~.,data = age_train))\n#Sex and Fare are not responsible for affecting the Age so we exclude them from the Random Forest Model\nmodel2<-randomForest(Age~Pclass+Name+SibSp+Parch+Embarked,data = age_train)\nprint(model2)\nvarImpPlot(model2)\nsummary(predict(model2,newdata = age_test))\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f419321fee8baf15c584cfdc7e5611fdbbdae31f"},"cell_type":"code","source":"#Imputing the age using the model that we built\nage_test$Age<-predict(model2,newdata = age_test)\nage_test$Age<-round(age_test$Age)\n\n#Combining back age_train and age_test to original data frame\ntitanic_cleaned<-rbind(age_train,age_test)\ntitanic_cleaned$Age<-round(titanic_cleaned$Age)\nsummary(titanic_cleaned$Age)\ntitanic_cleaned <- titanic_cleaned[order(titanic_cleaned$PassengerId),]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4cf750a21ba9e678d46ed2182a25c1d81ac2e203"},"cell_type":"code","source":"#Fare Should be numeric\ntitanic_cleaned$Fare<-as.numeric(titanic_cleaned$Fare)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1741202a7a7461eb2303d9f204f9923c98fa8d15"},"cell_type":"code","source":"#Cabin has too many missing values and it doesn't seem to be having meaningful in predicting the Survival for passenger\ntitanic %>% filter(titanic$Cabin==\"\") %>% count()\ntitanic_cleaned$Cabin<-NULL","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c394a15ae194074b097ff8e681b79306fd6587bb"},"cell_type":"code","source":"#Similar approach for Ticket variable\ntitanic_cleaned$Ticket<-NULL","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"20e5f8058c9ef8802824b09eeb52195cfbfe9b6c"},"cell_type":"code","source":"#Data Cleaning done, spliting into original train and test data now\ntitanic_test<-titanic_cleaned %>% filter(PassengerId > nrow(train))\ntitanic_train<-titanic_cleaned %>% filter(PassengerId < (nrow(train)+1))\ntitanic_train$Survived<-train$Survived","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f9f48d14166e4f371d8c257002891a578f8f81bb"},"cell_type":"code","source":"#Data Visualization | Bivariate Analysis | ggplot\n#Survival vs. Sex\n#More Females were saved\nggplot(data = titanic_train)+aes(x=Survived, fill=Sex)+geom_bar(position=\"stack\")+scale_fill_brewer(palette=\"Pastel2\")+labs(title='Relationship between survival and gender',x=\"Survived\", y=\"Frequency\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1c77f606b5d0bcb72816029d2b4c7a467657f1ea"},"cell_type":"code","source":"#Survival vs. Passenger class\nggplot(data=titanic_train)+aes(x=Survived,fill=Pclass)+geom_bar(position=\"stack\")+scale_fill_brewer(palette=\"Pastel2\")+labs(title='Relationship between survival and ticket class',x=\"Survived\", y=\"Frequency\")\n#Ticket class is 1 -> More people survived\n#Ticket class is 2 -> No of people survived=No of people killed\n#Ticket class is 3 -> More people died\n#I will always buy a first class ticket !!!","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7827e3d639128788423530d5c66d5efe001decdb"},"cell_type":"code","source":"#Survival vs. SibSp\nggplot(data=titanic_train)+aes(x=Survived,fill=SibSp)+geom_bar(position=\"dodge\")+scale_fill_brewer(palette=\"Pastel1\")+labs(title='Relationship between survival and Siblings/Spouse',x=\"Survived\", y=\"Frequency\")\n#Passengers with 1 or 2 Siblings/Spouse managed to Survive. More than 50% of Rest others failed to Survive\n#You have 1 or 2 Siblings/Spouse? You could make it to the LifeBoat!","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f4fbc50f1c5b1ba141bd04c8536326320432cf96"},"cell_type":"code","source":"#Survival vs. Parch\nggplot(data=titanic_train)+aes(x=Survived,fill=Parch)+geom_bar(position=\"dodge\")+scale_fill_brewer(palette=\"Pastel2\")+labs(title='Relationship between survival and Parents/Children',x=\"Survived\", y=\"Frequency\")\n#Passengers with 1 or 2 or 3 Parents/Children Survived\n#If I travel by ship, I'll take my parents and kids along!!!","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bd12e64c8d2125928e66b677c23b608e3a69c8b5"},"cell_type":"code","source":"#Survival vs. Embarked\nggplot(data=titanic_train)+aes(x=Survived,fill=Embarked)+geom_bar(position=\"fill\")+scale_fill_brewer(palette=\"Pastel1\")+labs(title='Relationship between survival and Departure Port',x=\"Survived\", y=\"Frequency\")\n#Port of Embarkation = Cherbourg? -> More people survived\n#Port of Embarkation = Queenstoun? -> No. of people killed= No. of people Survived\n#Port of Embarkation = Southampton? -> More people died\n#I guess People from Cherbourg were rich !!! (They bribed the guards maybe!)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6fdae5673dc7288336e345ea088b09d151ddca38"},"cell_type":"code","source":"#Survival vs. Fare\ntitanic_train %>% ggplot(aes(x=Fare, fill=Survived)) + geom_density(alpha=0.5) + scale_fill_brewer(palette=\"Spectral\")+labs(title='Relationship between survival and Fare',x=\"Fare\", y=\"Density of People Killed\")\n#You got cheap tickets? -> You got a cabin at ground level -> Tough to Survive","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3c790e1fc37d58998e072605daec7ea62b288ef8"},"cell_type":"code","source":"#Survival vs. Age\ntitanic_train %>% ggplot(aes(x=Age, fill=Survived)) + geom_density(alpha=0.5) + scale_fill_brewer(palette=\"Spectral\")+labs(title='Relationship between survival and Age',x=\"Age\", y=\"Density of People Killed\")\n#The guards took maximum people with age > 60 (Seniors) and age <20 (Children and Youngsters) to the life boat!!","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5b15e1e0dde49cdc13beebcac705f1df135f49d1"},"cell_type":"code","source":"#Modelling\n#Train test split\nset.seed(1234)\ntrain_index <- sample(1:nrow(titanic_train), 0.8 * nrow(titanic_train))\ntest_index <- setdiff(1:nrow(titanic_train), train_index)\n\nX_train<-titanic_train[train_index,]\ny_train<-titanic_train[train_index,\"Survived\"]\n\nX_test<-titanic_train[test_index,]\ny_test<-titanic_train[test_index,\"Survived\"]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4f4d86635978eb86a031fa2e2bcf5ac1474b015c"},"cell_type":"code","source":"#Logistic Regression===============\nmodel_lr<-glm(Survived~.,family = binomial(link = 'logit'),data=X_train)\n\n#Test data has Parch=6 which was not there in the train data\nmodel_lr$xlevels[[\"Parch\"]] <- union(model_lr$xlevels[[\"Parch\"]], levels(titanic_test$Parch))\n\n#Accuracy of model on train data\nresult_lr<-predict(model_lr, newdata = X_train[,-10], type = 'response')\nresult_lr<-ifelse(result_lr>0.5,1,0)\nerror_lr<-mean(result_lr!=y_train)\nprint(paste('Accuracy of model on train data using Logistic regression = ',1-error_lr))\n\n\n#Accuracy of model on test data\nresult_lr<-predict(model_lr, newdata = X_test[,-10], type = 'response')\nresult_lr<-ifelse(result_lr>0.5,1,0)\nerror_lr<-mean(result_lr!=y_test)\nprint(paste('Accuracy of model on test data using Logistic regression = ',1-error_lr))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bc05c9810eb508a4c64bf5675922085dbc7b8095"},"cell_type":"code","source":"#Decision Tree model=======================================================\nmodel_dt<-rpart(Survived~.,data = X_train, parms = list(split = \"information\"))\nprintcp(model_dt)\nmodel_dt<-rpart(Survived~.,data = X_train, parms = list(split = \"information\"),control=rpart.control(minsplit = 4, cp=0.015))\n\nresult_dt<-predict(model_dt,newdata = X_train)\nresult_dt<-ifelse(result_dt>0.5,1,0)\nerror_dt<-mean(result_dt!=y_train)\nprint(paste('Accuracy of model on train data using Decision tree = ',1-error_dt))\n\n\nresult_dt<-predict(model_dt,newdata = X_test)\nresult_dt<-ifelse(result_dt>0.5,1,0)\nerror_dt<-mean(result_dt!=y_test)\nprint(paste('Accuracy of model on train data using Decision Tree = ',1-error_dt))\n\n#Plotting the decision tree\nrpart.plot(model_dt, type = 3 ,clip.right.labs=FALSE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2b75bec21ce255804c75523f27ed3b265dd2fbba"},"cell_type":"code","source":"#Random Forest Model=======================================================\nmodel_rf<-randomForest(Survived~.,data = X_train)\n\nresult_rf<-predict(model_rf,newdata = X_train)\nresult_rf<-ifelse(result_rf>0.5,1,0)\nerror_rf<-mean(result_rf!=y_train)\nprint(paste('Accuracy of model on train data using Random Forest = ',1-error_rf))\n\n\nresult_rf<-predict(model_rf,newdata = X_test)\nresult_rf<-ifelse(result_rf>0.5,1,0)\nerror_rf<-mean(result_rf!=y_test)\nprint(paste('Accuracy of model on train data using Random Forest = ',1-error_rf))\nvarImpPlot(model_rf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a2d011b941f0654529b6075d5faf4cf09a7cad32"},"cell_type":"code","source":"#Final predictions on unseen test data using random forest\nresult_final<-predict(model_rf, newdata = titanic_test)\nresult_final<-ifelse(result_final>0.5,1,0)\n\ntitanic_predictions<-data.frame(\"PassengerId\"=titanic_test$PassengerId, \"Survived\"=result_final)\n\nsummary(titanic_predictions)\nstr(titanic_predictions)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}