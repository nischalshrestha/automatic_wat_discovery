{"nbformat_minor": 1, "nbformat": 4, "metadata": {"kernelspec": {"language": "R", "display_name": "R", "name": "ir"}}, "cells": [{"source": [], "cell_type": "markdown", "metadata": {"_cell_guid": "994ab56c-7857-4a4a-bade-a7f640dc9a61", "_uuid": "75e9abbb50476b97e1fe90b1522120aea0dad5fa"}}, {"source": ["This analysis was done using multiple libraries, including rpart, randomForest, party, mice and caret).\n", "\n", "The action plan is:\n", "- read in the data, explore missing variables\n", "- fill in the missing variables\n", "- create new features based on existing data\n", "- fit the model with various features\n", "- based on the accuracy, change features selected for the model\n"], "cell_type": "markdown", "metadata": {"_cell_guid": "b49f7442-8612-4b7f-9ea9-31b982cfbe32", "_uuid": "f40ca936b2747b62580ddfe2c8b829ba399fab05"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "5943497b-6a9e-4659-b5c2-8a2a88e41b12", "_uuid": "247dd81ab750e7e2ab1767c3384576349d457779"}, "source": ["library(ggplot2) # Data visualization\n", "library(readr) # CSV file I/O, e.g. the read_csv function\n", "library(tidyverse)\n", "library(rpart)\n", "library(rpart.plot)\n", "library(randomForest)\n", "library(party)\n", "library(mice)\n", "library(caret)\n", "\n", "system(\"ls ../input\")\n", "\n", "train = read.csv(\"../input/train.csv\")\n", "test = read.csv(\"../input/test.csv\")"]}, {"source": ["First, create a new column (which already exists in train data), and then bind the two together. "], "cell_type": "markdown", "metadata": {"_cell_guid": "fbf125ca-d25e-4e59-a672-793602661c75", "_uuid": "061f7786a9e972964d3929719eb1f0a4eb57d579"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "9b47fd1a9f35e883867e58f33892273da7c34c2d", "_cell_guid": "3181ea93-f319-4211-ac26-a501af2c5fc8", "collapsed": true}, "source": ["test$Survived <- NA\n", "combi <- rbind(train, test)\n", "combi$Name <- as.character(combi$Name)\n", "\n", "# summary(combi)"]}, {"source": ["The features that are missing data (based on summary() and general look through the dataset are:\n", "\n", "* Age (very many)\n", "* Embarked (very few)\n", "* Fare (very few)\n", "\n", "There are many ways to go about age data as different people do based on the tutorials and articles I saw. First, we can use median/mean age for a particular gender group combined with cabin/passenger class data. Second, we can use rpart with *method=\"anova\"* to infer age based on other variables:\n"], "cell_type": "markdown", "metadata": {"_cell_guid": "63b28461-7281-4de4-b997-f93912dd7ee1", "_uuid": "de93bff0c62d88b872ed931806f057987013de30"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "3a70658f81c27a9857b6a33afc180cc66ca49a0a", "_cell_guid": "88593c6e-e146-48df-bb2c-8ba33fc80e89", "collapsed": true}, "source": ["# Use rpart for age prediction\n", "# Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,\n", "#                   data=combi[!is.na(combi$Age),], \n", "#                   method=\"anova\")\n", "# \n", "# combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])\n", "# combi$Age <- as.numeric(combi$Age)"]}, {"source": ["This, however, showed lower accuracy when compared to *mice* package solution:"], "cell_type": "markdown", "metadata": {"_cell_guid": "1531a493-eec9-4923-843e-373bb0fe11ad", "_uuid": "88e03d258bd84f15c12fc628e8325dc24d59d5c4"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "231764eb-4fbc-4662-bc3f-0a086801141f", "_uuid": "e879c5d422274e927c8498194e4053e8426d1b69"}, "source": ["set.seed(226)\n", "mice_mod <- mice(combi[, !names(combi) %in% c('PassengerId','Name','Ticket','Cabin','FamilySize','Surname','Survived', 'Fare', 'Child')], method='rf') \n", "mice_output <- complete(mice_mod)\n", "\n", "# plot to see difference\n", "plot(combi$Age)\n", "plot(mice_output$Age)\n", "\n", "combi$Age <- mice_output$Age\n"]}, {"source": ["Next up: the two other features that are missing data - Embarked and Fare. We can find particular rows of data where those are missing and then substitute them with most common/median value:"], "cell_type": "markdown", "metadata": {"_cell_guid": "b469140a-ca8d-4231-a209-b8672818229d", "_uuid": "84f769a31a5f128331b4effd524b0cb67dd28108"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "3f75f43b-ae92-4ae6-9a44-f6fda9272a91", "_uuid": "8ce5cf10820cf0211dd4d79a07ef972135898ba1"}, "source": ["summary(combi$Embarked)\n", "which(is.na(combi$Embarked))\n", "\n", "# substitute with mode, \"S\"\n", "combi$Embarked[c(62,830)] = \"S\"\n", "combi$Embarked <- factor(combi$Embarked)\n", "\n", "summary(combi$Fare)\n", "#substitute with median\n", "combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)\n", "combi$Fare <- as.numeric(combi$Fare)"]}, {"source": ["As seen by many other users, inferring family size based on number of siblings and parents aboard can be helpful, so here it is:"], "cell_type": "markdown", "metadata": {"_cell_guid": "f883a7d5-9210-4181-bb67-cc8e820fac52", "_uuid": "f7287423e39b60950004d2cf017897c78974eae6"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "90fbffa81661127489d3c125b50dd7fae5ec2591", "_cell_guid": "4a9d334c-c7cb-42da-89e6-ec12c5f192c3", "collapsed": true}, "source": ["combi$FamilySize <- combi$SibSp + combi$Parch + 1\n", "combi$FamilySize <- as.numeric(combi$FamilySize)"]}, {"source": ["Next up, title - as also seen in many other kernels. There are two ways to go about it - first, keep the original titles and substitute very rare ones, and second - combine the titles into \"categories\" (e.g. Officer, Royalty). In my model, the former solution showed better accuracy."], "cell_type": "markdown", "metadata": {"_cell_guid": "4ff051ab-9fbc-49ba-9ea6-df362a69f597", "_uuid": "029d2d79145598b934ac9f98eacb493e522033fb"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "266a5ba7-886d-4ea8-9192-6a6afede916e", "_uuid": "d450f6f22db76bb2c457ff97ee82760229d2dfd9"}, "source": ["combi$Title <- gsub('(.*, )|(\\\\..*)', '', combi$Name)\n", "\n", "#remove very rare titles\n", "combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'\n", "combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'\n", "combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\n", "\n", "# Alternative: group titles by class\n", "combi$TitleCat <- combi$Title\n", "combi$TitleCat[combi$Title %in% c('Capt', 'Col', 'Major', 'Rev', 'Dr')] <- 'Officer'\n", "combi$TitleCat[combi$Title %in% c('Mrs', 'Ms', 'Mme')] <- 'Mrs'\n", "combi$TitleCat[combi$Title %in% c('Mlle', 'Miss')] <- 'Miss'\n", "combi$TitleCat[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Don', 'Sir', 'Jonkheer')] <- 'Royal'\n", "\n", "combi$Title <- factor(combi$Title)\n", "combi$TitleCat <- factor(combi$TitleCat)\n", "\n", "cat('Original titles:')\n", "table(combi$Title)\n", "cat('By category:')\n", "table(combi$TitleCat)"]}, {"source": ["Based on age and family size, we can determine whether the person is a child, or a mother. Mother variable did not prove useful to me in the end (no increase in accuracy)."], "cell_type": "markdown", "metadata": {"_cell_guid": "ad122ca8-e166-4f2e-b775-812ea529ecf2", "_uuid": "f3f548cd022db705ec0f991e10e66eaf882a5db9"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "fa87f07b7ebcfcbedaac8e4a8b97d41c1cde8150", "_cell_guid": "c1f340b5-5588-4948-9631-fcc47faab3c3", "collapsed": true}, "source": ["combi$Child[combi$Age < 18] <- '1'\n", "combi$Child[combi$Age >= 18] <- '0'\n", "combi$Child <- factor(combi$Child)\n", "\n", "combi$Mother <- '0'\n", "combi$Mother[combi$Sex == 'female' & combi$Parch > 0 & combi$Age > 18 & combi$Title != 'Miss'] <- '1'\n", "combi$Mother <- factor(combi$Mother)"]}, {"source": ["Out of all other things that did not bring useful result was me using Deck and inferring the deck letter for everyone else:"], "cell_type": "markdown", "metadata": {"_cell_guid": "ff5cd049-d20d-4011-9acf-40d02d85d80f", "_uuid": "d85da5a36460fe4521e2548155ab229b9b5f948a"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "21c5e4133d7e0ac6013160f9e6faa9d60272900a", "_cell_guid": "18941bc1-b34c-4623-8477-c8cbc17675ae", "collapsed": true}, "source": ["# combi$Deck<-factor(sapply(combi$Cabin, function(x) strsplit(x, NULL)[[1]][1]))\n", "# running mice code here again\n", "# plot(combi$Deck)\n", "# plot(mice_output$Deck)"]}, {"source": ["Doubled check that everything is correct and has no NAs:"], "cell_type": "markdown", "metadata": {"_cell_guid": "b5e8b66d-57b1-46cc-b421-5876418ece1a", "_uuid": "4b51489f093e3db7b0c770abdebdba33a1d23ff1"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "2f4a5ba4-d868-4b96-8ad7-e094d299dde3", "_uuid": "17f2f4cb38dabb0d5d5cabe0742451bca6a66a10"}, "source": ["which(is.na(combi$Embarked))\n", "which(is.na(combi$Fare))\n", "which(is.na(combi$Sex))\n", "which(is.na(combi$SibSp))\n", "which(is.na(combi$FamilySize))\n", "which(is.na(combi$Title))\n", "which(is.na(combi$TitleCat))"]}, {"source": ["Split the data back to how it was before and try training with different models."], "cell_type": "markdown", "metadata": {"_cell_guid": "2b522d8e-9b9e-49a6-bca3-a0054ad577db", "_uuid": "c30c27b33a7c5020bf416cbd47b6f9755060bba3"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "4bc472f4-53b0-45ad-b0cb-d447dca0aab2", "_uuid": "0412d86fa465be578f2a2e3743a865c28153d7d7"}, "source": ["# split back into the train & test\n", "train <- combi[1:891,]\n", "test <- combi[892:1309,]\n", "\n", "# Regular decision tree\n", "fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize,\n", "             data=train,\n", "             method=\"class\")\n", "\n", "fit$confusion\n"]}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "9317429d-0d80-4314-b100-c2bd46e32f70", "_uuid": "ca53c890f93c1b73f149576933938f36706cf108"}, "source": ["# Random forest\n", "fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +\n", "                       Embarked + Title + FamilySize,\n", "                     data=train,\n", "                     importance=TRUE,\n", "                     ntree=2000)\n", "fit$confusion"]}, {"source": ["Based on tutorials found online and my limited understanding of decision tree algorirthms, I went for a conditional inference tree instead:\n"], "cell_type": "markdown", "metadata": {"_cell_guid": "31e38073-59ab-4be2-a961-2bbe659e4e84", "_uuid": "a500f334aee189944f06818f83570c72bb8f316a"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "2f44fa9bfedf37c2a3a47412af82d6620f4749d5", "_cell_guid": "14afa0dc-1f21-4c88-8826-a1e8cf718756", "collapsed": true}, "source": ["# conditional inference tree\n", " fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare +\n", "                  Embarked + Title + FamilySize,\n", "                data = train,\n", "                controls=cforest_unbiased(ntree=2000, mtry=3))\n"]}, {"source": ["At this point, the solution got to 80% accuracy based on Kaggle's evaluation (and I reached my submission limit), so my experimental code is using caret - to my eye it looked like it had better ways of calculating accuracy compared to cforest function"], "cell_type": "markdown", "metadata": {"_cell_guid": "9db3a26d-0e91-4840-877c-4f524719ef70", "_uuid": "2288c22151b6db2557452c5348eb1af4c164a8d2"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_cell_guid": "e5f3e353-1347-49c2-8122-6cca3422a6d2", "_uuid": "469a6921116400de9747822ab86c5d15bf4811b1"}, "source": ["set.seed(126)\n", "fit <- train(as.factor(Survived) ~ Pclass + Sex + Age + Child + SibSp + Fare +\n", "                Embarked + Title + FamilySize, \n", "  data = train, \n", "  method = \"cforest\", \n", "  tuneGrid = data.frame(.mtry = 7),\n", "  trControl = trainControl(method = \"oob\"))\n", "fit\n", "plot(varImp(fit))"]}, {"source": ["To wrap up, based on my playing around with the train function above:\n", "\n", "- age is better than child/non-child\n", "- title is better than title category\n", "- parch is useless\n", "-inferred deck is useless\n"], "cell_type": "markdown", "metadata": {"_cell_guid": "09a18dae-66e7-4e51-84b9-9b1ac8a8d933", "_uuid": "bdc8e3258bd0523ed982b6a5b5d39cd11def17d9"}}, {"source": ["Finally, the submission"], "cell_type": "markdown", "metadata": {"_cell_guid": "b3fbeb4a-9069-45ed-9dc6-85b8d8f07e63", "_uuid": "ae370ce1a473c894a57248e92311580621c6a2a8"}}, {"outputs": [], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "1149fbeddf525525508f0cdf901dc6acdfb36406", "_cell_guid": "549bd8c8-eb0e-4bea-a1b4-ac8b93336420", "collapsed": true}, "source": ["Prediction <- predict(fit, test, OOB=TRUE, type = \"raw\")\n", "Prediction\n", "\n", "submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\n", "\n", "write.csv(submit, file = \"inferenceTree\", row.names = FALSE)"]}, {"source": [], "cell_type": "markdown", "metadata": {"_cell_guid": "c727ca86-d694-4c89-a93e-f7b8f6a0635b", "_uuid": "829e13a7fa49b7d2ec284e62ca67a168e570b204"}}]}