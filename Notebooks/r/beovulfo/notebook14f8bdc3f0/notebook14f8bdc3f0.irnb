{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "1949f09f-5034-0b4e-de20-223c18f4987a"
      },
      "source": [
        "This is my first R notebook, and my first real-world experience with machine learning. I am excited about this!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "b05bfd3c-54f8-da9f-b004-cd5b51653132"
      },
      "source": [
        "# 1) Loading data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5112f413-a74f-6d44-80d9-ff664b4d02b5"
      },
      "outputs": [],
      "source": [
        "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n",
        "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "library('ggplot2') # Data visualization\n",
        "library('readr') # CSV file I/O, e.g. the read_csv function\n",
        "library('ggthemes') # visualization\n",
        "library('scales') # visualization\n",
        "library('dplyr') # data manipulation\n",
        "library('mice') # imputation\n",
        "library('randomForest') # classification algorithm\n",
        "# Input data files are available in the \"../input/\" directory.\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
        "\n",
        "system(\"ls ../input\")\n",
        "\n",
        "# Any results you write to the current directory are saved as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "07de387b-1dae-1727-30dc-a5a7e30a8cf5"
      },
      "outputs": [],
      "source": [
        "train <- read.csv('../input/train.csv', stringsAsFactors = F)\n",
        "test  <- read.csv('../input/test.csv', stringsAsFactors = F)\n",
        "\n",
        "full  <- bind_rows(train, test) # bind training & test data\n",
        "\n",
        "# check data\n",
        "str(full)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "bdc9ba5e-db3a-9959-6688-553ccdbf8b0c"
      },
      "source": [
        "We've got a sense of our variables, their class type, and the first few observations of each. We know we're working with 1309 observations of 12 variables. To make things a bit more explicit since a couple of the variable names aren't 100% illuminating, here's what we've got to deal with:\n",
        "\n",
        "| Variable Name | Description |\n",
        "\n",
        "-------------------|-----------------\n",
        "\n",
        "Survived      | Survived (1) or died (0)\n",
        "\n",
        "Pclass        | Passenger's class\n",
        "\n",
        "Name          | Passenger's name\n",
        "\n",
        "Sex           | Passenger's sex\n",
        "\n",
        "Age           | Passenger's age\n",
        "\n",
        "SibSp         | Number of siblings/spouses aboard\n",
        "\n",
        "Parch         | Number of parents/children aboard\n",
        "\n",
        "Ticket        | Ticket number\n",
        "\n",
        "Fare          | Fare\n",
        "\n",
        "Cabin         | Cabin\n",
        "\n",
        "Embarked      | Port of embarkation\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "40168e7c-74fd-f160-e668-88276f07f6f7"
      },
      "outputs": [],
      "source": [
        "# 2) Feature engineering"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e53e8ad8-4ec7-3924-30fd-2e2ff6d90a77"
      },
      "outputs": [],
      "source": [
        " #Grab title from passenger names\n",
        "full$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n",
        "\n",
        "# Show title counts by sex\n",
        "table(full$Sex, full$Title)\n",
        "table(full$Pclass,full$Title)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "1888cbfd-de14-ffb7-a1c3-3c30cfdef3b2"
      },
      "outputs": [],
      "source": [
        "# Titles with very low cell counts to be combined to \"rare\" level\n",
        "rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n",
        "                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n",
        "\n",
        "# Also reassign mlle, ms, and mme accordingly\n",
        "full$Title[full$Title == 'Mlle']        <- 'Miss' \n",
        "full$Title[full$Title == 'Ms']          <- 'Miss'\n",
        "full$Title[full$Title == 'Mme']         <- 'Mrs' \n",
        "full$Title[full$Title %in% rare_title]  <- 'Rare Title'\n",
        "\n",
        "# Show title counts by sex again\n",
        "table(full$Pclass, full$Title)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3830e9af-c739-2be0-158a-9b25978b1e6d"
      },
      "outputs": [],
      "source": [
        "# Finally, grab surname from passenger name\n",
        "full$Surname <- sapply(full$Name,  \n",
        "                      function(x) strsplit(x, split = '[,.]')[[1]][1])\n",
        "# table(full$Pclass,full$Surname)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "bd658e73-3aa5-1f73-3344-cf22fd314cea"
      },
      "outputs": [],
      "source": [
        "cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "a8d8a5cf-10c8-0df5-cc0a-84e5b63523e5"
      },
      "source": [
        "## Do families sink or swim together?\n",
        "\n",
        "Now that we've taken care of splitting passenger name into some new variables, we can take it a step further and make some new family variables. First we're going to make a **family size** variable based on number of siblings/spouse(s) (maybe someone has more than one spouse?) and number of children/parents. \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "59b73bf2-b9a7-4511-de7f-f4d21c9632b8"
      },
      "outputs": [],
      "source": [
        "# Create a family size variable including the passenger themselves\n",
        "full$Fsize <- full$SibSp + full$Parch + 1\n",
        "\n",
        "# Create a family variable \n",
        "full$Family <- paste(full$Surname, full$Fsize, sep='_')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "1a11c243-9c0a-7041-e337-1fff1808b373"
      },
      "outputs": [],
      "source": [
        "# Use ggplot2 to visualize the relationship between family size & survival\n",
        "ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n",
        "  geom_bar(stat='count', position='dodge') +\n",
        "  scale_x_continuous(breaks=c(1:11)) +\n",
        "  labs(x = 'Family Size') +\n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "581238ce-69ec-f0f0-6638-979c648852f7"
      },
      "outputs": [],
      "source": [
        "# Discretize family size\n",
        "full$FsizeD[full$Fsize == 1] <- 'singleton'\n",
        "full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\n",
        "full$FsizeD[full$Fsize > 4] <- 'large'\n",
        "\n",
        "# Show family size by survival using a mosaic plot\n",
        "mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "84405b38-9a96-9989-aba1-bf2e30ce5b84"
      },
      "source": [
        "The mosaic plot shows that we preserve our rule that there's a survival penalty among singletons and large families, but a benefit for passengers in small families. I want to do something further with our age variable, but `r sum(is.na(full$Age))` rows have missing age values, so we will have to wait until after we address missingness.\n",
        "\n",
        "## Treat a few more variables ...\n",
        "\n",
        "What's left? There's probably some potentially useful information in the **passenger cabin** variable including about their **deck**. Let's take a look.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5040b255-47aa-e6fa-be8d-c2de3675fe83"
      },
      "outputs": [],
      "source": [
        "# This variable appears to have a lot of missing values\n",
        "full$Cabin[1:28]\n",
        "\n",
        "# The first character is the deck. For example:\n",
        "strsplit(full$Cabin[2], NULL)[[1]]\n",
        "\n",
        "# Create a Deck variable. Get passenger deck A - F:\n",
        "full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "27c79fb7-de49-94fd-551d-a30c9eccc061"
      },
      "source": [
        "There's more that likely could be done here including looking into cabins with multiple rooms listed (e.g., row 28: \"C23 C25 C27\"), but given the sparseness of the column we'll stop here.\n",
        "\n",
        "# Missingness\n",
        "\n",
        "Now we're ready to start exploring missing data and rectifying it through imputation. There are a number of different ways we could go about doing this. Given the small size of the dataset, we probably should not opt for deleting either entire observations (rows) or variables (columns) containing missing values. We're left with the option of either replacing missing values with a sensible values given the distribution of the data, e.g., the mean, median or mode. Finally, we could go with prediction. We'll use both of the two latter methods and I'll rely on some data visualization to guide our decisions.\n",
        "\n",
        "## Sensible value imputation\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c8dbb5b5-c4a8-0399-d031-aedca66ec3c3"
      },
      "outputs": [],
      "source": [
        "# Passengers 62 and 830 are missing Embarkment\n",
        "full[c(62, 830), 'Embarked']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c0ffa111-5708-9d08-2473-849d5a96f5d3"
      },
      "outputs": [],
      "source": [
        "full[c(62,830),c('Pclass','Fare','Embarked','Sex')]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9c9d9cc3-f78b-8b14-f337-67dd30035797"
      },
      "outputs": [],
      "source": [
        "cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[1]][2], '</b>. So from where did they embark?'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "37f0fa6d-2c6a-1cf9-d9d4-9f3bc14e17a8"
      },
      "outputs": [],
      "source": [
        "# Get rid of our missing passenger IDs\n",
        "embark_fare <- full %>%\n",
        "  filter(PassengerId != 62 & PassengerId != 830)\n",
        "\n",
        "# Use ggplot2 to visualize embarkment, passenger class, & median fare\n",
        "ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n",
        "  geom_boxplot() +\n",
        "  geom_hline(aes(yintercept=80), \n",
        "    colour='red', linetype='dashed', lwd=2) +\n",
        "  scale_y_continuous(labels=dollar_format()) +\n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "b35c451d-0aba-f512-d105-eb9c73b014ad"
      },
      "source": [
        "\n",
        "Voil\u00e0! The median fare for a first class passenger departing from Charbourg ('C') coincides nicely with the $80 paid by our embarkment-deficient passengers. I think we can safely replace the NA values with 'C'.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e5cc2414-5059-c37d-8890-218de582b5d7"
      },
      "outputs": [],
      "source": [
        "# Since their fare was $80 for 1st class, they most likely embarked from 'C'\n",
        "full$Embarked[c(62, 830)] <- 'C'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "ef34326f-c8bf-d4e1-dfe4-c10d4acab7f6"
      },
      "source": [
        "We're close to fixing the handful of NA values here and there. Passenger on row 1044 has an NA Fare value.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "80fc038e-ef56-54e1-6384-625ae72b6361"
      },
      "outputs": [],
      "source": [
        "# Show row 1044\n",
        "full[1044, c('Pclass','Sex','Age','Embarked','Fare')]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0270bc76-09d2-eb6b-3758-267bed5ff23b"
      },
      "outputs": [],
      "source": [
        "kk <- full %>%\n",
        "  filter(Embarked == 'S' & Pclass == 3)\n",
        "summary(kk$Fare)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "e13d9861-b3bc-d534-6360-e51009518b20"
      },
      "source": [
        "The Median Fare for a person Embarked from S and third class is 8.05$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "aa8a3d86-299a-1095-8e3b-bb8e15e354be"
      },
      "outputs": [],
      "source": [
        "# Replace missing fare value with median fare for class/embarkment\n",
        "full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "ab84ac58-50ab-aea1-8854-2cda99fd987c"
      },
      "source": [
        "## Predictive imputation\n",
        "\n",
        "Finally, as we noted earlier, there are quite a few missing **Age** values in our data. We are going to get a bit more fancy in imputing missing age values. Why? Because we can. We will create a model predicting ages based on other variables.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ee48447f-2ee7-8380-928e-c5e7c3d83d71"
      },
      "outputs": [],
      "source": [
        "# Show number of missing Age values\n",
        "sum(is.na(full$Age))\n",
        "str(full)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3647cc1d-ee38-0569-9c57-cdff96ba2bf1"
      },
      "outputs": [],
      "source": [
        "# Make variables factors into factors\n",
        "factor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n",
        "                 'Title','Surname','Family','FsizeD')\n",
        "\n",
        "full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n",
        "\n",
        "# Set a random seed\n",
        "set.seed(129)\n",
        "\n",
        "# Perform mice imputation, excluding certain less-than-useful variables:\n",
        "mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf') \n",
        "\n",
        "# Save the complete output \n",
        "mice_output <- complete(mice_mod)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0677b8ee-b9a8-4aa2-333a-e57cabc32899"
      },
      "outputs": [],
      "source": [
        "lapply?"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}