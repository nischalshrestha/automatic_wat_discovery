{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "a5827e5e-fe39-cd47-2cc4-fa9334c3be80"
      },
      "source": [
        "Titanic: Machine Learning from Disaster"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e6cb7e73-ae80-7f3c-dfae-a0216069a8f9"
      },
      "outputs": [],
      "source": [
        "getwd()\n",
        "\n",
        "\n",
        "#Load data\n",
        "train=read.csv(\"train.csv\", header = TRUE)\n",
        "test=read.csv(\"test.csv\", header = TRUE)\n",
        "\n",
        "#View data\n",
        "View(train)\n",
        "View(test)\n",
        "\n",
        "#Add survived variable to test to make it 12 columns(= no. of columns in train)\n",
        "test.survived=data.frame(Survived=rep(\"None\", nrow(test)), test[,])\n",
        "\n",
        "#Reorder test.survived\n",
        "test.survived=test.survived[,c(2,1,3:12)]\n",
        "\n",
        "#Combine data sets\n",
        "data.combined=rbind(train, test.survived)\n",
        "str(data.combined)\n",
        "nrow(data.combined)\n",
        "\n",
        "#Change into factors\n",
        "data.combined$Survived=as.factor(data.combined$Survived)\n",
        "data.combined$Pclass=as.factor(data.combined$Pclass)\n",
        "str(data.combined)\n",
        "\n",
        "#Take a look at the gross survival rate\n",
        "table(data.combined$Survived)\n",
        "\n",
        "#Distribution across classes\n",
        "table(data.combined$Pclass)\n",
        "\n",
        "#Load up ggplot2\n",
        "library(ggplot2)\n",
        "\n",
        "\n",
        "#Hypothesis- Rich people survived at a higher rate\n",
        "train$Pclass= as.factor(train$Pclass)\n",
        "\n",
        "ggplot(train, aes(x=Pclass, fill=factor(Survived)))+\n",
        "  geom_bar(width=0.5)+\n",
        "  xlab(\"PClass\")+\n",
        "  ylab(\"Total Count\")+\n",
        "  labs(fill=\"Survived\")\n",
        "\n",
        "#Get unique names in train and test data sets\n",
        "length(unique(as.character(data.combined$Name)))\n",
        "\n",
        "#Get the duplicate names and store them as a vector\n",
        "dup.names=as.character(data.combined[which(duplicated(as.character(data.combined$Name))), \"name\"])\n",
        "\n",
        "#Take a look at the records in the combined data set\n",
        "data.combined[which(data.combined$Name %in% dup.names),]\n",
        "\n",
        "library(stringr)\n",
        "\n",
        "#Any correlation between Mr. and Mrs. variable\n",
        "Miss=data.combined[which(str_detect(data.combined$Name, \"Miss.\")),]\n",
        "Miss[1:5,]\n",
        "\n",
        "#Name title correlates with age\n",
        "Mrses=data.combined[which(str_detect(data.combined$Name, \"Mrs.\")),]\n",
        "Mrses[1:5,]\n",
        "\n",
        "#Check out males to see if pattern continues\n",
        "males=data.combined[which(train$Sex==\"male\"),]\n",
        "males[1:5,]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}