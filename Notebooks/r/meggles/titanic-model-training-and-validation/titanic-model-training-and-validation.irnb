{"nbformat": 4, "metadata": {"language_info": {"name": "R", "codemirror_mode": "r", "file_extension": ".r", "version": "3.4.1", "mimetype": "text/x-r-source", "pygments_lexer": "r"}, "kernelspec": {"name": "ir", "language": "R", "display_name": "R"}}, "cells": [{"metadata": {"_cell_guid": "335ea9c4-04ec-4849-9ef6-01f352c54012", "_uuid": "d7cdf59359b90a5b276f76c1d715a87a19aa4450"}, "source": ["#load packages\n", "library(\"ggplot2\") # data visualization\n", "library(\"caret\") # multiple model training/testing functions\n", "library(\"readr\") # CSV file I/O, e.g. the read_csv function\n", "library(\"dplyr\") # several Hadley Wickham data-wrangling packages\n", "library(\"mice\") # imputing missing values\n", "library(\"VIM\") # visualizing missing values\n", "library(\"stringr\") # feature engineering\n", "library(\"arules\") # feature engineering\n", "library(\"corrplot\") # correlogram \n", "library(\"randomForest\") # random forest model\n", "\n", "options(warn=-1) # turn warnings off "], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "c3074045-fc16-4017-8d45-a57a86ad974e", "_uuid": "1ca77d50d54292bfe2be4fe2d47b73c235985654"}, "source": ["# read in the data\n", "train_full <- read_csv('../input/train.csv')\n", "\n", "# train split into train and validate\n", "inTrain <- createDataPartition(train_full$Survived, times = 1, p = 0.8, list=F)\n", "\n", "train <- train_full[inTrain,]\n", "val <- train_full[-inTrain,]"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "eb29cedf-9277-42c1-93e5-b43401562033", "_uuid": "667459f8f85e76b4615a2f7c3c634a50d062a6f1"}, "source": ["nrow(train) # number of training observations\n", "nrow(val) # number of training observations"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "c2cab203-1d3a-44fc-8a2d-01441bea1bae", "collapsed": true, "_uuid": "f1dfec8031e054cae7133f16c654ac3f7cd09b6a"}, "source": ["   \n", "    train <- mutate(train,\n", "                Cabin_Deck = str_sub(Cabin,1,1),\n", "                Ticket_Digit = nchar(Ticket),\n", "                Ticket_Alpha = str_detect(Ticket, '[[:alpha:]]'),\n", "                Family_Size = Parch+SibSp,\n", "                Name_Family = gsub(\",.*$\", \"\", Name),\n", "                Title = str_sub(Name, \n", "                                str_locate(Name, \",\")[ , 1] + 2, \n", "                                str_locate(Name, \"\\\\.\")[ , 1] - 1)\n", "               )\n", "    # credit to https://www.kaggle.com/c/titanic/discussion/30733 for Title regex\n", "\n", "    train_sub <- select(train,\n", "                          Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                          Embarked,Cabin_Deck,Ticket_Digit,Ticket_Alpha,Name_Family,\n", "                          Title,Family_Size)\n", "\n", "    train_mm <- model.matrix(~Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                               Embarked+Cabin_Deck+Title+Family_Size+Ticket_Alpha,\n", "                                          train_sub)\n", "\n", "    train_imp <- mice(train_sub, \n", "                        m = 1,\n", "                        method = \"cart\",\n", "                        seed = 5,\n", "                        printFlag=F)\n", "\n", "    train <- complete(train_imp)\n", "\n", "    train <- mutate(train, \n", "                    Cabin_Deck_i = ifelse(!is.na(Cabin_Deck),\n", "                                    Cabin_Deck,\n", "                                    ifelse(Pclass == 1,# read in the data\n", "                                           'ABCD', \n", "                                            # not including T because only one passenger\n", "                                            # in the training set was assigned cabin T\n", "                                           ifelse(Pclass == 2,\n", "                                                  'E',\n", "                                                 'F'))))\n", "\n", "    train_Pclass1 <- filter(train, Pclass == 1) \n", "\n", "    cuts <- discretize(train_Pclass1$Fare,\n", "                       method = 'cluster',\n", "                       categories = 4,\n", "                       ordered = T,\n", "                       onlycuts = T)\n", "\n", "    train <- mutate(train, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != \"ABCD\",\n", "                                           Cabin_Deck_i,\n", "                                           ifelse(Fare < cuts[2],\n", "                                                 \"D\",\n", "                                                 ifelse(Fare < cuts[3],\n", "                                                       \"C\",\n", "                                                       ifelse(Fare < cuts[4],\n", "                                                             \"B\", \n", "                                                             \"A\")))))\n", "    train <- mutate(train, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == 'A',1,\n", "                                    ifelse(Cabin_Deck_i2 == 'B',2,\n", "                                          ifelse(Cabin_Deck_i2 == 'C',3,\n", "                                                ifelse(Cabin_Deck_i2 == 'D',4,\n", "                                                      ifelse(Cabin_Deck_i2 == 'E',5,\n", "                                                            ifelse(Cabin_Deck_i2 == 'F',6,\n", "                                                                  ifelse(Cabin_Deck_i2 == 'G',7,8))))))))\n", "    train <- mutate(train, \n", "                    Embarked = ifelse(is.na(Embarked),\n", "                                     'S', Embarked))"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "7027932d-699e-4472-9d75-f07138daad95", "collapsed": true, "_uuid": "ed5e2a9e16f7f92f4ae16787b2bccf2970fbb054"}, "source": ["\n", "    val <- mutate(val,\n", "                Cabin_Deck = str_sub(Cabin,1,1),\n", "                Ticket_Digit = nchar(Ticket),\n", "                Ticket_Alpha = str_detect(Ticket, '[[:alpha:]]'),\n", "                Family_Size = Parch+SibSp,\n", "                Name_Family = gsub(\",.*$\", \"\", Name),\n", "                Title = str_sub(Name, \n", "                                str_locate(Name, \",\")[ , 1] + 2, \n", "                                str_locate(Name, \"\\\\.\")[ , 1] - 1)\n", "               )\n", "    # credit to https://www.kaggle.com/c/titanic/discussion/30733 for Title regex\n", "\n", "    val_sub <- select(val,\n", "                          Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                          Embarked,Cabin_Deck,Ticket_Digit,Ticket_Alpha,Name_Family,\n", "                          Title,Family_Size)\n", "\n", "    val_mm <- model.matrix(~Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                               Embarked+Cabin_Deck+Title+Family_Size+Ticket_Alpha,\n", "                                          val_sub)\n", "\n", "    val_imp <- mice(val_sub, \n", "                        m = 1,\n", "                        method = \"cart\",\n", "                        seed = 5,\n", "                        printFlag=F)\n", "\n", "    val <- complete(val_imp)\n", "\n", "    val <- mutate(val, \n", "                    Cabin_Deck_i = ifelse(!is.na(Cabin_Deck),\n", "                                    Cabin_Deck,\n", "                                    ifelse(Pclass == 1,\n", "                                           'ABCD', \n", "                                            # not including T because only one passenger\n", "                                            # in the training set was assigned cabin T\n", "                                           ifelse(Pclass == 2,\n", "                                                  'E',\n", "                                                 'F'))))\n", "\n", "    val_Pclass1 <- filter(val, Pclass == 1) \n", "\n", "    cuts <- discretize(val_Pclass1$Fare,\n", "                       method = 'cluster',\n", "                       categories = 4,\n", "                       ordered = T,\n", "                       onlycuts = T)\n", "\n", "    val <- mutate(val, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != \"ABCD\",\n", "                                           Cabin_Deck_i,\n", "                                           ifelse(Fare < cuts[2],\n", "                                                 \"D\",\n", "                                                 ifelse(Fare < cuts[3],\n", "                                                       \"C\",\n", "                                                       ifelse(Fare < cuts[4],\n", "                                                             \"B\", \n", "                                                             \"A\")))))\n", "    val <- mutate(val, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == 'A',1,\n", "                                    ifelse(Cabin_Deck_i2 == 'B',2,\n", "                                          ifelse(Cabin_Deck_i2 == 'C',3,\n", "                                                ifelse(Cabin_Deck_i2 == 'D',4,\n", "                                                      ifelse(Cabin_Deck_i2 == 'E',5,\n", "                                                            ifelse(Cabin_Deck_i2 == 'F',6,\n", "                                                                  ifelse(Cabin_Deck_i2 == 'G',7,8))))))))\n", "    val <- mutate(val, \n", "                    Embarked = ifelse(is.na(Embarked),\n", "                                     'S', Embarked))"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "fe726d22-bf37-404b-bff0-2122ad13c829", "collapsed": true, "_uuid": "802aea8a824fbb3d80434147b5d99de698877511"}, "source": ["train <- mutate(train,\n", "                Survived = as.factor(Survived),\n", "                Sex = as.factor(Sex),\n", "                Embarked = as.factor(Embarked),\n", "                Cabin_Deck_i2 = as.factor(Cabin_Deck_i2),\n", "                Name_Family = as.factor(Name_Family),\n", "                Ticket_Alpha = as.factor(Ticket_Alpha),\n", "                Title = as.factor(Title))\n", "\n", "val <- mutate(val,\n", "               Survived = as.factor(Survived),\n", "               Sex = as.factor(Sex),\n", "                Embarked = as.factor(Embarked),\n", "                  Ticket_Alpha = as.factor(Ticket_Alpha),\n", "                Cabin_Deck_i2 = factor(Cabin_Deck_i2, levels = levels(train$Cabin_Deck_i2)),\n", "                Name_Family = factor(Name_Family, levels = levels(train$Name_Family)),\n", "                Title = factor(Title, levels = levels(train$Title)))"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "e564c219-2b5f-4d93-abea-1ffda8e90eb4", "_uuid": "1671db1d2bfddda48a420fe9650c5cf8e242464c"}, "source": ["dt_model <- train(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                  Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+\n", "                  Family_Size+Title,\n", "                  data=train,  method = \"rpart\",\n", "                  tuneLength = 10)\n", "dt_model$finalModel\n", "\n", "val_dt <- select(val, Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                 Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,\n", "                 Family_Size,Title) %>%\n", "filter(!is.na(Cabin_Deck_i2) & !is.na(Ticket_Digit) & !is.na(Title))\n", "\n", "dt_pred <- predict(dt_model, val_dt[,-1])\n", "confusionMatrix(dt_pred, val_dt$Survived, positive = \"1\")"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "e6f995e9-fe41-452e-89f1-5b69a59501e4", "_uuid": "a4ca3e809cef7039aa86b5cf9465a5ff814cca07"}, "source": ["rf_model <- randomForest(Survived~\n", "                         Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                         Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+\n", "                         Family_Size+Title,\n", "                      data=train, \n", "                      importance=T, \n", "                      ntree=2000)\n", "varImpPlot(rf_model)\n", "val_rf <- select(val, Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                           Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title)\n", "rf_pred <- predict(rf_model, val_rf[,-1])\n", "confusionMatrix(rf_pred, val_rf$Survived, positive = \"1\")"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "b2f69aa7-b10c-428d-bfc1-d35df554e6f2", "_uuid": "5998877fc18f003dba1d3ac7bba1f188d6be7f09"}, "source": ["library(e1071)\n", "val_nb <- select(val,Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                           Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title)\n", "nb_model <- naiveBayes(Survived~\n", "                           Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                           Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+\n", "                            Family_Size+Title,\n", "           data = train)\n", "nb_pred <- predict(nb_model,val_nb[,-1])\n", "confusionMatrix(nb_pred, val_nb$Survived, positive = \"1\")"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "fc3f7e88-8f2b-45d1-9e6b-da9cafe58a01", "_uuid": "9cf935c8fa28f94dcaa353422111887b75673eeb"}, "source": ["val_svm <- select(val,Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                           Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title) %>%\n", "filter(!is.na(Cabin_Deck_i2) & !is.na(Ticket_Digit) & !is.na(Title))\n", "\n", "svm_model <- svm(Survived~\n", "                           Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                           Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+\n", "                            Family_Size+Title,\n", "           data = train)\n", "svm_pred <- predict(svm_model,val_svm[,-1])\n", "confusionMatrix(svm_pred, val_svm$Survived, positive = \"1\")"], "execution_count": null, "outputs": [], "cell_type": "code"}, {"metadata": {"_cell_guid": "957c156a-2116-4274-bd1a-470f390de1c2", "_uuid": "f8cd97824d7c5134cc3e230e81f23ca258fae14e"}, "source": ["library(sgd)\n", "\n", "val_sgd <- select(val,Survived,Pclass,Sex,Age,SibSp,Parch,Fare,\n", "                           Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title) %>%\n", "filter(!is.na(Cabin_Deck_i2) & !is.na(Ticket_Digit) & !is.na(Title))\n", "\n", "sgd_model <- svm(Survived~\n", "                           Pclass+Sex+Age+SibSp+Parch+Fare+\n", "                           Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+\n", "                            Family_Size+Title,\n", "           data = train)\n", "sgd_pred <- predict(sgd_model,val_sgd[,-1])\n", "confusionMatrix(sgd_pred, val_sgd$Survived, positive = \"1\")"], "execution_count": null, "outputs": [], "cell_type": "code"}], "nbformat_minor": 1}