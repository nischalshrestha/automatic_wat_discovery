{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3e9ecdf4-34cc-cafe-9bb5-d0fc4d019f2e"
      },
      "outputs": [],
      "source": [
        "# Load packages\n",
        "library('ggplot2') # visualization\n",
        "library('ggthemes') # visualization\n",
        "library('scales') # visualization\n",
        "library('dplyr') # data manipulation\n",
        "library('mice') # imputation\n",
        "library('randomForest') # classification algorithm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "54520ace-63fc-bcf6-753f-93213959e494"
      },
      "outputs": [],
      "source": [
        "train <- read.csv('../input/train.csv', stringsAsFactors = F)\n",
        "test  <- read.csv('../input/test.csv', stringsAsFactors = F)\n",
        "\n",
        "full  <- bind_rows(train, test) # bind training & test data\n",
        "\n",
        "# check data\n",
        "str(full)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "7a39faa8-a7cf-ac2f-a635-77efefc8838c"
      },
      "outputs": [],
      "source": [
        "# Grab title from passenger names\n",
        "full$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n",
        "\n",
        "# Show title counts by sex\n",
        "table(full$Sex, full$Title)\n",
        "\n",
        "# Titles with very low cell counts to be combined to \"rare\" level\n",
        "rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n",
        "                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n",
        "\n",
        "# Also reassign mlle, ms, and mme accordingly\n",
        "full$Title[full$Title == 'Mlle']        <- 'Miss' \n",
        "full$Title[full$Title == 'Ms']          <- 'Miss'\n",
        "full$Title[full$Title == 'Mme']         <- 'Mrs' \n",
        "full$Title[full$Title %in% rare_title]  <- 'Rare Title'\n",
        "\n",
        "# Show title counts by sex again\n",
        "table(full$Sex, full$Title)\n",
        "\n",
        "# Finally, grab surname from passenger name\n",
        "full$Surname <- sapply(full$Name,  \n",
        "                      function(x) strsplit(x, split = '[,.]')[[1]][1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "00e65561-bc05-6747-e290-4f767f761a1f"
      },
      "outputs": [],
      "source": [
        "# Create a family size variable including the passenger themselves\n",
        "full$Fsize <- full$SibSp + full$Parch + 1\n",
        "\n",
        "# Create a family variable \n",
        "full$Family <- paste(full$Surname, full$Fsize, sep='_')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "98613b9d-37cf-6395-5fa6-a0fb0b1eebb1"
      },
      "outputs": [],
      "source": [
        "# Use ggplot2 to visualize the relationship between family size & survival\n",
        "ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n",
        "  geom_bar(stat='count', position='dodge') +\n",
        "  scale_x_continuous(breaks=c(1:11)) +\n",
        "  labs(x = 'Family Size') +\n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e4acac36-9f81-ecd0-0dbb-94aedb088031"
      },
      "outputs": [],
      "source": [
        "# Discretize family size\n",
        "full$FsizeD[full$Fsize == 1] <- 'singleton'\n",
        "full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\n",
        "full$FsizeD[full$Fsize > 4] <- 'large'\n",
        "\n",
        "# Show family size by survival using a mosaic plot\n",
        "mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b76f8ee2-5d34-71e3-b482-0a02f29b4649"
      },
      "outputs": [],
      "source": [
        "# This variable appears to have a lot of missing values\n",
        "full$Cabin[1:28]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "65997c96-5fb9-8e85-8baa-d573da86b789"
      },
      "outputs": [],
      "source": [
        "# Create a Deck variable. Get passenger deck A - F:\n",
        "full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3d6e9221-e3a6-c411-4947-7bf7e1ac6bdb"
      },
      "outputs": [],
      "source": [
        "str(full$Deck)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "534604f5-2752-e694-ca2d-2267bb3dc4e0"
      },
      "outputs": [],
      "source": [
        "str(full)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "32034075-6726-ec4e-f2b6-110559ade49a"
      },
      "outputs": [],
      "source": [
        "length(full$Embarked[full$Embarked==\"\"])\n",
        "sum(is.na(full$Age))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b754f22f-a1a8-1090-8779-7baa7d760e51"
      },
      "outputs": [],
      "source": [
        "# Passengers 62 and 830 are missing Embarkment\n",
        "full[c(62, 830), 'Embarked']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0e555d3c-c36c-d708-0c87-cb458d4c279a"
      },
      "outputs": [],
      "source": [
        "# Get rid of our missing passenger IDs\n",
        "embark_fare <- full %>%\n",
        "  filter(PassengerId != 62 & PassengerId != 830)\n",
        "\n",
        "# Use ggplot2 to visualize embarkment, passenger class, & median fare\n",
        "ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n",
        "  geom_boxplot() +\n",
        "  geom_hline(aes(yintercept=80), \n",
        "    colour='red', linetype='dashed', lwd=2) +\n",
        "  scale_y_continuous(labels=dollar_format()) +\n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "481a7afc-daec-8062-85b4-afd3b34d2403"
      },
      "outputs": [],
      "source": [
        "# Since their fare was $80 for 1st class, they most likely embarked from 'C'\n",
        "full$Embarked[c(62, 830)] <- 'C'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "84e644fe-a1ec-a84a-eff8-1fe2dede1a9c"
      },
      "outputs": [],
      "source": [
        "# Show row 1044\n",
        "full[1044, ]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ed37e67b-3e25-1fd5-2860-8dfd6c635e2d"
      },
      "outputs": [],
      "source": [
        "ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n",
        "  aes(x = Fare)) +\n",
        "  geom_density(fill = '#99d6ff', alpha=0.4) + \n",
        "  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n",
        "    colour='red', linetype='dashed', lwd=1) +\n",
        "  scale_x_continuous(labels=dollar_format()) +\n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "930be994-2f0f-6632-3193-fc9f4c344ad6"
      },
      "outputs": [],
      "source": [
        "# Replace missing fare value with median fare for class/embarkment\n",
        "full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3bf3dc76-3eb1-e1ec-34fb-92fde704b054"
      },
      "outputs": [],
      "source": [
        "# Show number of missing Age values\n",
        "sum(is.na(full$Age))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b4cf371b-68b0-14d6-88f4-26d4ececbe6c"
      },
      "outputs": [],
      "source": [
        "# Make variables factors into factors\n",
        "factor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n",
        "                 'Title','Surname','Family','FsizeD')\n",
        "\n",
        "full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n",
        "\n",
        "# Set a random seed\n",
        "set.seed(129)\n",
        "\n",
        "# Perform mice imputation, excluding certain less-than-useful variables:\n",
        "mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf') "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "1424a5dc-a2bd-0bf0-beb8-5c5ea36a10fd"
      },
      "outputs": [],
      "source": [
        "# Save the complete output \n",
        "mice_output <- complete(mice_mod)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "53f16faf-ec6c-989b-26c6-8208b2f3bfe5"
      },
      "outputs": [],
      "source": [
        "# Plot age distributions\n",
        "par(mfrow=c(1,2))\n",
        "hist(full$Age, freq=F, main='Age: Original Data', \n",
        "  col='darkgreen', ylim=c(0,0.04))\n",
        "hist(mice_output$Age, freq=F, main='Age: MICE Output', \n",
        "  col='lightgreen', ylim=c(0,0.04))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "159355e7-ff9f-6816-da2f-6f65098593f7"
      },
      "outputs": [],
      "source": [
        "# Replace Age variable from the mice model.\n",
        "full$Age <- mice_output$Age\n",
        "\n",
        "# Show new number of missing Age values\n",
        "sum(is.na(full$Age))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e65ed4af-5136-d279-71d0-d79fd4d31cbe"
      },
      "outputs": [],
      "source": [
        "# First we'll look at the relationship between age & survival\n",
        "ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n",
        "  geom_histogram() + \n",
        "  # I include Sex since we know (a priori) it's a significant predictor\n",
        "  facet_grid(.~Sex) + \n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3530fbfa-8349-34e6-74a6-ae713e057a2d"
      },
      "outputs": [],
      "source": [
        "# Create the column child, and indicate whether child or adult\n",
        "full$Child <- 'Adult'\n",
        "full$Child[full$Age < 18] <- 'Child'\n",
        "\n",
        "# Show counts\n",
        "table(full$Child, full$Survived)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3c6cca3e-93a7-a3ea-4113-e5c293fe25a0"
      },
      "outputs": [],
      "source": [
        "full$Child"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "96df6ce0-e655-1c5f-9728-43e7682220ba"
      },
      "outputs": [],
      "source": [
        "# Adding Mother variable\n",
        "full$Mother <- 'Not Mother'\n",
        "full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n",
        "\n",
        "# Show counts\n",
        "table(full$Mother, full$Survived)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9b59fe40-8136-3b51-3d2e-d94414b1cc71"
      },
      "outputs": [],
      "source": [
        "# Finish by factorizing our two new factor variables\n",
        "full$Child  <- factor(full$Child)\n",
        "full$Mother <- factor(full$Mother)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "fb6faf72-f3f4-96e5-22e5-9b7ca05c9ff8"
      },
      "outputs": [],
      "source": [
        "md.pattern(full)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ffa0bd48-7c63-9654-1cb0-43b188311ef1"
      },
      "outputs": [],
      "source": [
        "full$deck <- full$Deck \n",
        "full$deck[full$Pclass == 1] <- \"A\"\n",
        "full$deck[full$Pclass == 1] <- \"A\"\n",
        "full$deck[full$Pclass == 1] <- \"A\"\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "01ce9b38-4421-6cdf-e1cc-60ee758df1cb"
      },
      "outputs": [],
      "source": [
        "# Split the data back into a train set and a test set\n",
        "train <- full[1:891,]\n",
        "test <- full[892:1309,]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d1435b34-4148-9d6b-8e42-9bef3b0e842c"
      },
      "outputs": [],
      "source": [
        "# Set a random seed\n",
        "set.seed(754)\n",
        "\n",
        "# Build the model (note: not all possible variables are used)\n",
        "rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + \n",
        "                                            Fare + Embarked + Title + \n",
        "                                            FsizeD + Child + Mother,\n",
        "                                            data = train)\n",
        "\n",
        "print(rf_model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9e9a56cf-f2a9-7937-8250-69845d263d6a"
      },
      "outputs": [],
      "source": [
        "# Show model error\n",
        "plot(rf_model, ylim=c(0,0.36))\n",
        "legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "80013f2e-0014-fc9e-6826-94c1ef7d7fb9"
      },
      "outputs": [],
      "source": [
        "# Get importance\n",
        "importance    <- importance(rf_model)\n",
        "varImportance <- data.frame(Variables = row.names(importance), \n",
        "                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n",
        "\n",
        "# Create a rank variable based on importance\n",
        "rankImportance <- varImportance %>%\n",
        "  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n",
        "\n",
        "# Use ggplot2 to visualize the relative importance of variables\n",
        "ggplot(rankImportance, aes(x = reorder(Variables, Importance), \n",
        "    y = Importance, fill = Importance)) +\n",
        "  geom_bar(stat='identity') + \n",
        "  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n",
        "    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n",
        "  labs(x = 'Variables') +\n",
        "  coord_flip() + \n",
        "  theme_few()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5f46edd3-541a-6867-4269-18d87a05b788"
      },
      "outputs": [],
      "source": ""
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}