{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "919c8d89-da3e-ecf6-0531-8ada669959b0"
      },
      "source": [
        "Preliminary exploration that predicts survival on gender, age, and passenger class"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "7dc35c13-1689-664a-d4e6-6822efdc07aa"
      },
      "outputs": [],
      "source": [
        "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n",
        "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "library(ggplot2) # Data visualization\n",
        "library(readr) # CSV file I/O, e.g. the read_csv functionion\n",
        "library(data.table)\n",
        "# Input data files are available in the \"../input/\" directory.\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
        "\n",
        "system(\"ls ../input\")\n",
        "\n",
        "# Any results you write to the current directory are saved as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "48617a4d-dda4-6b40-dbe5-bf4e3ce8613b"
      },
      "outputs": [],
      "source": [
        "train<-data.table(read.csv(\"../input/train.csv\",stringsAsFactors=F))\n",
        "test<-data.table(read.csv(\"../input/test.csv\",stringsAsFactors=F))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "1be5d266-6c58-9763-fbdf-ef01c4f57969"
      },
      "outputs": [],
      "source": [
        "test<-test[,Survived:='none']\n",
        "setcolorder(test,c(1,12,2:11))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0a1e92d2-7964-606e-bd33-2af0f9e501eb"
      },
      "outputs": [],
      "source": [
        "train<-train[,Gender:=ifelse(Sex=='female',1,2)]\n",
        "median_ages<-matrix(rep(0,6),nrow=2,ncol=3)\n",
        "for(i in c(1,2)){\n",
        "   for(j in c(1,2,3))\n",
        "       median_ages[i,j]<-train[Gender==i & Pclass==j,median(Age,na.rm=T)] \n",
        "}\n",
        "for(i in c(1,2)){\n",
        "   for(j in c(1,2,3))\n",
        "       train[Gender==i & Pclass==j & is.na(Age),Age:=median_ages[i,j]] \n",
        "}\n",
        "    \n",
        "    \n",
        "test<-test[,Gender:=ifelse(Sex=='female',1,2)]\n",
        "median_ages<-matrix(rep(0,6),nrow=2,ncol=3)\n",
        "for(i in c(1,2)){\n",
        "   for(j in c(1,2,3))\n",
        "       median_ages[i,j]<-test[Gender==i & Pclass==j,median(Age,na.rm=T)] \n",
        "}\n",
        "for(i in c(1,2)){\n",
        "   for(j in c(1,2,3))\n",
        "       test[Gender==i & Pclass==j & is.na(Age),Age:=median_ages[i,j]] \n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "24c66d76-8cfe-ddbe-a8f7-344d611d0794"
      },
      "outputs": [],
      "source": [
        "data<-rbind(train,test)\n",
        "data<-data[,Title:=unlist(strsplit(trimws(unlist(strsplit(Name,',', fixed = T))[2]),\" \",fixed = T))[1],by=PassengerId]\n",
        "data<-data[Title=='the',Title:=\"Countess.\"]\n",
        "data<-data[,HighClass:=ifelse(Title %in% c(\"Mr.\",\"Mrs.\",\"Master.\",\"Mme.\",\"Mlle.\",\"Ms.\",\"Miss.\"),0,1)]\n",
        "train_data<-data[Survived!=\"none\"]\n",
        "train_data<-train_data[,Survived:=as.numeric(Survived)]\n",
        "test_data<-data[Survived=='none']\n",
        "test_data<-test_data[,Survived:=NULL]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "8289af75-bc56-cec3-08f9-78e684a23efb"
      },
      "outputs": [],
      "source": [
        "modelTwo<-glm(Survived~Age+Pclass+Gender+HighClass,train_data,family=binomial)\n",
        "predTwo<-data.table(Survived=predict(object = modelTwo,test_data))\n",
        "final<-cbind(test_data$PassengerId,predTwo)\n",
        "setnames(final,\"V1\",\"PassengerId\")\n",
        "final<-final[,Survived:=ifelse(Survived<=0,0,1)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "510e85d3-b3ad-5ffc-1f79-5e03a40c2cb2"
      },
      "outputs": [],
      "source": [
        "write.csv(final,\"submissionThree.csv\",row.names=F)"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}