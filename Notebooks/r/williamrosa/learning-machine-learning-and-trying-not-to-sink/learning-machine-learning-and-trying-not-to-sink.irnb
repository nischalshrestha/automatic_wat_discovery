{"metadata": {"kernelspec": {"display_name": "R", "name": "ir", "language": "R"}, "language_info": {"name": "R", "mimetype": "text/x-r-source", "file_extension": ".r", "pygments_lexer": "r", "codemirror_mode": "r", "version": "3.4.2"}}, "nbformat_minor": 1, "nbformat": 4, "cells": [{"metadata": {"collapsed": true, "_cell_guid": "7f896177-689e-4a82-89c7-6ad969b08a1c", "_kg_hide-input": true, "_uuid": "68368c0b65ed9b8201368c667fc54877976f0f38"}, "source": ["Hello Guys. I'm a newbie in machine learning, trying to be better then all you (haha). This is my first kernel, an I'm hopping that making it, you can learn something that you don't know, and let me know everything i did wrong and thatIi should do (please). Hope you enjoy it :)\n"], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "c7bf8837-12ad-487b-ba32-eda54063cee1", "_uuid": "f072ebff0d863c655bc33e342f94920c9fd8e9de"}, "outputs": [], "source": ["library(ggplot2)\n", "library(dplyr)\n", "library(mice)\n", "library (cowplot)\n", "\n", "train.data = read.csv(file=\"data/train.csv\",sep=\",\",stringsAsFactors = F)\n", "test.data = read.csv(file=\"data/test.csv\",sep=\",\",stringsAsFactors = F)\n", "\n", "full.data = bind_rows(train.data,test.data)\n", "train.index = nrow(train.data)"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "4ea871f3-d1ef-4a12-8e09-fac586dd6ade", "_uuid": "cf16e67535130e6c4e3abb0a7b1003b38bc68f0a"}, "source": ["At this point, we need to deal with Some missing Values. We are going to use Mice to predict. As the number of null values in Embarked is low, I decided to remove these rows."], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "e567026e-f838-4556-8f65-d2ddaff35347", "_uuid": "0ed75df484aaea585eea1b88c8d8d292304d8fb0"}, "outputs": [], "source": ["# Dealing with missing values in Age\n", "beforeHist = ggplot(full.data,aes(Age)) + \n", "    geom_histogram(binwidth = 8,color=\"blue\",fill=\"white\")\n", "\n", "micemod = (mice(full.data[,names(full.data) != \"Survived\"],method=\"rf\",printFlag = FALSE))\n", "out = (complete(micemod))\n", "\n", "afterHist = ggplot(out,aes(Age)) + \n", "    geom_histogram(binwidth = 8,color=\"blue\",fill=\"white\")\n", "\n", "#plot_grid(beforeHist,afterHist,ncol=2,nrow=1,labels=c(\"Before Inputting Values\",\"After Inputting Values\"))\n", "\n", "full.data = cbind(out,Survived = full.data[,'Survived'])\n", "\n", "ids = which(full.data$Embarked == \"\")\n", "full.data = full.data[-ids,]\n", "full.data = full.data[,-c(1)]\n", "train.index = train.index - sum(ids < train.index)"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "b2ff988d-71a0-4a09-9424-4e3b3fc785fc", "_uuid": "9ad81a0fbc7c1599ddaaad6eb7d3a1c3223e1ab0"}, "outputs": [], "source": ["#Age X Survived\n", "#ggplot(full.data[1:train.index,],aes(x=Age)) +\n", "      #geom_histogram(aes(fill=factor(Survived)),position=\"fill\",binwidth = 3)\n", "\n", "#Sex X Survived\n", "#ggplot(full.data[1:train.index,],aes(x=Sex)) +\n", "      #geom_bar(aes(fill=factor(Survived)),position='fill')+\n", "      #scale_y_continuous(labels=scales::percent)"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "6daefe63-ea9d-4b1e-9600-5df0f4dd74f4", "_uuid": "511ab9a4bb6f75ba7de2f187d69b41b703ce3fc8"}, "outputs": [], "source": ["Here, the variable Cabin is transformed into binary values, True or False."], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "3da6b477-32d4-4d52-80a0-4cc4eff8a3c0", "_uuid": "c1bf7ef60a65661cf5d4c1639609b074e5114b95"}, "outputs": [], "source": ["#Does buying a cabin helps you?\n", "full.data$Cabin = factor(ifelse(full.data$Cabin == \"\",\"F\",\"T\"))\n", "\n", "#ggplot(full.data[1:train.index,],aes(x=factor(Cabin))) +\n", "      #geom_bar( aes(fill=factor(Survived)),position='fill') +\n", "      #scale_y_continuous(labels=scales::percent)"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "6ff5fd76-d077-4cd2-8ff5-5f4af09defad", "_uuid": "83bc17df3e005a91394a98e02e855cdde6eaa86f"}, "source": [" At this point, we want to get something good about the family size"], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "70ec0117-86c0-4e64-bd90-1c84d4675e55", "_uuid": "c1f064cb8eebbbcfc8b3a6de1f49e7417698e34b"}, "outputs": [], "source": ["#I told you (*family*) size matters\n", "full.data$FamilySize = full.data$SibSp + full.data$Parch + 1\n", "\n", "#ggplot(full.data[1:train.index,],aes(x=FamilySize)) +\n", "      #geom_bar( aes(fill=factor(Survived)),position='fill') + \n", "      #scale_x_continuous(breaks = c(1:11))\n", "\n", "\n", "full.data$FamilySizeC[full.data$FamilySize == 1] = \"Single\"\n", "full.data$FamilySizeC[full.data$FamilySize >= 2 & full.data$FamilySize <= 4] = \"Small\"\n", "full.data$FamilySizeC[full.data$FamilySize >= 5 & full.data$FamilySize <= 7] = \"Medium\"\n", "full.data$FamilySizeC[full.data$FamilySize >= 8] = \"Large\"\n", "\n", "full.data$FamilySizeC = factor(full.data$FamilySizeC,levels=c(\"Single\",\"Small\",\"Medium\",\"Large\"))\n", "\n", "#ggplot(full.data[1:train.index,],aes(x=factor(FamilySizeC))) +\n", "      #geom_bar( aes(fill=factor(Survived)),position='fill')"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "fd4eb21f-e172-4733-b744-7ea0958bbd7a", "_uuid": "57169b7c911638c89ee2ccbad300b88f72bc616c"}, "source": ["Treatments (got the Idea from Risdal's Kernel: https://www.kaggle.com/mrisdal/exploring-survival-on-the-titanic)\n", "If you didn't read Risdal's Kernel yet, you should. It helped me a lot."], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "956359e2-de6b-47d3-aa56-fcc8f92d363b", "_uuid": "7fd31c48167113cec898544a1268764b95b1bfde"}, "outputs": [], "source": ["\n", "t = gsub(\".*[,]([^.]+)[.].*\",\"\\\\1\",full.data$Name)\n", "t = gsub(\" \",\"\",t)\n", "\n", "#table(t)\n", "\n", "t[t==\"Mlle\"] = \"Miss\"\n", "t[t==\"Ms\"] = \"Miss\"\n", "t[t==\"Mme\"] = \"Mrs\"\n", "\n", "others = c()\n", "for(i in 1:length(table(t))){\n", "  if(table(t)[[i]] <= 25)\n", "    others = cbind(others,names(table(t)[i]))\n", "}\n", "\n", "t[t %in% others] = \"Other\"\n", "#table(full.data$Sex,t)\n", "full.data$Treatment = t"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "5e9fc2c3-68ec-4397-abe2-ed6119e8bede", "_uuid": "422f91ae2494ddf1eab068608755442f93e4d250"}, "outputs": [], "source": ["#Insert survived as last, just because i want\n", "index = grep(\"Survived\",colnames(full.data))\n", "full.data = cbind(full.data[,-c(index)],Survived = full.data$Survived)"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "aff4420e-15a3-4eed-a2ea-f0a641d7c158", "_uuid": "6a44d4b52b63bda0a2a2f1552d752396b4f22f02"}, "outputs": [], "source": ["#Not using this variables. Some of them were substitude by others, and some of them does not present good classification power, so we are not using it.\n", "notUsed = c(\"Name\",\"SibSp\",\"Parch\",\"Ticket\",\"Fare\",\"FamilySize\")\n", "full.data = full.data[,-which(names(full.data) %in% notUsed)]"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "e38a1226-0892-41c1-8a99-3ace736a2639", "_uuid": "28819e1bddc5e885ae3ebac48047be919382aa98"}, "source": ["Transforming everything in numeric. We like numbers"], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "88905ca6-233d-456e-a06a-543f51a308e8", "_uuid": "4cd1f099b2e9c6fd4b9e7041581d2efdd7c690da"}, "outputs": [], "source": ["numericData = full.data\n", "\n", "numericData$Sex = as.numeric(as.factor(full.data$Sex))\n", "numericData$Cabin = as.numeric(as.factor(full.data$Cabin))\n", "numericData$Embarked = as.numeric(as.factor(full.data$Embarked))\n", "numericData$FamilySizeC = as.numeric(full.data$FamilySizeC)\n", "numericData$Treatment = as.numeric(as.factor(full.data$Treatment))"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "645d0835-4a8e-4a41-9808-3742a1c25b1d", "_uuid": "983a54247101831bcf18829f4c2e3541795521d9"}, "source": ["Now, we want to make some classification.\n", "The data is not ideal yet, but I'm moving on. I'm hopping to see some discussion about data transformation in the comments (help this newbie please)"], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "bc114acc-adcd-456d-98da-b3cbe64d4259", "_uuid": "506501181ff95ddf8487732dbdf15a3c1f83ab12"}, "source": ["The MLP and KNN codes were implemented by myself and can be check at https://github.com/WilliamNTN/MachineLearningAlgorithms\n", "\n", "I'm trying to code my own ML algorithms with the purpose to learn more about it. They are not optimized, so you need more time to use them. Insted, I tried to keep the code as didatic as possible, so I can see everything that is really happening under it."], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "1480a92d-05ff-449c-a05b-5d15f728d7b7", "_uuid": "90210d1e0ee499286d9cefaef620b57f4b7443df"}, "outputs": [], "source": ["source(\"mlp.r\") # My onw Mlp Implementation\n", "source(\"knn.r\") # My own Knn implementation\n", "require(e1071) #yeah my Svm is not read yet :(\n", "source(\"functions.r\") #normalize, #voteSystem\n", "\n", "dataCross = numericData[1:train.index,]\n", "dataCross = dataCross[sample(nrow(dataCross)),] #Shuffle\n", "\n", "dataCross = apply(dataCross,2,function(col){\n", "  normalize(col,0,1)\n", "})\n", "\n", "\n", "folds = cut(seq(1,nrow(dataCross)),breaks=10,labels=F) #get CV Folds (or almost it)\n", "\n", "Serror = 0\n", "#Perform the Cross Validation\n", "for(i in 1:8){\n", "   \n", "  #Prepare dataSets\n", "  testIndex = which(folds==i) #get rows which are test in this iteration\n", "  \n", "  testDataX = as.matrix(dataCross[testIndex,1:(ncol(dataCross)-1)])\n", "  testDataY = dataCross[testIndex,ncol(dataCross)]\n", "  testData = as.matrix(dataCross[testIndex,])\n", "\n", "  trainDataX = as.matrix(dataCross[-testIndex,1:(ncol(dataCross)-1)])\n", "  trainDataY = dataCross[-testIndex,ncol(dataCross)]\n", "  trainData = as.matrix(dataCross[-testIndex,])\n", " \n", "\n", "  #Knn Classification\n", "  rKnn = knn.classify(trainData,testDataX,k = 7)\n", "  \n", "  #MLP Classification\n", "  model = mlp.architecture(ncol(trainDataX),10,1)\n", "  modelT = mlp.backpropagation(trainData,model = model,learning_rate = 0.1,threshold = 1e-2,max_iters = 1000,verbose=F)\n", "  rMlp = mlp.classify(testDataX,modelT)\n", "  rMlp = round(rMlp)\n", "  \n", "  #SVM Classification\n", "  modelSvm = svm(trainDataX,trainDataY,kernel = \"polynomial\",degree=2,gamma=2,coef0 = 1)\n", "  rSvm = predict(modelSvm,testDataX)\n", "  rSvm = round(rSvm)\n", "  \n", "  votes = cbind(rKnn,rMlp,rSvm)\n", "  finalPrediction = voteSystem(votes)\n", "  \n", "  error = sum((finalPrediction - testDataY)^2)/nrow(testDataX)\n", "  cat(\"Error = \",error,\"\\n\")\n", "  Serror = Serror + error\n", "}\n", "Serror = Serror/10"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "0d4fa865-ce4d-44b4-b7a6-d4961478d6ba", "_uuid": "ee679dbeebbd6045851b48943c6daea6b152f167"}, "source": ["Classify the data to submit. The classification is not ideal, actually, I'm far from it. I'll keep studying and trying."], "cell_type": "markdown"}, {"metadata": {"_cell_guid": "2b133bbb-13ae-4c2f-8fa0-87914fd65f9b", "_uuid": "9da676b9d6f364f5c0ced36de544b7e8bc7aebca"}, "outputs": [], "source": ["trainData = dataCross #This is already shuffled and normalized, and this helps in the training \n", "trainDataX = trainData[,1:(ncol(trainData)-1)]\n", "trainDataY = trainData[,ncol(trainData)]\n", "\n", "testData = numericData[(train.index+1):nrow(numericData),1:(ncol(numericData)-1)]\n", "\n", "testData = apply(testData,2,function(col){\n", "  normalize(col,0,1)\n", "})\n", "\n", "\n", "rKnn = knn.classify(trainData,testData,k=7)\n", "\n", "modelMlp = mlp.architecture(ncol(trainDataX),10,1)\n", "modelMlp = mlp.backpropagation(trainData,model = modelMlp,learning_rate = 0.1,threshold = 1e-2,max_iters = 1000,verbose=F)\n", "rMlp = mlp.classify(testData,modelMlp)\n", "rMlp = round(rMlp)\n", "\n", "modelSvm = svm(trainDataX,trainDataY,kernel = \"polynomial\",degree=2,gamma=2,coef0 = 1)\n", "rSvm = predict(modelSvm,testData)\n", "rSvm = round(rSvm)\n", "\n", "votes = cbind(rKnn,rMlp,rSvm)\n", "finalPrediction = voteSystem(votes)\n", "\n", "ids = seq(1:nrow(testData)) + 891\n", "output = cbind(PassengerID=ids,Survived=finalPrediction)\n", "\n", "write.csv(output,file=\"finalPrediction.csv\",row.names = F)"], "execution_count": null, "cell_type": "code"}, {"metadata": {"_cell_guid": "2e3a0744-24ba-48ad-97f5-2847921434fb", "_uuid": "63ff542e12e90e4573f2663e01b39333291f1dfb"}, "source": ["That's it guys. As I said, I'm just starting in ML, and I hope to learn a lot with Kaggle community.\n", "\n", "Have a good one!"], "cell_type": "markdown"}]}