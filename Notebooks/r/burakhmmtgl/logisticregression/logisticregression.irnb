{"cells":[
 {
  "cell_type": "code",
  "execution_count": null,
  "metadata": {
   "collapsed": false
  },
  "outputs": [],
  "source": "# Many standard libraries are already installed\nlibrary(dplyr); library(stringr)\n\n# The train and test data is stored in the ../input directory\ntrain <- read.csv(\"../input/train.csv\")\ntest  <- read.csv(\"../input/test.csv\")\n\n# Replace missing embark locations with the maximum \nif (nrow(train[train$Embarked == \"\", ]) > 0){\n  df.emb <- as.data.frame(table(train$Embarked))\n  max.emb <- as.character(df.emb[which.max(df.emb[,2]),1])\n  train[train$Embarked == \"\", ]$Embarked <- max.emb\n}\n  \n# Get missing age information from Titles\n# training data set\ntitles <- character(length = nrow(train))\nfor (i in 1:nrow(train)){\n  temp <- strsplit(as.character(train$Name[i]), split=\"\\\\.\")[[1]][1]\n  titles[i] <- str_trim(strsplit(temp, split = \",\")[[1]][2], \"left\")\n}\n# New data frame with a column = title\ntr2 <- mutate(train, Title = as.factor(titles))\n\n# Find the median of the ages of passangers by Title\n# Replce NA's with median age\nuniq.titles <- unique(titles)\nmed.ages <- data.frame(Title = uniq.titles, Med.Age = 0)\nfor (ind in 1:length(uniq.titles)){\n  med.ages[ind,2] <- median(tr2[tr2$Title == uniq.titles[ind], ]$Age, na.rm = TRUE)\n  # Check for na's and replace with medians\n  nr.na <- nrow(tr2[is.na(tr2$Age) & tr2$Title == uniq.titles[ind], ])\n  if (nr.na > 0){\n    tr2[is.na(tr2$Age) & tr2$Title == uniq.titles[ind], ]$Age <- med.ages[ind,2]\n  }\n}\n\n# Replace all the missing fares (Fare == 0) with the median of its class\n# First, compute the median Fares for each Pclass\nm3 <-  median(tr2[tr2$Pclass == 3, ]$Fare)\nm2 <-  median(tr2[tr2$Pclass == 2, ]$Fare)\nm1 <-  median(tr2[tr2$Pclass == 1, ]$Fare)\n\n# Save the Passanger ID's of passangers with missing Fares for each Pclass\ncl3 <- tr2[tr2$Fare == 0 & tr2$Pclass == 3,]$PassengerId\ncl2 <- tr2[tr2$Fare == 0 & tr2$Pclass == 2,]$PassengerId\ncl1 <- tr2[tr2$Fare == 0 & tr2$Pclass == 1,]$PassengerId\n\n# Put median Fares for missing ones\nfor (i in seq(1,length(cl3)) ) { tr2[tr2$PassengerId == cl3[i], ]$Fare <- m3 }\nfor (i in seq(1,length(cl2)) ) { tr2[tr2$PassengerId == cl2[i], ]$Fare <- m2 }\nfor (i in seq(1,length(cl1)) ) { tr2[tr2$PassengerId == cl1[i], ]$Fare <- m1 }\n\n# In test data, passangers in rows 267 and 373 has 0 Fare and they are in Pclass 1\n# Row 153 has NA in Pclass 3\ntest[267, 9] <- m1; test[373, 9] <- m1; test[153, 9] <- m3\n\n# Let's try to get all the titles in test data\ntitles <- character(length = nrow(test))\nfor (i in 1:nrow(test)){\n  temp <- strsplit(as.character(test$Name[i]), split=\"\\\\.\")[[1]][1]\n  titles[i] <- str_trim(strsplit(temp, split = \",\")[[1]][2], \"left\")\n}\n# New data frame with a column = title\nts2 <- mutate(test, Title = as.factor(titles))\n\n# Replce NA's with median age (this comes from train)\nuniq.titles <- unique(titles)\nfor (ind in 1:length(uniq.titles)){\n  # Check for na's and replace with medians\n  nr.na <- nrow(ts2[is.na(ts2$Age) & ts2$Title == uniq.titles[ind], ])\n  if (nr.na > 0){\n    med.age <- med.ages[med.ages$Title == uniq.titles[ind], ]$Med.Age\n    ts2[is.na(ts2$Age) & ts2$Title == uniq.titles[ind], ]$Age <- med.age\n  }\n}\n\n# Number of family members (SibSp & Parch)\ntr2 <- mutate(tr2, fam.size = Parch + SibSp)\nts2 <- mutate(ts2, fam.size = Parch + SibSp)\n\n# There is still \"\" (NAs) in Cabin. Create a factor variable, 1: passanger has cabin\n# info, 0: passanger has no cabin info\ntr2 <- mutate(tr2, binaryCabin = 1)\ntr2[tr2$Cabin == \"\", ]$binaryCabin = 0\ntr2 <- mutate(tr2, binaryCabin = factor(binaryCabin))\n\n# Same for test data\nts2 <- mutate(ts2, binaryCabin = 1)\nts2[ts2$Cabin == \"\", ]$binaryCabin = 0\nts2 <- mutate(ts2, binaryCabin = factor(binaryCabin))\n\n# Models for Logistic Regression (training data)\nmyfit0 <- glm(Survived ~ Sex, data = tr2, family = \"binomial\")\nmyfit1 <- glm(Survived ~ Sex * Age, data = tr2, family= \"binomial\")\nmyfit2 <- glm(Survived ~ Sex*Age + Fare, data = tr2, family = \"binomial\")\nmyfit3 <- glm(Survived ~ Sex*Age + Fare + binaryCabin, data = tr2, family = \"binomial\")\nmyfit4 <- glm(Survived ~ Sex*Age + Fare + binaryCabin + fam.size, data = tr2, \n              family = \"binomial\")\n\n# Compare models\nanova(myfit0,myfit1,myfit2,myfit3,myfit4,test=\"Chisq\")\n# Choose model myfit4 from the Chi2 test\n\n# Check correct prediction rate\ntr.predict <- predict(myfit4, type = \"response\")\ntt <- 1 * (tr.predict >= 0.5) # if P > 0.5, assume that Survived = 1\n\n# Number of correct predictions in the training data / total number of entries\n# Rate of correct predictions\nr <- sum((tt - tr2$Survived == 0)) / nrow(tr2);\ncat(\"Prediction rate= \", r)\n\n# Now, predictions for test data\nts.predict <- predict(myfit4, newdata = ts2, type = \"response\")\n\n# Enter predictions on the test data\nts2 <- mutate(ts2, Survived = 1 * (ts.predict >= 0.5))\n\n# Select Passanger ID and Survived to write into final table\nts.fin <- select(ts2, c(1,15))\nwrite.csv(ts.fin, file = \"logreg2.csv\", row.names = FALSE, quote = FALSE)\n\n# Note, this mode gives similar predictions to \"My First Random Forest\""
 }
],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"}}, "nbformat": 4, "nbformat_minor": 0}