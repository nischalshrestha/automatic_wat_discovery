{"nbformat": 4, "cells": [{"source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.\n\ntest_df <- read.delim(\"../input/test.csv\", sep = \",\")\ntrain_df <- read.delim(\"../input/train.csv\", sep = \",\")\n\nlibrary(caret)\nlibrary(dplyr)\n\n# Preprocessing our data:\n\ntrain_df %>% mutate(Survived = as.factor(Survived), Pclass = as.factor(Pclass)) -> train_df\ntrain_df$Age[vapply(train_df$Age, is.na, logical(1))] <- mean(train_df$Age, na.rm = TRUE)\n\n# Our data:\ntrain_df$Embarked[train_df$Embarked == \"\"] <- \"C\"\ntrain_df$Embarked <- factor(train_df$Embarked)\nsummary(train_df)\nglimpse(train_df)\n\n# Create test and train datasets from our original train data:\n\ninTrain <- createDataPartition(y = train_df$Survived,\n                              p = .85,\n                              list = FALSE)\nmy_train <- train_df[inTrain, ]\nmy_test <- train_df[-inTrain, ]\n\n# Modeling params:\nfitControl <- trainControl(method = \"cv\",\n                            number = 5,\n                            allowParallel = F)\n\n# Random Forest:\ntrain(Survived ~ Sex + Pclass + Sex:Pclass + Age + Age:Sex + Age:Pclass + Pclass:Fare + Embarked + SibSp + Parch, method = \"rf\", \n      data = my_train, \n      trControl = fitControl) -> model_rf\n\n# Predict by RF:\nrf_predicted <- predict(model_rf, newdata = my_test)\nconfusionMatrix(data = rf_predicted, my_test$Survived)\n\n# Preprocessing test data\ntest_df %>% mutate(Pclass = as.factor(Pclass)) -> test_df\ntest_df$Age[vapply(test_df$Age, is.na, logical(1))] <- mean(test_df$Age, na.rm = TRUE)\ntest_df$Embarked[test_df$Embarked == \"\"] <- \"C\"\ntest_df$Embarked <- factor(test_df$Embarked)\n\ntest_df$Fare[vapply(test_df$Fare, is.na, logical(1))] <- mean(test_df$Fare, na.rm = TRUE)\n\n# Predict general test data\ntest_df$Survived <- predict(model_rf, newdata = test_df)\n\noutput <- select(test_df, PassengerId, Survived)\nwrite_delim(output, delim = \",\", path = \"submission.csv\")", "outputs": [], "metadata": {"_kg_hide-output": false, "trusted": true, "_cell_guid": "b21b5e13-b564-4ffc-b9f0-89db6afc4e30", "_uuid": "9a530df8accee9bca0f709026e26f3cbd06adcb7", "_kg_hide-input": false}, "cell_type": "code", "execution_count": null}], "metadata": {"language_info": {"name": "R", "mimetype": "text/x-r-source", "pygments_lexer": "r", "codemirror_mode": "r", "file_extension": ".r", "version": "3.4.1"}, "kernelspec": {"language": "R", "display_name": "R", "name": "ir"}}, "nbformat_minor": 1}