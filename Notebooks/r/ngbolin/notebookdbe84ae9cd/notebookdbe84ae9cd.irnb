{"nbformat_minor": 0, "nbformat": 4, "metadata": {"_is_fork": false, "_change_revision": 0, "kernelspec": {"language": "R", "display_name": "R", "name": "ir"}, "language_info": {"name": "R", "version": "3.4.0", "pygments_lexer": "r", "file_extension": ".r", "codemirror_mode": "r", "mimetype": "text/x-r-source"}}, "cells": [{"source": "# **Ng Bo Lin - Titanic: Machine Learning from Disaster**", "cell_type": "markdown", "metadata": {"_cell_guid": "f8b17828-14af-c214-f873-92cae9414c5c", "_uuid": "7911d4c8cc8434fc5f8ff13d49bb4cb80fc2548e"}}, {"source": "Setting working directory and importing key libraries", "cell_type": "markdown", "metadata": {"_cell_guid": "7de470ab-1c95-850a-a20b-2338effc19a6", "_uuid": "82e4c8fc266fb04049cda831814d15266dbded25"}}, {"source": "library(dplyr); library(ggplot2); library(lattice); library(reshape2); \nlibrary(caret);  library(randomForest); library(gbm)\nsetwd(\"../input\")", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "3a09bde7-0538-9f43-5491-9c025f41b94f", "_uuid": "7a6bee59d91ff3ae8a852950a8d75f7f99793707"}, "outputs": []}, {"source": "Reading training and testing data, and combining them to clean the data", "cell_type": "markdown", "metadata": {"_cell_guid": "a9a5ea30-91f0-2dd2-1e1f-787e955c9388", "_uuid": "2880a3a7b910f7deeda3f56219fe15e8e553dcf3"}}, {"source": "train <- read.csv(\"train.csv\", stringsAsFactors = F, na.strings = \"\")\ntest <- read.csv(\"test.csv\", stringsAsFactors = F)\nfull <- bind_rows(train, test)\nstr(full)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "6dc1fcb2-a492-616a-0197-4adc87dd0e05", "_uuid": "bb727e39e6a365bdfc40e97fbb5c52fbcc005e45"}, "outputs": []}, {"source": "# Data Cleaning and Imputation", "cell_type": "markdown", "metadata": {"_cell_guid": "4ec1b563-00da-baca-d38e-709f8827345d", "_uuid": "e2adfc527904869931fea971e1b4c0ab7689f713"}}, {"source": "Data Cleaning", "cell_type": "markdown", "metadata": {"_cell_guid": "20d485a1-f2d0-5113-ba7d-8d65aa381da1", "_uuid": "1fff90cde1a8dcff1aebde004b2a8f8b587fb0e9"}}, {"source": "# Obtaining title of passengers from name\nfull$Title <- gsub('(.*,) |(\\\\..*)', '', full$Name)\nfull$FirstName <- gsub('(\\\\,.*)', '', full$Name)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "e2e3b1db-ce13-a86e-a2fd-a757c293f857", "_uuid": "28684f526439b1d2c4796cf47027d609d16a6843"}, "outputs": []}, {"source": "# Converting cabin to factor (Yes/No)\nisempty <- function(x){if (is.na(x)){ return(0) } else { return(1) }}\nfull$Cabin <- sapply(full$Cabin, isempty)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "e14a832c-178c-1852-25d6-aa9e4e780d70", "_uuid": "e078889194b59e4ca796b470760661a594259ec9"}, "outputs": []}, {"source": "# Converting Ticket to factor variables (Numeric Ticket, A. 2., A./5., A/4 etc.)\nconvert_ticket <- function(x){ if (is.na(as.numeric(x)) == FALSE){ return('Normal') } else { return(gsub(' ([0-9]*)', '', x)) }}\nfull$Ticket <- sapply(full$Ticket, convert_ticket)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "a831ed03-2c40-3409-4828-1f2cf2e6688e", "_uuid": "c178504f31de799a121a1214e4f1dd27d36ff274"}, "outputs": []}, {"source": "# Converting columns to factors\nfactor_vars <- c(\"PassengerId\", \"Survived\", \"Pclass\", \"Title\", \"Sex\", \"Cabin\", \"Ticket\", \"Embarked\", \"FirstName\") \nfactor_df <- data.frame(lapply(full[factor_vars], function(y) as.factor(y)))", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "2e85bc2b-37c7-2d6b-ccd4-22790af21f40", "_uuid": "1d8bf43ff7cb3fdb5b4f0557fc7e59bcae4a2c24"}, "outputs": []}, {"source": "# Adding numeric columns (Fare, Age, Parch and SibSp) back\nfactor_df$Age <- full$Age; factor_df$Fare <- full$Fare; factor_df$Parch <- full$Parch; factor_df$SibSp <- full$SibSp", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "860fa555-70e2-6fe0-a950-bb1c3a601a8a", "_uuid": "d0c92508b273b4152b8c329e7ea6cd17b67e83e5"}, "outputs": []}, {"source": "Data Imputation", "cell_type": "markdown", "metadata": {"_cell_guid": "39fed6c7-a4a4-7182-e66e-791f3572a03d", "_uuid": "a645b2ea217a2ada2c9536f1443da556b394bda5"}}, {"source": "# Tracking the number of rows which require computation by column name\nsapply(factor_df, function(x) sum(is.na(x)))", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "e73f5c0d-c8b5-f514-a29a-450994c9b8c8", "_uuid": "3fce839d463ed5ef1c745c317c852123678e7c75"}, "outputs": []}, {"source": "# Imputing missing Age\nmelt_df <- melt(factor_df, id = c('Title', 'Sex'), measure.vars = c('Age'))\nage_df <- dcast(melt_df, Title ~ Sex, mean, na.rm = T)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "bb70e575-fea2-fd24-072f-82cd688e09dc", "_uuid": "0787d217bbd58b2f1e93020153a22de5f6891db8"}, "outputs": []}, {"source": "# Looping through the Age column and imputing missing Age based on Title and Gender\nfor (i in 1:dim(factor_df)[1]){\n        if (is.na(factor_df$Age[i])){\n                factor_df$Age[i] <- if (factor_df$Sex[i] == 'male') {\n                        age_df[grepl(factor_df$Title[i], age_df$Title), 3] \n                } else {\n                        age_df[grepl(factor_df$Title[i], age_df$Title), 2]         \n                }\n        }\n}", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "dfa3e51c-b273-4d28-7308-89fa6febf826", "_uuid": "b38b31712c049a5f9055e61ffeeabfc242a9f383"}, "outputs": []}, {"source": "# Imputing missing Fare\nmelt_fare_df <- melt(factor_df, id = c('Ticket'), measure.vars = c('Fare'))[, c(1, 3)]\nfare_df <- data.frame(fare = tapply(melt_fare_df$value, melt_fare_df$Ticket, mean, na.rm = T))\nfor (i in 1:dim(factor_df)[1]){ if (is.na(factor_df$Fare[i])) { factor_df$Fare[i] <- as.numeric(fare_df[grep(factor_df$Ticket[i], row.names(fare_df)), 1]) }}", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "a573f466-5e6e-d6c8-348c-5ce5a0a6dbfb", "_uuid": "0e42a12a47345928faf401e10a0f79b573b5f610"}, "outputs": []}, {"source": "Imputing Place of Embarkment based on Fare and Passenger ClasS", "cell_type": "markdown", "metadata": {"_cell_guid": "c2c5e937-416e-4a9d-e982-fd6b175a68ff", "_uuid": "95b691ef3c16fd4d3f7c4464e88dd42bb83e6100"}}, {"source": "# Finding the relationship between Fare and Embarked controlled for Passenger Class\np <- xyplot(Fare ~ Embarked | Pclass, data = factor_df, \n            xlab = \"Area of Embarkment\", ylab = \"Fare paid\"); p", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "c8e47c11-cc80-ed4d-f1c0-08c27ec9fb98", "_uuid": "5158e70e6d0f73c6b4c13490d685c2141e4f794c"}, "outputs": []}, {"source": "# Creating a new data frame to sort Fare by Place of Embarkment and Passenger Class \nembark_fare_df <- melt(factor_df, id = c('Embarked', 'Pclass'), measure.vars = c('Fare'))\nembark_fare_df <- embark_fare_df[complete.cases(embark_fare_df), ]\nfare_df2 <- dcast(embark_fare_df, Embarked + Pclass ~ variable, mean, na.rm = T)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "542fb477-dfa6-f483-8991-4dfc7f2fabb2", "_uuid": "d722d930729150866150a8d59e65ab79f291e304"}, "outputs": []}, {"source": "# Define function to return place of Embarkment based on Fare and Passenger Class\nplace_of_embarkment <- function(x, y){\n        diff <- 100\n        fare_df2 <- fare_df2[fare_df2$Pclass == y, ]\n        for (i in 1:dim(fare_df2)[1]){\n                diff <- min(diff, abs(x - fare_df2$Fare[i]))\n        }\n        for (i in 1:dim(fare_df2)[1]){\n                if (abs(x - fare_df2$Fare[i]) == diff){\n                        return(fare_df2$Embarked[i])\n                }\n        }\n}", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "a18e03cd-97ed-c1af-f7de-111777d6bdcc", "_uuid": "dcb9d59ee48527c48544cf621d97f235746ffb8e"}, "outputs": []}, {"source": "Imputing Place of Embarkment using a kNN algorithm (with k = 1)", "cell_type": "markdown", "metadata": {"_cell_guid": "2c0c4dcf-a7a1-0609-1bc5-45c7fe5a8c96", "_uuid": "af06f487d4053fa893397b0af6aa62c360401d30"}}, {"source": "for (i in 1:dim(factor_df)[1]){\n        if (is.na(factor_df$Embarked[i])){\n                factor_df$Embarked[i] <- place_of_embarkment(factor_df$Fare[i], factor_df$Pclass[i])\n        }\n}", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "5ab468c1-eeac-ac9a-6907-f2b97b647bf4", "_uuid": "039dfb9b5a2ced80c0d00baa2054837e45eb5b66"}, "outputs": []}, {"source": "Including a new variable to determine if the Title of the individual is unique", "cell_type": "markdown", "metadata": {"_cell_guid": "468d7be5-0a72-72b6-bf05-6b5a999f519a", "_uuid": "4e53e201518c3f8b4408f0179a35d513ed04dd89"}}, {"source": ["# Reducing the number of unique Titles\n", "normal <- c(\"Miss\", \"Mr\", \"Mrs\", \"Master\")\n", "is_normal <- function(x, y = normal){\n", "        if(x %in% y) {return(1)} else {return(0)}\n", "}\n", "\n", "factor_df$Title_ <- sapply(factor_df$Title, is_normal)\n", "factor_df$Title_ <- as.factor(factor_df$Title_)"], "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "ace7cd19-9749-02ad-ab4f-8345520ddd16", "_uuid": "bfb0c3cf4b9b1d12cab2a134809b0b76ca5234cd"}, "outputs": []}, {"source": "Subsetting data to variables of interest, and partitioning them into Training, CV and Test sets", "cell_type": "markdown", "metadata": {"_cell_guid": "cfe57790-c9ac-0d96-2769-3da8f759c792", "_uuid": "f1479ee73e03575c9615ffb12ec6af3a73ca79f5"}}, {"source": ["# Generate new data frame with variable of interests\n", "df_reg <- factor_df[, c(2:3, 5:6, 8, 10:14)]\n", "df_test <- subset(df_reg, is.na(Survived))\n", "df_train_cv <- subset(df_reg, !(is.na(Survived)))"], "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "17f2b3d4-6a50-f6c4-5d42-560237a001e5", "_uuid": "da9e6fe46e54e1158c0409160cc1e8576cd83e58"}, "outputs": []}, {"source": ["# We set 75% of our data in the training set, 25% of our data in the cross-validation set\n", "set.seed(12345)\n", "inTrain <- createDataPartition(y = df_train_cv$Survived, p = 0.75, list = F)\n", "training <- df_train_cv[inTrain,]; testing <- df_train_cv[-inTrain,]"], "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "bd129525-2563-bdd8-aa03-7aaf1e22a3fd", "_uuid": "0cae1b0a2fd9ac921e46a260426356d605534998"}, "outputs": []}, {"source": "Conducing a pairs plot to identify variables which may not be useful", "cell_type": "markdown", "metadata": {"_cell_guid": "4f50cfe9-373d-49aa-f8d0-3e03302a03d1", "_uuid": "edbe34c34648343bb391351c118f73eda4f48a99"}}, {"source": ["# Quick and dirty implementation of pairsplot\n", "pairs(Survived ~ Pclass + Age + Fare + Parch + SibSp + Title_, data = training, diag.panel = NULL, \n", "      upper.panel = panel.smooth, lower.panel = NULL)"], "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "2cf75521-28b2-4efb-8e85-1783d1420568", "_uuid": "273d19f8e8ca6a08f8b43e92da6a681d15d1b612"}, "outputs": []}, {"source": "# Removing Title_ variable as it is weakly correlated with the Survived variable\ntraining <- training[, 1:9]\ntesting <- testing[, 1:9]", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "664c3c63-dea0-ce2d-875c-bddfc7d59b2c", "_uuid": "c9030b79aab4b00e8ca70b788d8db1a8da080e62"}, "outputs": []}, {"source": "Implementing PCA for numeric variables, for parsimony purposes", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "dc616c18-9e1b-d375-86d3-e3cef5c00c48", "_uuid": "4b4a3c9b400c8d4cda31cf965e2f428c6d95f975"}, "outputs": []}, {"source": "sum(prcomp(training[, 6:9])$sdev[c(1,2)])/sum(prcomp(training[, 6:9])$sdev) # First 2 components account for 97.4% for the 4 variables\npreProc <- preProcess(training[, 6:9], method = 'pca', pcaComp = 2)\ntrainPC <- predict(preProc, training[, 6:9])\nnew_training <- cbind(training[1:5], trainPC)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "b6b8e482-e14b-5508-f065-d682828a61dc", "_uuid": "a2c6bb839943c3269391c4c5b0cf2332ef35ae87"}, "outputs": []}, {"source": "#**Model Fitting**", "cell_type": "markdown", "metadata": {"_cell_guid": "efc1c377-bec8-3758-437a-9a6893ccf4bb", "_uuid": "2ea7b2bcca9cc9a67273aa7c411d51675f26d723"}}, {"source": "Fitting a Random Forest Model (with 1000 trees), a GLM model, and a Boosting Model (with trees)", "cell_type": "markdown", "metadata": {"_cell_guid": "82f8a280-5da7-e67b-d1c7-0eda4bfe6ea5", "_uuid": "18530284bedb99d68c49e595de0e0c110e8a8003"}}, {"source": "modFitRF <- train(Survived ~ ., data = new_training, method = 'rf', ntree = 1000, prox = TRUE)\nmodFitGLM <- glm(Survived ~.*., data = new_training, family = 'binomial')\nmodFitTree_Boost <- train(Survived ~., data = new_training, method = 'gbm', verbose = F)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "1a56a57a-77a7-a589-a62f-3ccf6ed046b4", "_uuid": "a39162a176a5d40ed03cf132cf4ce023f353c2b4"}, "outputs": []}, {"source": "# Out of sample forecast accuracy for RF\ntestingPC <- predict(preProc, testing[, 6:9])\nnew_testing <- cbind(testing[1:5], testingPC)\ntable(testing$Survived, predict(modFitRF, new_testing)) # RF model outputs ~83% accuracy", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "ff1fe505-9e77-e298-98b0-4374f8cf6ba3", "_uuid": "1854200e045244520bdb2b150477959e33d40907"}, "outputs": []}, {"source": "# Out of sample forecast accuracy for GLM\nglm_pred <- predict(modFitGLM, new_testing)\nprobSurvival <- function(x){ if (x > 0) { return(1) } else { return(0) } }\nGLM <- pred <- sapply(glm_pred, probSurvival)\ntable(as.factor(testing$Survived), pred) # GLM outputs around ~82% accuracy", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "a8b2d094-038b-7c1f-bc56-1ea17da41ee8", "_uuid": "274a063385102e140c011e24146bbe0a1f0b6a03"}, "outputs": []}, {"source": "# Out of sample forecast accuracy for Boosting\ntable(testing$Survived, predict(modFitTree_Boost, new_testing)) # Tree Boosting outputs around 81% accuracy", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "12710f79-92a3-d2b3-3536-8037ab4d6e46", "_uuid": "a7a80a17a0dd59465cd714bf28a9b0c5f2ecfa13"}, "outputs": []}, {"source": ["# Using RF to forecast for GLM (as it has a higher out of sample forecast accuracy)\n", "testPC <- predict(preProc, df_test[, 6:9])\n", "new_test <- cbind(df_test[1:5], testPC)\n", "new_test$Survived <- predict(modFitRF, new_test)"], "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "73dced6c-a1bf-eae7-2109-6c76dd3fc7dc", "_uuid": "d186e117eca89d5855c24903f83d373cdaccd22c"}, "outputs": []}, {"source": "# Exporting dataset\ndf_test_output <- data.frame(PassengerId = rownames(df_test), Survived = new_test$Survived)\nwrite.csv(df_test_output, file = \"test_solution_rf.csv\", row.names = F)", "execution_count": null, "cell_type": "code", "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "35fa92ac-a3ab-f51b-49c0-ed9b1d5f88cc", "_uuid": "bbb6860dd148d89519034b59983051cbb56c1c69"}, "outputs": []}]}