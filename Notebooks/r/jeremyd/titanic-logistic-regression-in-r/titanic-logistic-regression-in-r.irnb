{"cells": [{"execution_count": null, "cell_type": "markdown", "outputs": [], "source": "", "metadata": {"_cell_guid": "b25513a7-2e9a-4d09-920e-42c032e34389", "_execution_state": "idle", "_uuid": "40ba0e59a69ea1a85b8bb835673ed2872868ce65", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 1: Load + Clean Data\nTrain = read.csv(\"../input/train.csv\")\nTest = read.csv(\"../input/test.csv\")\n\nstr(Train)\nsummary(Train)\n\n# fill in missing values for Age\nTrain$Age[is.na(Train$Age)] = mean(Train$Age, na.rm = TRUE)\nTest$Age[is.na(Test$Age)] = mean(Test$Age, na.rm = TRUE)", "metadata": {"_cell_guid": "ac0bbabd-3df5-4e2f-83c1-1c78d0b99900", "trusted": false, "_execution_state": "idle", "_uuid": "353b9c87497d1e87e33411d3be47e7b4aefe8889", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 2: Create DF of independent/dependent variables\nnonvars = c(\"PassengerId\",\"Name\",\"Ticket\",\"Embarked\",\"Cabin\")\nTrain = Train[,!(names(Train) %in% nonvars)]\nstr(Train)", "metadata": {"_cell_guid": "f3a7eeb5-7b4c-42f2-ab52-8553d0746f77", "trusted": false, "_execution_state": "idle", "_uuid": "6006b754d6c75e022060a13e23353d69f4885a62", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 3: Check for MultiCollinearity\nTrain$Sex = as.numeric(Train$Sex)\nTest$Sex = as.numeric(Test$Sex)\ncor(Train)", "metadata": {"_cell_guid": "81d79184-e48f-4695-bc16-94adfc335786", "trusted": false, "_execution_state": "idle", "_uuid": "0fad9d1d7328d559f336ffa4a073907947949d51", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 4: Build a Logistic Regression Model\nTitanicLog1 = glm(Survived~., data = Train, family = binomial)\nsummary(TitanicLog1)", "metadata": {"_cell_guid": "5f39c4dc-6d11-4d7e-82ff-9d38e6b66c70", "trusted": false, "_execution_state": "idle", "_uuid": "c253d48148e34754c5e9deea877da9ab296096d1", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 5: Revise Model\nTitanicLog2 = glm(Survived ~ . - Parch, data = Train, family = binomial)\nsummary(TitanicLog2)\n\nTitanicLog3 = glm(Survived ~ . - Parch - Fare, data = Train, family = binomial)\nsummary(TitanicLog3)", "metadata": {"_cell_guid": "db00fff4-de90-4850-a97c-045915475269", "trusted": false, "_execution_state": "idle", "_uuid": "0763517e88242733f54e91fff7cff068c9bfe0d5", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 6: Test Accuracy of Model on Training Data\n\n# always predict 0 (didn't survive)\nbaseAcur = 549 / (549 + 342)\n\npredictTrain = predict(TitanicLog3, type = \"response\")\ntable(Train$Survived, predictTrain >= 0.5)\n\naccuracy = (244 + 458) / nrow(Train)\nsensitivity = 244 / (244 + 98)\nspecificity = 458 / (458 + 91)\n\ncat(\"accuracy: \", accuracy, \" > \", \"baseline: \", baseAcur)\n", "metadata": {"_cell_guid": "04284a63-8534-425c-a972-1105ae847a43", "trusted": false, "_execution_state": "idle", "_uuid": "1ea8257fbff3ab27e714dbbe667de2e24579d72d", "collapsed": false}}, {"execution_count": null, "cell_type": "code", "outputs": [], "source": "# Step 7: Use Model to predict survivability for Test Data\npredictTest = predict(TitanicLog3, type = \"response\", newdata = Test)\n\n# no preference over error t = 0.5\nTest$Survived = as.numeric(predictTest >= 0.5)\ntable(Test$Survived)\n\nPredictions = data.frame(Test[c(\"PassengerId\",\"Survived\")])\nwrite.csv(file = \"TitanicPred\", x = Predictions)", "metadata": {"_cell_guid": "c4acfdfd-c4d3-40b6-ad89-10034871037c", "trusted": false, "_execution_state": "idle", "_uuid": "cd8e6a9835f6e12bfe65a1c88e74cf45967986c8", "collapsed": false}}], "nbformat": 4, "metadata": {"language_info": {"version": "3.4.0", "pygments_lexer": "r", "mimetype": "text/x-r-source", "codemirror_mode": "r", "name": "R", "file_extension": ".r"}, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "nbformat_minor": 0}