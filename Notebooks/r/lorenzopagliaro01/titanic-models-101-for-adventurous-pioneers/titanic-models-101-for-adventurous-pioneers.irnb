{"cells":[{"metadata":{"_uuid":"2fca8e4728da6a6cf0ff33072a6f4398c37a030a"},"cell_type":"markdown","source":"![](http://i68.tinypic.com/14jt8xf.jpg)"},{"metadata":{"_uuid":"a4e2027321893c4e8bee1064afa51135449dfdb7"},"cell_type":"markdown","source":"Clean enviroment, call libraries, set seed"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"eaf4aef8659e42f49195d42b0fdb176926381de3"},"cell_type":"code","source":"rm(list=ls())\n#not all libraries will be used. \n\nlibrary(plyr)\nlibrary(DescTools)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(aod)\nlibrary(ROCR)\nlibrary(pROC)\nlibrary(dplyr)\nlibrary(readxl)\nlibrary(caret)\nlibrary(MASS)\nlibrary(Rcpp)\nlibrary(sand)\nlibrary(igraph)\nlibrary(ppcor)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(corrplot)\nlibrary(xts)\nlibrary(DescTools)\nlibrary(dplyr)\nlibrary(aod)\nlibrary(ROCR)\nlibrary(pROC)\nlibrary(readxl)\nlibrary(caret)\nlibrary(MASS)\nlibrary(PerformanceAnalytics)\nlibrary(lmtest)\nlibrary(digest)\nlibrary(scales)\nlibrary(tm)\nlibrary(SnowballC)\nlibrary(wordcloud)\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(reshape2)\nlibrary(lubridate)\nlibrary(anytime)\nlibrary(ggfortify)\nlibrary(data.table)\nlibrary(gridExtra)\n\n\nset.seed(123)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"08569f256f6f3fbbda94575829744fc627aec833"},"cell_type":"markdown","source":"# Round 1: the basics"},{"metadata":{"_uuid":"456ecfb83b31fa7e93372bcb8b8855002845ad35"},"cell_type":"markdown","source":"In order to make my models work, I divide the \"train\" dataset in two parts. To make other observations (data visualization) it would be better, on the contrary, to combine the given \"test\" and \"train\" datasets. \n\nFor the moment I decide not to deal with NA since this is the first attempt and I want to start from the basics, so I simply make a comple cases dataset (from 891 to 714 cases)."},{"metadata":{"trusted":true,"_kg_hide-output":true,"_uuid":"0c690b6ba1f2544dbe737d8fdde3545c23163cec"},"cell_type":"code","source":"data <- train\n#make a complete dataset\ndata <- data[complete.cases(data),]\n\nperc <- floor((nrow(data)/4)*3)       \ndata <- data[sample(nrow(data)), ]          \ndata.train <- data[1:perc, ]              \ndata.test <- data[(perc+1):nrow(data), ] ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6ca2e0af06cdd75dd0db2791a43b4410da9bda09"},"cell_type":"markdown","source":"Write a simple intuitive glm and run stepwise regression. \nAlways check the results by using a confusion matrix after each model. \n**Note: Round the results!**\n### Glm: 76,54%"},{"metadata":{"trusted":true,"_kg_hide-output":true,"_uuid":"ed296e480456155f8af279294593e4585c3a686d"},"cell_type":"code","source":"log1 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = data.train)\nstep <- stepAIC(log1, direction=\"both\")\nstep$anova\n\n# step$anova\n#Stepwise Model Path \n#Analysis of Deviance Table\n\n#Initial Model:\n#Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked\n\n#Final Model:\n#Survived ~ Pclass + Sex + Age + SibSp\n\n\n#        Step Df     Deviance Resid. Df Resid. Dev      AIC\n#1                                  525   75.38998 491.8823\n#2    - Parch  1 0.0002069457       526   75.39019 489.8838\n#3     - Fare  1 0.0514154893       527   75.44160 488.2485\n#4 - Embarked  3 0.8427454650       530   76.28435 488.1918\n\n\nlog2 <- glm(Survived ~ Pclass + Sex + Age + SibSp, data = data.train)\nfitted.results <- predict(log2, newdata = data.test, type = \"response\")\ndata.test$prob <- fitted.results\n\nconfusionMatrix(round(data.test$prob), data.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"e1b83e6a1a81a761f83b419c46f3d1d8179e942f"},"cell_type":"code","source":"Confusion matrix output and observations\n\n> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction  0  1\n>          0 85 22\n>          1 20 52\n>                                           \n>                Accuracy : 0.7654          \n>                  95% CI : (0.6964, 0.8254)\n>     No Information Rate : 0.5866          \n>     P-Value [Acc > NIR] : 3.876e-07       \n>                                           \n>                   Kappa : 0.5143          \n>  Mcnemar's Test P-Value : 0.8774          \n>                                           \n>             Sensitivity : 0.8095          \n>             Specificity : 0.7027          \n>          Pos Pred Value : 0.7944          \n>          Neg Pred Value : 0.7222          \n>              Prevalence : 0.5866          \n>          Detection Rate : 0.4749          \n>    Detection Prevalence : 0.5978          \n>       Balanced Accuracy : 0.7561          \n>                                           \n>        'Positive' Class : 0 \n\nDropped variables:  Parch, Fare, Embarked.\n\nNot bad for a first attempt!","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d227e7165a2d317597cf92727c9c2bce0850e211"},"cell_type":"markdown","source":"### Trees"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"6bc85e14305d70727fa1a07c3ecd08e3c548ed5a"},"cell_type":"code","source":"#copy paste libraries I usually use when dealing with Tree models\nlibrary(readr)\nlibrary(readxl)\nlibrary(DescTools)\nlibrary(rpart)\nlibrary(partykit)\nlibrary(evtree)\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(caret)\nlibrary(RColorBrewer)\nlibrary(ggplot2)\nlibrary(aod)\nlibrary(ROCR)\nlibrary(pROC)\nlibrary(dplyr)\nlibrary(randomForest)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c3509ec0635261d80571b99afdbe569cd9f7e069"},"cell_type":"markdown","source":"Train Cart and Random Forest models."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"c36ea9c56aea9343eb130b8f1fc799277654cd2a"},"cell_type":"code","source":"fit.cart <- train(Survived ~ Pclass + Sex + Age + SibSp, data = data.train, method=\"rpart\")\nfit.rf <- train(Survived ~ Pclass + Sex + Age + SibSp, data = data.train, method=\"rf\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d1bbb5078c2c6f2b1f7082d5ecd088c9e10e75cf"},"cell_type":"markdown","source":"Compare results and accuracy"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"11905b05957d8f1219702e779ab53d78c8306b57"},"cell_type":"code","source":"results <- resamples(list(cart=fit.cart, rf=fit.rf))\nsummary(results)\ndotplot(results)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"27acb47001860f0d58d03c36edb8da8befe01e59"},"cell_type":"markdown","source":"### Round 1 cart vs rf \n![](http://i64.tinypic.com/2ue1f0k.png)"},{"metadata":{"_uuid":"cf2c57de0dee7a9b2c1713020b05dab757077731"},"cell_type":"markdown","source":"*RF wins. \nI will still train Cart to check the final results.*"},{"metadata":{"_uuid":"9e6cc1cbd7061566e0de42deaf5cd21d3222dbb8"},"cell_type":"markdown","source":"### Cart predictions and confusion matrix: **79,89%**"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"939e1e265917dc3e87c0c4508fb19180a260d37c"},"cell_type":"code","source":"predictions_cart <- predict(fit.cart, newdata = data.test)\nconfusionMatrix(round(predictions_cart), data.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"745d63c44f5aa6ab9aea3defe8f2c32a923ec962"},"cell_type":"code","source":"> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction   0   1\n>          0 103  34\n>          1   2  40\n>                                          \n>                Accuracy : 0.7989         \n>                  95% CI : (0.7326, 0.855)\n>     No Information Rate : 0.5866         \n>     P-Value [Acc > NIR] : 1.377e-09      \n>                                          \n>                   Kappa : 0.5571         \n>  Mcnemar's Test P-Value : 2.383e-07      \n>                                          \n>             Sensitivity : 0.9810         \n>             Specificity : 0.5405         \n>          Pos Pred Value : 0.7518         \n>          Neg Pred Value : 0.9524         \n>              Prevalence : 0.5866         \n>          Detection Rate : 0.5754         \n>    Detection Prevalence : 0.7654         \n>       Balanced Accuracy : 0.7607         \n>                                          \n>        'Positive' Class : 0    ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f1cc5e21023a83c0435d6a14ead5a1f030562b70"},"cell_type":"markdown","source":"### Random Forest prediction and confusion matrix : **83,24%**"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"e60c4e29b2933d9a177447518e296b0a906efe86"},"cell_type":"code","source":"predictions_rf <- predict(fit.rf, newdata = data.test)\nconfusionMatrix(round(predictions_rf), data.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"410d0f1fa27fe773c7fae5d21b25a4f037d65fce"},"cell_type":"code","source":"> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction  0  1\n>          0 95 20\n>          1 10 54\n>                                          \n>                Accuracy : 0.8324         \n>                  95% CI : (0.7695, 0.884)\n>     No Information Rate : 0.5866         \n>     P-Value [Acc > NIR] : 1.442e-12      \n>                                          \n>                   Kappa : 0.6474         \n>  Mcnemar's Test P-Value : 0.1003         \n>                                          \n>             Sensitivity : 0.9048         \n>             Specificity : 0.7297         \n>          Pos Pred Value : 0.8261         \n>          Neg Pred Value : 0.8438         \n>              Prevalence : 0.5866         \n>          Detection Rate : 0.5307         \n>    Detection Prevalence : 0.6425         \n>       Balanced Accuracy : 0.8172         \n>                                          \n>        'Positive' Class : 0  ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7ec9afc21410b23f685a32e4c21b090950a538b7"},"cell_type":"markdown","source":"Manipulate Test data to match Train data format. In this case I will have to replace the NAs that give me errors, in the Age group. \n\nThis code will be useful for later when dealing with NAs in the Train dataset during round 2."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"17657b4ef9b6637aa10dd68d3c40c4a50bcc01de"},"cell_type":"code","source":"impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))\ntest2 <- ddply(test, ~ Sex, transform, Age = impute.mean(Age)) ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"57dede1bfa7f7d6353c2e8963230d6beea2c311f"},"cell_type":"markdown","source":"## First prediction submission: 0.77990"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"815ec2559b92e2cb399d4b2ec51827af05474acc"},"cell_type":"code","source":"predictions_rf2 <- round(predict(fit.rf, newdata = test2))\nmy_submission <- data.frame(PassengerId = test2$PassengerId)\nmy_submission$Survived <- predictions_rf2\nwrite.csv(my_submission, file = \"titanic_submission_rf1.csv\", row.names=FALSE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cee50019d60353d0968a2e74694977218a7f1140"},"cell_type":"markdown","source":"# Round 2: variables manipulation"},{"metadata":{"_uuid":"a9aac10addded2278d4e9fdbbf7816d1a7de787d"},"cell_type":"markdown","source":"This time I will deal with NA in train dataset so to have 100+ more cases to train my models on."},{"metadata":{"_uuid":"1fd8e55ae00ab30c2ffd7f1fbda124caa911e86c"},"cell_type":"markdown","source":"### **Age**\nUse the previous code. The idea is to extract the mean value based on sex and replace NAs."},{"metadata":{"trusted":true,"_kg_hide-output":true,"_uuid":"2ad5e431a0eec9cd7c35cc4f71ea609e5c222cf6"},"cell_type":"code","source":"data2 <- ddply(train, ~ Sex, transform, Age = impute.mean(Age))\ndata2[!complete.cases(data2),]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"81bf4e946f67ac3b79e7610f6d95401331430997"},"cell_type":"markdown","source":"The last line of code tells me that there are no more NAs.  I want to make two more changes: dichotomize Fare variable if the ticket price is more than 50 and introduce an \"Alone\" variable. \nBecause the Fare variable was cut in Round 1 I want to try to make an use of it; the Alone variable tells me if the passenger was on board with a spouse or sibling, which I believe is more useful than the variable \"SibSp\"."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"e24c53321803e65ab9a4cebe2daa84778afe9d9b"},"cell_type":"code","source":"data2$Fare <- ifelse(data2$Fare > 50, 1, 0)\ndata2$Alone <- ifelse(data2$SibSp == 0, 1,0)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"76c3ed7b74d82f101de36a5ad7bef58bdf88ab59"},"cell_type":"markdown","source":"Create new train and test partitions."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"27a56158dbfadf6d4ec5a70b52b3884ba6083e62"},"cell_type":"code","source":"perc <- floor((nrow(data2)/4)*3)       \ndata2 <- data2[sample(nrow(data2)), ]          \ndata2.train <- data2[1:perc, ]              \ndata2.test <- data2[(perc+1):nrow(data2), ] ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cae479088137853b398117f2a8a73f09e603694a"},"cell_type":"markdown","source":"### Glm: 77,13%"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"645564fc31d990d024a4026028dcc2327fca05b1"},"cell_type":"code","source":"log21 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Alone, data = data2.train)\nstep <- stepAIC(log21, direction=\"both\")\nstep$anova","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7b9d0b3d95a513cba77b2af2183d7e2f28987716"},"cell_type":"markdown","source":"Let's check step output: "},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"272e0d3209a8aef5abc6e53c2c13d718e23ada20"},"cell_type":"code","source":"> Stepwise Model Path \n> Analysis of Deviance Table\n> \n> Initial Model:\n> Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + \n>     Alone\n> \n> Final Model:\n> Survived ~ Pclass + Sex + Age + SibSp + Fare + Alone\n> \n> \n>         Step Df   Deviance Resid. Df Resid. Dev      AIC\n> 1                                657   88.45895 569.1731\n> 2 - Embarked  3 0.37875663       660   88.83770 566.0272\n> 3    - Parch  1 0.08241704       661   88.92012 564.6467","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8221a03e2310a556c234adf3d3396d97716bcb36"},"cell_type":"markdown","source":"Alone variable seems to help. Embarked and Parch are still dropped.\nPredict with the new model.\n"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"4e204b779ddae0072ec3678aafd572016ad16998"},"cell_type":"code","source":"log22 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Alone + , data = data2.train)\nfitted.results <- predict(log2, newdata = data2.test, type = \"response\")\ndata2.test$prob <- fitted.results\n\nconfusionMatrix(round(data2.test$prob), data2.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"cb5f0a79dbadd6c552c29d35fe5adb897c1d7f86"},"cell_type":"code","source":"> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction   0   1\n>          0 121  35\n>          1  16  51\n>                                           \n>                Accuracy : 0.7713          \n>                  95% CI : (0.7105, 0.8247)\n>     No Information Rate : 0.6143          \n>     P-Value [Acc > NIR] : 4.454e-07       \n>                                           \n>                   Kappa : 0.4967          \n>  Mcnemar's Test P-Value : 0.01172         \n>                                           \n>             Sensitivity : 0.8832          \n>             Specificity : 0.5930          \n>          Pos Pred Value : 0.7756          \n>          Neg Pred Value : 0.7612          \n>              Prevalence : 0.6143          \n>          Detection Rate : 0.5426          \n>    Detection Prevalence : 0.6996          \n>       Balanced Accuracy : 0.7381          \n>                                           \n>        'Positive' Class : 0     ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6718603e3c9b4ebb6df09aa90acae1f6bb08d83b"},"cell_type":"markdown","source":"### Trees"},{"metadata":{"_uuid":"c5722d46825feaae727087e861d6aa56c05a051e"},"cell_type":"markdown","source":"Train Cart and Rf model and compare them."},{"metadata":{"trusted":true,"_kg_hide-output":true,"_uuid":"f81610e57067719141e984086f807b25b2ce8b6e"},"cell_type":"code","source":"fit.cart <- train(Survived ~ Pclass + Sex + Age + SibSp + Alone + Fare, data = data2.train, method=\"rpart\")\nfit.rf <- train(Survived ~ Pclass + Sex + Age + SibSp + Alone + Fare, data = data2.train, method=\"rf\")\n\nresults <- resamples(list(cart=fit.cart, rf=fit.rf))\nsummary(results)\ndotplot(results)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f9f9dac333060ddf0cf666498949ebc3007cd46f"},"cell_type":"markdown","source":"![](http://i64.tinypic.com/2yzh9g5.png)"},{"metadata":{"_uuid":"2f8f4bd2f5a9781b0cb116e577ff8693154fd09b"},"cell_type":"markdown","source":"Comments: \n* close values for MAE and RMSE\n* Rsquared higher in RF \n* RF could still be a better model"},{"metadata":{"_uuid":"a19ed00df10c91bfaafe978d132bb5a02afd8c7a"},"cell_type":"markdown","source":"### Cart prediction 2 and confusion matrix: **74,89%**"},{"metadata":{"_uuid":"c647725e6c8316e7728782416755b30cb8bfaa98"},"cell_type":"markdown","source":"*note: compared to Round 1 the dataset is bigger, so the accuracy alone does not explain the quality of the model.*"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"a4199b5839a58ad1030114891bbdc35078e99609"},"cell_type":"code","source":"predictions_cart <- predict(fit.cart, newdata = data2.test)\nconfusionMatrix(round(predictions_cart), data2.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"d1cf5673abc6424f01a949719a58a0cacc1df98e"},"cell_type":"code","source":"> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction   0   1\n>          0 135  54\n>          1   2  32\n>                                           \n>                Accuracy : 0.7489          \n>                  95% CI : (0.6866, 0.8044)\n>     No Information Rate : 0.6143          \n>     P-Value [Acc > NIR] : 1.507e-05       \n>                                           \n>                   Kappa : 0.4028          \n>  Mcnemar's Test P-Value : 9.416e-12       \n>                                           \n>             Sensitivity : 0.9854          \n>             Specificity : 0.3721          \n>          Pos Pred Value : 0.7143          \n>          Neg Pred Value : 0.9412          \n>              Prevalence : 0.6143          \n>          Detection Rate : 0.6054          \n>    Detection Prevalence : 0.8475          \n>       Balanced Accuracy : 0.6787          \n>                                           \n>        'Positive' Class : 0  ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"754f6f0f43ff66f7ebc9867f04c10f4e6b13578c"},"cell_type":"markdown","source":"### Random Forest prediction 2 and confusion matrix: **77,58%**"},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"ec1fce9d8dca1c49ff8de59148d8b740ef6585a6"},"cell_type":"code","source":"predictions_rf <- predict(fit.rf, newdata = data2.test)\nconfusionMatrix(round(predictions_rf), data2.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"8382e98aa591e8f2af41e6cb061ada0351eaf692"},"cell_type":"code","source":"> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction   0   1\n>          0 119  32\n>          1  18  54\n>                                           \n>                Accuracy : 0.7758          \n>                  95% CI : (0.7153, 0.8288)\n>     No Information Rate : 0.6143          \n>     P-Value [Acc > NIR] : 2.049e-07       \n>                                           \n>                   Kappa : 0.512           \n>  Mcnemar's Test P-Value : 0.06599         \n>                                           \n>             Sensitivity : 0.8686          \n>             Specificity : 0.6279          \n>          Pos Pred Value : 0.7881          \n>          Neg Pred Value : 0.7500          \n>              Prevalence : 0.6143          \n>          Detection Rate : 0.5336          \n>    Detection Prevalence : 0.6771          \n>       Balanced Accuracy : 0.7483          \n>                                           \n>        'Positive' Class : 0    ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4af277e5d74dbdb626a60d8319284e50aa5ad176"},"cell_type":"markdown","source":"## Round 2 submissions: CART2 0.75598, RF2 0.73684."},{"metadata":{"_uuid":"465007f86ff055549e9d4f1a79e96a07cd61686d"},"cell_type":"markdown","source":"As previously noted, the new model can be applied to a bigger dataset so it is worth to send both the Cart2 and the RF2, even with a lower score in the public leaderboard.\n\nApply the same code to variables in test dataset and create the two submission files"},{"metadata":{"trusted":true,"_kg_hide-output":true,"_uuid":"f7fbef3fed168be2d2e0f5607aa0e9ff2b9507bf"},"cell_type":"code","source":"impute.mean <- function(x) replace(x, is.na(x), mean(x, na.rm = TRUE))\ntest22 <- ddply(test, ~ Sex, transform, Age = impute.mean(Age))\ntest22$Fare <- ifelse(test22$Fare > 50, 1, 0)\ntest22$Alone <- ifelse(test22$SibSp == 0, 1,0)\n\n#incomplete dataset! Storey, Mr. Thomas, Fare NA. Given he is a 3rd class, he surely was in category 0\ntest22$Fare[is.na(test22$Fare)] <- 0\n","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"1219dbb4ce09f751b981494e10318c3c71e82301"},"cell_type":"code","source":"#file submission RFv2\npredictions_rf22 <- round(predict(fit.rf, newdata = test22))\nmy_submission2 <- data.frame(PassengerId = test22$PassengerId)\nmy_submission2$Survived <- predictions_rf22\nwrite.csv(my_submission2, file = \"titanic_submission_rf22.csv\", row.names=FALSE)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"7c086ae952bcb8fcd2440e9e467f08bce0d88960"},"cell_type":"code","source":"#file submission CARTv2\npredictions_cart22 <- round(predict(fit.cart, newdata = test22))\nmy_submission3 <- data.frame(PassengerId = test22$PassengerId)\nmy_submission3$Survived <- predictions_cart22\nwrite.csv(my_submission3, file = \"titanic_submission_cart22.csv\", row.names=FALSE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d353f3e8615e1f9b71fa665e87eb1647e416a0f7"},"cell_type":"markdown","source":"## Round 2 \"RF2 version B\" notes: 0.76076"},{"metadata":{"_uuid":"61811bf0fa7522d7ec390c2515629b3fc5b920f5"},"cell_type":"markdown","source":"As I am not entirely sure about the dichotomization on the Fare variable, I checked the same previous models excluding said variable."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"e684ca267f41a2b4f8b0003495c12e3f0dcf6ea2"},"cell_type":"code","source":"fit.rf <- train(Survived ~ Pclass + Sex + Age + SibSp + Alone, data = data2.train, method=\"rf\")\n\npredictions_rf <- predict(fit.rf, newdata = data2.test)\nconfusionMatrix(round(predictions_rf), data2.test$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"169f040592ada5cb853c004a1cc75730a3cb2fc4"},"cell_type":"code","source":"> Confusion Matrix and Statistics\n> \n>           Reference\n> Prediction   0   1\n>          0 124  34\n>          1  13  52\n>                                           \n>                Accuracy : 0.7892          \n>                  95% CI : (0.7298, 0.8408)\n>     No Information Rate : 0.6143          \n>     P-Value [Acc > NIR] : 1.714e-08       \n>                                           \n>                   Kappa : 0.534           \n>  Mcnemar's Test P-Value : 0.003531        \n>                                           \n>             Sensitivity : 0.9051          \n>             Specificity : 0.6047          \n>          Pos Pred Value : 0.7848          \n>          Neg Pred Value : 0.8000          \n>              Prevalence : 0.6143          \n>          Detection Rate : 0.5561          \n>    Detection Prevalence : 0.7085          \n>       Balanced Accuracy : 0.7549          \n>                                           \n>        'Positive' Class : 0               \n                              ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a70f4dc10a6a4189ac8a13a4bcadb4b448f00e17"},"cell_type":"markdown","source":"Notes:\nThis model should be the best one so far since it was trained on the complete dataset."},{"metadata":{"_uuid":"198dcfdc479184da16510e13fbcdd79f2066a233"},"cell_type":"markdown","source":"## Roud 3: coming soon"},{"metadata":{"_uuid":"c4915c52a0a8d11f35ba8155af56d86b941c2aa3"},"cell_type":"markdown","source":"ideas: \n* check Fare again\n* text analysis on Name\n* try to include Parch in the model"},{"metadata":{"_uuid":"ed07bb1884319f77bdc082850dd3eff3d9687c05"},"cell_type":"markdown","source":"**Thank you for reading!**"},{"metadata":{"_uuid":"60716f7128845d6d3b14b434b6fe8a93c9fe2351"},"cell_type":"markdown","source":"Version history: \n*  10/04/18 V1 published: round 1 and round 2 included."}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}