{"cells":[{"metadata":{"_uuid":"b7fbc1611ac912d74e1ce93340d4565130337458","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"63e5387325d8af0961d87b4067e6591139679665"},"cell_type":"markdown","source":"This is my kernel for the titanic competition. I am going to use a Random forest model, as I am trying to classify the passengers into two groups (died/survived).  Before building the model, I'll show how I have cleaned and manipulated the data.  I'll then show how I have built my model, and finally I will make some predictions with the test data. "},{"metadata":{"trusted":true,"_uuid":"7658384f5b062723f05daeef1bd9e144c2af56a3"},"cell_type":"code","source":"\nlibrary(readr)\ntitdata=read_csv(\"../input/train.csv\")\nnrow(titdata)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9f2893e11b4673bed6657f1603d4d48a79662f6b"},"cell_type":"markdown","source":"Make Survived (what we are trying to predict) into a factor variable"},{"metadata":{"trusted":true,"_uuid":"1ab3ea288d55445584a699f0f43f1e2c352ccb4a"},"cell_type":"code","source":"target=factor(titdata$Survived,labels=c(\"died\",\"survived\"))\ntitdata$Survived=target","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"80eb557a37d09563cc6c0bd34a3ccedab79b3930"},"cell_type":"markdown","source":"\nReplace missing age values with the median age"},{"metadata":{"trusted":true,"_uuid":"7e4959b4cf8148ea41482ce3cacc29e3042cf96f"},"cell_type":"code","source":"titdata$Age[is.na(titdata$Age)]=median(titdata$Age,na.rm=TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d2e3c6a95c3ac6464eb3f2ddeba5e191d4e7eda0"},"cell_type":"markdown","source":"There are too many different cabins/different levels of cabins to work on the random forest model, so  make a column with the floor/first letter of each cabin. If it doesn't give the cabin, say that the cabin is unknown. "},{"metadata":{"trusted":true,"_uuid":"57c1ab9182a90f34c4a962515305be5edf8f1ab9"},"cell_type":"code","source":"cab=as.character(titdata$Cabin)\nempty=c(1:length(cab))\n\nfor (i in 1:length(cab)){\n  if (is.na(cab[i])==\"TRUE\") {\n  empty[i]=\"Cabin Unknown\"\n  }\n  else {\n  empty[i]=substr(cab[i],1,1)\n  }\n}\n\nempty[1:10]\ntitdata$cabinfloor=as.factor(empty)\nclass(titdata$cabinfloor)\nlevels(titdata$cabinfloor)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"983b1b92bf34ad9655caa5311c81a32307dfeb1e"},"cell_type":"markdown","source":"I am making the Sex and Embarked predictors into factors, and there are 2 entries with missing entries in the embarked column, so I have removed them. I have found which entries they are and removed them manually, but if there were more entries I could do it more intelligently i.e remove rows with is.na(titdata$Embarked)==\"TRUE\""},{"metadata":{"trusted":true,"_uuid":"325e108c432506450c6ab83cf185657c3efc99d2"},"cell_type":"code","source":"titdata$Sex=as.factor(titdata$Sex)\ntitdata$Embarked=as.factor(titdata$Embarked)\ntitdata=titdata[-c(62,830),]\nnrow(titdata)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ef510f7793dc779c180881e88518661a14d6ee8f"},"cell_type":"markdown","source":"Now I'm plotting some basic graphs  to get an idea of the relationship between the predictors and what I am trying to predict. "},{"metadata":{"trusted":true,"_uuid":"840eff742d293239f10ffd664f97f997aa86c482"},"cell_type":"code","source":"library(ggplot2)\nlibrary(lattice)\n\nbarchart(titdata$Sex,titdata$Survived,xlab=\"Number Of Survivers\")\n\nbarchart(titdata$cabinfloor,titdata$Survived,xlab=\"Number Of Survivers\")\n\nggplot(aes(Survived,Parch), data=titdata)+\ngeom_boxplot()\n\nggplot(aes(Survived,Age), data=titdata)+\ngeom_boxplot()\n\nggplot(aes(Survived,Fare), data=titdata)+\n  geom_boxplot()\n\n\nggplot(aes(Survived,SibSp), data=titdata)+\n  geom_boxplot()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ed1c07d6abaa8ec764b34a520a317c878ace7ec9"},"cell_type":"markdown","source":"Here I am splitting the data into a training set and a test set. I will build the model with the training set and test the accuracy of the model by making predictions with the test set."},{"metadata":{"trusted":true,"_uuid":"f873e6c4aa247547201eec32c6bbbe520b9f582d"},"cell_type":"code","source":"set.seed(333)\nsampsize=floor(0.75*nrow(titdata))\nsample=sample(1:nrow(titdata),size=sampsize)\ntraintit=titdata[sample,]\ntesttit=titdata[-sample,]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9856e936eeb76216335f8f3d394c05af05e86d4f"},"cell_type":"markdown","source":"Now I run the model with the main predictors. Whilst not all the predictors seem to important based on basic plots and the mean decrease in accuracy, we are aiming to be as accurate as possible with our predictions so the 'less important' variables are still helpful. "},{"metadata":{"trusted":true,"_uuid":"adbf6d8feab62bb20ef37387c69c7a2b5502ed78"},"cell_type":"code","source":"library(randomForest)\n\n\nmod = randomForest(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+cabinfloor+Embarked,data = traintit, ntree =1000,mtry=3,importance = TRUE)\nmod\nmod$importance","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2aeedb8752750038402be83ea9bc95b6d0cc7847"},"cell_type":"markdown","source":"Our model started with the default parameters for ntree (total number of trees used) and mtry  (number of variables used in each decision tree), so now we are trying to  optmize the mtry parameter. "},{"metadata":{"trusted":true,"_uuid":"8546ad38e235a10c21c3e7d4769712259d4118b1"},"cell_type":"code","source":"library(caret)\n\n#tuning mtry parameter with grid seacrh method and cross-validation                  \ncontrol=trainControl(method=\"repeatedcv\", number=10, repeats=3, search=\"grid\")\nset.seed(222)\ntunegrid=expand.grid(.mtry=c(1:9))\nrf_gridsearch=train(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+cabinfloor,data=traintit,method=\"rf\",metric=\"Accuracy\",tuneGrid=tunegrid,trControl=control)\nprint(rf_gridsearch)\nplot(rf_gridsearch)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"79ff09f6526d7515bf998c51345f6f7cc2175022"},"cell_type":"markdown","source":"\nWhlist this says 7 is the optimal number for mtry, upon trying different values for mtry in the model and looking at the error rates and accuracy of predictions with the test set, a smaller value for mtry seemed a better match (overfitting?). Therefore, I am using mtry=4 in my model. (look into caret package&parameter tuning in more detail?). I now test the model by making predictions with the unseen test data."},{"metadata":{"trusted":true,"_uuid":"afbcf8af0bff9e9d9be422df2847266a1d3fe7ef"},"cell_type":"code","source":"newmod=randomForest(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+cabinfloor,data = traintit, ntree =1000,mtry=4,importance = TRUE)\n\ntest=predict(newmod,testtit)\n#making predictions on new data/test data with model\nactual=testtit$Survived\nres=test==actual\nx=res[res==\"TRUE\"]\naccuracy=length(x)/length(res)\naccuracy","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"be7d4c39d37c82afdeacf04893c2645b59c197cc"},"cell_type":"markdown","source":"On the test data, the model predicted 84% of the cases accurately, so the model is accurate, and not overfit to the training data. \n\nNow it's time to make predictions with the test data from kaggle. "},{"metadata":{"trusted":true,"_uuid":"48e9c00ffb964ad4dc3fb5892e48b724797f6aca"},"cell_type":"code","source":"testdata=read_csv(\"../input/test.csv\")\nhead(testdata)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"083dcfd3916e53bd0e63e6afaded9c6ec889e48d"},"cell_type":"markdown","source":"need to clean the test data as the did with the training data. "},{"metadata":{"trusted":true,"_uuid":"6810e1f68fba4d21638f35ed2d4ad5061600acb8"},"cell_type":"code","source":"testdata$Age[is.na(testdata$Age)]=median(testdata$Age,na.rm=TRUE)\ntestdata$Sex=as.factor(testdata$Sex)\ntestdata$Embarked=as.factor(testdata$Embarked)\ntestdata$Fare[is.na(testdata$Fare)]=median(testdata$Fare,na.rm=TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"706adb12ff175137dca5dfe0f908eecb4751714c"},"cell_type":"code","source":"cab2=as.character(testdata$Cabin)\nempty2=c(1:length(cab2))\n\nfor (i in 1:length(cab2)){\n  if (is.na(cab2[i])==\"TRUE\") {\n  empty2[i]=\"Cabin Unknown\"\n  }\n  else {\n  empty2[i]=substr(cab2[i],1,1)\n  }\n}\n\nempty2[1:10]\ntestdata$cabinfloor=as.factor(empty2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fc334144d8c2d37c7c791aa3c0eae872324360b2"},"cell_type":"code","source":"levels(testdata$Embarked)=levels(titdata$Embarked)\nlevels(testdata$Sex)=levels(titdata$Sex)\nlevels(testdata$cabinfloor)=levels(titdata$cabinfloor)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8f7f2929c40e94ee978312b0474df25c00014766"},"cell_type":"markdown","source":"I will now make the predictions and get it into the appropriate form for submission"},{"metadata":{"trusted":true,"_uuid":"a0c5606391cdb0d371c74e71db2bf6fd4ae3f614"},"cell_type":"code","source":"prediction=predict(newmod,testdata)\nsubmission=data.frame(PassengerId=testdata$PassengerId,Survived=prediction)\nsubmission\nsubmission$Survived=as.integer(submission$Survived)\nsubmission","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0f23b32f77a3c7cebdf874745cf15550dd518c55"},"cell_type":"code","source":"for (i in 1:length(submission$Survived)) {\n    if (submission$Survived[i]==1){\n        submission$Survived[i]=0\n        }\n    else {\n        submission$Survived[i]=1\n    }\n    }\n    \nsubmission","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0250b0df6c244da37b6dc4d70ad766d9516f93d0","_kg_hide-output":true,"_kg_hide-input":false},"cell_type":"code","source":"titfile=write.csv(submission,\"titanicsubmission.csv\")","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}