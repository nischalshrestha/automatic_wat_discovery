{"nbformat_minor": 1, "nbformat": 4, "cells": [{"cell_type": "markdown", "metadata": {"_cell_guid": "94d9ad4f-f789-41c9-8a48-6cbd420dd01c", "_uuid": "efaa65b99d4a9252b2f5829673889cf2ce55ac73"}, "source": ["\n", "# EDA in R using ggplot (Code explained)\n", "\n", "On this tutorial I will perform an EDA using ggplot."]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "05c672ae-a178-4d11-8337-1ee491ede71f", "_uuid": "82ee5918ab028ce57a727230b98cfc3f2527147b", "_kg_hide-output": true}, "source": ["#Load libraries\n", "library(ggplot2) # Data visualization\n", "library(readr) # CSV file I/O, e.g. the read_csv function\n", "library(caret) # Machine learning toolbox\n", "library(tidyverse) #Data manipulation\n", "library(magrittr) #Make code easier to read \n", "library(repr) #Control plot size\n", "library(stringr) #Manipulate character variables\n", "library(purrr) #Apply one function to a lot of elements (like sapply function but better)\n", "\n", "#Set plot properties and colors\n", "theme_set(theme_bw()) # Minimal theme\n", "cbPalette <- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\",\n", "               \"#CC79A7\", 'magenta')\n", "options(repr.plot.width=12, repr.plot.height = 3) #Size of the plots"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "96af6743-7cca-457d-9fbf-3422e4e90246", "_uuid": "0348219edf71a47f96d73b52eaa372e7e4f388d3"}, "source": ["#Load data\n", "train <- read.csv('../input/train.csv')\n", "test <- read.csv('../input/test.csv')\n", "\n", "#Take a look at the data\n", "head(train)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "eef6ae0a-bdb5-40d8-84eb-4484ef6f83a5", "_uuid": "4d218cd42fc45d2ff25161494b56f3474e16add9"}, "source": ["### Are there any missing values?"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "c6ee8e84-a131-45f0-8c46-b0d8e84f59dd", "_uuid": "e7989bea14fb9ca2095eeb3c1502e02f501b9e1a"}, "source": ["train_na <- sapply(train, function(x)sum(is.na(x)|x==\"\"))#Count the NA's in each row \n", "t(train_na[train_na>0]) #Print values greater than 0\n", "test_na <- sapply(test, function(x)sum(is.na(x)|x==\"\")) #test  \n", "t(test_na[test_na>0]) #Print values greater than 0"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "5c7411df-b27b-498c-9c87-a30c0c91af9c", "_uuid": "e2dfd66bdb229ca8bcda43c9145ecfb4f49812ad"}, "source": ["### What's the survival rate?"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "a27d3477-d39d-4057-afb4-9510cba29574", "_uuid": "663c8cb1f44a3e238fe709680905a61a3282344f"}, "source": ["( sum(train$Survived) / nrow(train) ) %>% round(4)  * 100 #  data %>% mean (is equivalent to) mean(data) "]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "6d44319a-5224-4a61-88c0-2faa0ca69d76", "_uuid": "39840f033a5f17cc993a90d2940f25500a5d2b62"}, "source": ["\n", "# Which are the variables explains most of the surviving passengers?\n", "\n", "If you watched the Titanic movie you might think that being a pretty first class women increased your chances to survive. Let's see if that's true. \n", "\n", "### Sex , Pclass and Survived"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "ef7649db-6352-40ec-bd0a-ba4e42683b55", "_uuid": "0ce827963a3bc2c3ffe620902c544e94b14079a1"}, "source": ["#Sex, Pclass and Survived\n", "ggplot(data = train, aes( x =  Pclass,  fill = as.factor(Survived )))+ #Define the x and fill value\n", "    #I use fill instead of color because color refers only to the perimeter of the bars and fill to the\n", "    # inside of each figure\n", "        geom_bar()  + # Add the bar plot\n", "        facet_grid(~Sex) + #Create one bar plot per each Sex category\n", "        scale_fill_manual(values = cbPalette) # Change the default colors\n"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "5d8325d6-ed62-4955-bbc5-c47ef47c8238", "_uuid": "a598548399e904602e965f9a4b10b52d18154a5c"}, "source": ["ggplot(data = train, aes( x =  SibSp + Parch,  fill = as.factor(Survived) ) ) +\n", "geom_bar(position = 'dodge') + # position dodge provides one column for each SUrvived group\n", "scale_fill_manual(values = cbPalette)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "f5d2009f-4cda-40d0-86d6-7029ea186ef9", "_uuid": "5e8bb0c4cefd64264250185ced66c52954eba718"}, "source": ["Having from 1 to 3 family members on board increased your survival chances, this make sense small groups could organize better and find space on a boat.\n", "\n"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "03b99f7d-a9a3-4ba8-ada8-4c87ba2cfc85", "_uuid": "fcc13d8e874c09ea8d0385cc68544a625663cfc6"}, "source": ["ggplot(data = train, aes( x =  Age, fill =as.factor(Survived) ) )+\n", "geom_density(colour = 'transparent') + #Like a histogram but using continious values in \n", "facet_wrap(~Sex +Survived , scales = 'free_y' )+ #One plot for each Sex factor and each Survived value\n", "scale_fill_manual(values = cbPalette)\n", "#Warning message appears due missing values on the Age column"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "fee357f6-c1e1-4ce4-9cda-c84268d8a5e6", "_uuid": "55134199898243da1ae7885a06800a33faa075f5"}, "source": ["There are 3 groups that look the same, but one that looks different (Male who survived), this leads us to beleive that for men, Age was an important factor on their survival chances. "]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "7f8b1b27-6d45-425c-bec0-5bb280a41268", "_uuid": "b13854d5a0cdba3afbf1aa06a9ce2df2702cf01b"}, "source": ["ggplot(data = train, aes(x =Pclass , fill = as.factor(Survived))) +\n", "        geom_bar() +\n", "        facet_wrap(~Embarked, scales = 'free_y') +\n", "        scale_fill_manual(values = cbPalette)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "0df73de3-7602-4397-9984-cb5c6f1b737f", "_uuid": "4e12f9455e5b0b9a4db81d810faac696447ce9e7"}, "source": ["Not a lot of information."]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "27b72870-1b78-485d-93d5-5d79d01b567a", "_uuid": "c543452e1455f60fc10a0b94f5d59626156e26d4"}, "source": ["ggplot(data = train , aes(x = as.factor(Pclass), y = Fare, colour = Sex)) +\n", "geom_boxplot() + #Boxplot\n", "scale_y_log10() + #Transform the scale to see better details (Warning: Objects look closer than they are)\n", "scale_color_manual(values = cbPalette)"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "92bdc45b-7030-43b7-a0ca-bfc81969e3c9", "_uuid": "ffeef9ec4539c14ba5338879365a6764c5f45855"}, "source": ["Wow!! On average men paid less money than women for tickets belonging to the same Class.\n"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "4dd15efa-620e-4361-8dff-a21939559b28", "_uuid": "1119d2bdbe21de1b70fc9ccd730c945dcd7fd485"}, "source": ["ggplot(data = train , aes(x = as.factor(Pclass), y = Fare, colour = as.factor(Survived))) +\n", "geom_point(position ='jitter', size = .5) + # plot points (jitter will create an artificial random separation between points)\n", "facet_wrap(~Sex)+\n", "scale_color_manual(values  = cbPalette)"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "9998e2fa-d255-49cf-9d4e-6b8ae385e14c", "_uuid": "9f275737ae4ea0195a07d6c327a617f38c58f77d"}, "source": ["train$Cabin_recorded <- 'Yes'\n", "train$Cabin_recorded[is.na(train$Cabin) |train$Cabin==''] <- \"No\"\n", "\n", "ggplot(data= train, aes(x = as.factor(Pclass), fill = Cabin_recorded)) + \n", "geom_bar() +\n", "facet_wrap(~Survived)+\n", "scale_fill_manual(values = cbPalette)"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "37562098-9df3-40e6-96aa-233e1ab951dd", "_uuid": "96a630fa609bfcf372a77552197b4430b6314402"}, "source": ["\n", "train$Cabin_letter <- str_sub(train$Cabin, 1,1) %>% as.factor\n", "\n", "Cabin_percentage <- train %>% \n", "                    group_by(Cabin_letter) %>% \n", "                    summarize(\n", "                            count = n(),\n", "                            Survived_pct = sum(Survived)/count)\n", "\n", "ggplot(data= Cabin_percentage, aes(y = Survived_pct, x = Cabin_letter)) + \n", "geom_point(aes(size = count), colour = cbPalette[3]) +\n", "geom_hline(data=train, aes(yintercept= mean(Survived)), colour = cbPalette[4], linetype = 2) +\n", "geom_text(aes(x = 'D', y=.35), label = 'Survival average', colour = cbPalette[4])"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "c547c8c3-1af2-4009-b570-9c913d337add", "_uuid": "b672fa467265f34dc20153bf3f9a015cac2862be"}, "source": ["### Ladies and kids first, but until what age you were considered a kid in the titanic?"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "6c919732-7734-446f-8d65-4cbdd849d5bb", "_uuid": "bc4a4aedd2a2c00e9bd6056a120f654e9393afaf", "_kg_hide-output": false}, "source": ["#Create a function that will give the survival rate of all the passengers youner than a certain age\n", "group_babies <- function(age){ \n", "    train %>% select(Age, Survived) %>% filter(Age<=age) %>% summarise(\n", "    count=sum(Age==age),\n", "    Age = age,\n", "    Survival_rate = mean(Survived))\n", "    }\n", "#Use the function on ages from 1 to 10\n", "babies_survival_rate <- map_df(c(1:10), group_babies)\n", "\n", "ggplot(data = babies_survival_rate, aes(x = Age, y = Survival_rate)) +\n", "geom_smooth(color = cbPalette[4], se =F, method ='loess', formula = 'y~x') + # Get a nice curve that \n", "geom_point(aes(size = count), color =cbPalette[3]) "]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "a19d28e0-32ab-434c-970d-f2a0b109fd44", "_uuid": "283939a16b03b76f2d54133b25a952247acd779d"}, "source": [">It seems that  babies (up to 1 year), and kids were considered up to 5 years. \n", "\n", "### Title vs Survived"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {"_cell_guid": "513ea566-85ad-40af-8003-54eb31f5331b", "_uuid": "382d9f7d6c679d202ffd28c5330e89dc47019c93"}, "source": ["#To get the title of each passenger we will extract all the words with a \".\" in their name\n", "\n", "library(stringr)\n", "\n", "train %<>% mutate(\n", "Title = str_extract(string = Name, pattern = '[A-Z][a-z]*\\\\.') %>% as.character,\n", "Title = ifelse(Title%in%c('Dr.', 'Master.', 'Miss.', 'Mr.', 'Mrs.', 'Rev.'), Title, 'Other')\n", "                   ) \n", "ggplot(data= train, aes(x =Title)) +\n", "geom_bar(aes(fill=as.factor(Survived))) +\n", "scale_fill_manual(values= cbPalette[2:3]) + \n", "coord_flip()"]}, {"cell_type": "markdown", "metadata": {"_cell_guid": "f42927c8-13eb-4673-a238-2b2fe975b437", "_uuid": "a3f70509a77fa893f16faa6e3ba7f282134c7bf1"}, "source": [" Being a Mr.,  Rev. or Dr.  on the Titanic was brutal. \n", "\n", "### Would you die to save your family?\n", "\n", "Let's find out how does passengers with family on board did on the Titanic crash."]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {}, "source": ["train %<>% mutate(\n", "            Family_size = SibSp + Parch ,\n", "            Alone = ifelse(Family_size==0,1,0),\n", "            Head_of_family = ifelse(Parch>1 & Title == 'Mr.', 'Head of family', 'Other' ))\n", "\n", "Family_rate <- train %>% \n", "                group_by(Family_size) %>% \n", "                summarise(\n", "                    count = n(),\n", "                    Survival_rate = sum(Survived)/count\n", "                )\n", "\n", "ggplot(data = Family_rate, aes(x = Family_size, y = Survival_rate)) +\n", "    geom_hline(yintercept = mean(train$Survived), colour = cbPalette[4], linetype = 2) +\n", "    geom_text(label = 'Overall Survival Rate', x= 5, y = .45, colour = cbPalette[4])+\n", "    geom_point(aes(size = count), colour= cbPalette[2]) "]}, {"cell_type": "markdown", "metadata": {}, "source": ["Small families had a bigger chance of surviving. \n", "\n", "### In which class does families were traveling?\n"]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {}, "source": ["ggplot(train %>% filter(Alone!=1), aes(x = Family_size)) +\n", "geom_bar(aes(fill = as.factor(Survived))) +\n", "facet_wrap(~Pclass) + \n", "scale_fill_manual(values = cbPalette)"]}, {"cell_type": "markdown", "metadata": {}, "source": ["Usually if you traveled with familyand your title was Mr. you might be the head of the family, and my hypothesis is that they might give their life to save their family, let's find out their survival rate vs the survival rate of other family members."]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {}, "source": ["ggplot(train %>% filter(Alone==0), aes(x = Head_of_family, fill= as.factor(Survived))) +\n", "geom_bar() + scale_fill_manual(values = cbPalette)\n"]}, {"cell_type": "markdown", "metadata": {}, "source": ["It looks that I'm right, now let's compare the Mr. travelling alone vs the Mr. travelling with family."]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {}, "source": ["Head_family_summary <- train %>% filter(Title ==\"Mr.\") %>% \n", "        group_by(Head_of_family) %>% \n", "        summarise(\n", "            count = n(),\n", "            Survival_rate = sum(Survived)/count)\n", "\n", "Head_family_summary\n", "ggplot(data = Head_family_summary, aes(x = Head_of_family )) +\n", "geom_point(aes(y =Survival_rate, size = count), stat ='identity', colour = cbPalette[2])"]}, {"cell_type": "markdown", "metadata": {}, "source": ["We need to prove that theres actually a different proportion rate between the 2 groups.  "]}, {"execution_count": null, "outputs": [], "cell_type": "code", "metadata": {}, "source": ["for_test <- train %>% filter(Title ==\"Mr.\") #Get all the Mr. from the dataset\n", "prop.test(table(for_test$Head_of_family , for_test$Survive)) #Proportion test from the 2 groups."]}, {"cell_type": "markdown", "metadata": {}, "source": ["Nope, there's not statitical evidence of heroic Mr.'s giving their life for their family."]}, {"cell_type": "markdown", "metadata": {}, "source": []}], "metadata": {"language_info": {"mimetype": "text/x-r-source", "version": "3.4.1", "name": "R", "pygments_lexer": "r", "file_extension": ".r", "codemirror_mode": "r"}, "kernelspec": {"display_name": "R", "language": "R", "name": "ir"}}}