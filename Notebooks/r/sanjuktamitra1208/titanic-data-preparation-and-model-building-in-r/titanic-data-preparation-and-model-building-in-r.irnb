{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"collapsed":true},"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\n#set the working directory\nsetwd(\"C:/Users/sanjukta/Desktop/Kaggle/Titanic\")\n# Any results you write to the current directory are saved as output.\n#########################################################\n#load the below library before execution\n\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(ggplot2)\nlibrary(caret)\nlibrary(randomForest)\n#load titanic train and test data\ntitanic <- read.csv(\"train.csv\",stringsAsFactors = FALSE)\ntitanic_test <- read.csv(\"test.csv\",stringsAsFactors = FALSE)\n\n#load the test data in R\n\n#CHECK IF THE PASSENGER ID IS UNIQUE\nlength(unique(titanic$PassengerId))\n#all passenger ids are unique\n\nlength(unique(titanic_test$PassengerId))\n#all passenger ids are unique\n\nhead(titanic)\nstr(titanic)\nhead(titanic_test)\nstr(titanic_test)\n#field cabin has lot of spaces or missing values in both training and test data \n\nlength(which(titanic$Cabin==\"\"))\n#so 687 ROWS has column cabin as spaces which is far more than 50%, hence better to remove the variable cabin\n\nlength(which(titanic_test$Cabin==\"\"))\n#so 327 ROWS has column cabin as spaces which is far more than 50%, hence better to remove the variable cabin\ntitanic1 <- titanic[,-11]\ntitanic_test1 <- titanic_test[,-10]\n\n#training dataset\n#divide the variable Name into First name,Surname and Title\ntitanic1$title <- gsub('(.*, )|(\\\\..*)', '', titanic1$Name)\n\n#strsplit(titanic1$Name,\",\",fixed = FALSE)[[]][[1]]\n#strsplit(titanic1$Name,\"Mr.| Miss.|Mrs.|Master|Ms.\",fixed = FALSE)[[1]][[2]]\ntitanic1$surname <- sapply(titanic1$Name,function(x) strsplit(x,split = \",\",fixed = FALSE)[[1]][[1]])\n#titanic1$FirstName <- sapply(titanic1$Name,function(x) strsplit(x,\"Mr.| Miss.|Mrs.|Master|Ms.\",fixed = FALSE)[[1]][[2]])\n\n\n\n#repeat the same process for test data \n#divide the variable Name into First name,Surname and Title\ntitanic_test1$title <- gsub('(.*, )|(\\\\..*)', '', titanic_test1$Name)\ntitanic_test1$surname <- sapply(titanic_test1$Name,function(x) strsplit(x,split = \",\",fixed = FALSE)[[1]][[1]])\n\n#check for missing values in training set\nsum(is.na(titanic1))\n\nwhich(is.na(titanic1[,1]))\nwhich(is.na(titanic1[,2]))\nwhich(is.na(titanic1[,3]))\nwhich(is.na(titanic1[,4]))\nwhich(is.na(titanic1[,5]))\nwhich(is.na(titanic1[,6]))\nwhich(is.na(titanic1[,7]))\nwhich(is.na(titanic1[,8]))\nwhich(is.na(titanic1[,9]))\nwhich(is.na(titanic1[,10]))\nwhich(is.na(titanic1[,11]))\n\n#only column 6 contains NA\n#check for missing values in test set\nsum(is.na(titanic_test1))\nwhich(is.na(titanic_test1[,5]))\nwhich(is.na(titanic_test1[,9]))\n\n#86 rows of age column and 1 row of fare column is missing in test data \n\n#total family size is sum of sibsp and parch plus the passenger himself\n\ntitanic1$familysize <- titanic1$SibSp + titanic1$Parch + 1\n\ntitanic_test1$familysize <- titanic_test1$SibSp + titanic_test1$Parch + 1\n\n\n\n\n\n#check the levels of Pclass,Title\nlevels(as.factor(titanic1$Pclass))\nlevels(as.factor(titanic_test1$Pclass))\n#both the training and test data contain same levels\nlevels(as.factor(titanic1$title))\nlevels(as.factor(titanic_test1$title))\n\n#combine title like Don,Sir,Rev,Jonkheer to Sir and Dona,Lady,Countess,the Countess,Mlle into Lady\n\nfor(i in 1:nrow(titanic1)){\n  if(titanic1[i,12]== 'Don'){\n    titanic1[i,12] <- \"Sir\"\n  }else if( titanic1[i,12]== 'Sir'){\n    titanic1[i,12] <-  \"Sir\" \n  }else if( titanic1[i,12]== 'Rev' ){\n    titanic1[i,12] <-  \"Sir\"\n  }else if( titanic1[i,12]=='Jonkheer' ){\n    titanic1[i,12] <-  \"Sir\"\n  }else{\n    next\n  }\n}\n\nfor( i in 1:nrow(titanic1)){\n  if(titanic1[i,12]== 'Dona'){\n    titanic1[i,12] <- \"Lady\"\n  }else if( titanic1[i,12]== 'Lady'){\n    titanic1[i,12] <-  \"Lady\" \n  }else if( titanic1[i,12]== 'Countess' ){\n    titanic1[i,12] <-  \"Lady\"\n  }else if( titanic1[i,12]=='the Countess' ){\n    titanic1[i,12] <-  \"Lady\"\n  }else if( titanic1[i,12]=='Mlle' ){\n    titanic1[i,12] <-  \"Lady\"\n  }else{\n    next\n  }\n}\n\n#repeat the same process with test data \nfor(i in 1:nrow(titanic_test1)){\n  if(titanic_test1[i,11]== 'Don'){\n    titanic_test1[i,11] <- \"Sir\"\n  }else if( titanic_test1[i,11]== 'Sir'){\n    titanic_test1[i,11] <-  \"Sir\" \n  }else if( titanic_test1[i,11]== 'Rev' ){\n    titanic_test1[i,11] <-  \"Sir\"\n  }else if( titanic_test1[i,11]=='Jonkheer' ){\n    titanic_test1[i,11] <-  \"Sir\"\n  }else{\n    next\n  }\n}\n\nfor( i in 1:nrow(titanic_test1)){\n  if(titanic_test1[i,11]== 'Dona'){\n    titanic_test1[i,11] <- \"Lady\"\n  }else if(titanic_test1[i,11]== 'Lady'){\n    titanic_test1[i,11] <-  \"Lady\" \n  }else if( titanic_test1[i,11]== 'Countess' ){\n    titanic_test1[i,11] <-  \"Lady\"\n  }else if( titanic_test1[i,11]=='the Countess' ){\n    titanic_test1[i,11] <-  \"Lady\"\n  }else if( titanic_test1[i,11]=='Mlle' ){\n    titanic_test1[i,11] <-  \"Lady\"\n  }else{\n    next\n  }\n}\n#lets check the title level again \nlevels(as.factor(titanic1$title))\n#the titles Don,Sir,Rev,Jonkheer are converted to Sir and Dona,Lady,Countess,the Countess,Mlle are converted  into Lady\nlevels(as.factor(titanic_test1$title))\n#the titles Don,Sir,Rev,Jonkheer are converted to Sir and Dona,Lady,Countess,the Countess,Mlle are converted  into Lady\n\n\n#convert the required variable to factors in training data\n\ntitanic1$Survived <- as.factor(titanic1$Survived)\ntitanic1$Pclass <- as.factor(titanic1$Pclass)\ntitanic1$Sex <- as.factor(titanic1$Sex)\ntitanic1$Embarked <- as.factor(titanic1$Embarked)\ntitanic1$title <- as.factor(titanic1$title)\n\n#convert the required variable to factors in test data\n\ntitanic_test1$Pclass <- as.factor(titanic_test1$Pclass)\ntitanic_test1$Sex <- as.factor(titanic_test1$Sex)\ntitanic_test1$Embarked <- as.factor(titanic_test1$Embarked)\ntitanic_test1$title <- as.factor(titanic_test1$title)\n\n\nstr(titanic_test1)\nstr(titanic1)\n##############################################################################################\n#decision tree to predict age value in training set \n##############################################################################################\n #take a subset of titanic1 for all columns except Name,title,surname AND TICKET\nregress1 <- titanic1[,-c(1,4,9,13)]\n\nlevels(regress1$Survived)\n\n#train is regress11 except those record which contain age as NA\ntrain <- regress1[-which(is.na(regress1$Age)),]\ntest <- regress1[which(is.na(regress1$Age)),]\n\ninstall.packages(\"rpart\")\n\ntree_age <- rpart(Age~., data=train)\nprp(tree_age)\n\nage_pred <- predict(tree_age,test[,-4])\n\ntest$age_pred <- age_pred\n\n#add the age value to the main dataframe titanic1\n\ntitanic1[which(is.na(titanic1[,6])),6] <- age_pred\n\n#lets check missing value again\nsum(is.na(titanic1))\n\n\n##############################################################################################\n#decision tree to predict age value in test set\n##############################################################################################\n#take a subset of titanic1 for all columns except Name,title,surname AND TICKET\nregress2 <- titanic_test1[,-c(1,3,8,12)]\n\n\n\n\n#use regress1 for decision tree modelling for predicting age value\n\n#train is regress11 except those record which contain age as NA\ntrain2 <- regress2[-which(is.na(regress2$Age)),]\ntest2 <- regress2[which(is.na(regress2$Age)),]\n\n\ntree_test <- rpart(Age~., data=train2)\nprp(tree_test)\n\nage_pred2 <- predict(tree_test,test2[,-3])\n\ntest2$age_pred <- age_pred2\n\n#add the age value to the main dataframe titanic1\n\ntitanic_test1[which(is.na(titanic_test1[,5])),5] <- age_pred2\n\n#lets check missing value again\nsum(is.na(titanic_test1))\n\n\n#Fare value missing,lets substitute Fare with it's mean value\nmean(titanic_test1$Fare,na.rm=TRUE)\ntitanic_test1[which(is.na(titanic_test1$Fare)),9] <- 35.63\n######################################################################################################################\n#EDA Part of training data \n######################################################################################################################\nstr(titanic1)\n\n\nggplot(titanic1,aes(x=Survived,fill=factor(Sex))) + geom_bar()\n#male death rate is much more than that of females and females survival rate is higher than males\nggplot(titanic1,aes(x=Survived,fill=factor(Pclass)))+ geom_bar()\n#Pclass 3 has maximum death rate , Pclass 1 has maximum surviva rate\nggplot(titanic1,aes(x=Age,y=Fare)) + geom_point(aes(col=factor(Survived))) \nggplot(titanic1,aes(x=title,fill=factor(Survived)))+ geom_bar()\n#survival rate  highest for MISS, after that Mr and Mrs. Death rate highest for Mr.,followed by Miss and Mrs.\nggplot(titanic1,aes(x=familysize,fill=factor(Survived))) + geom_bar() \n#most of the passengers have family size 1,2,3. rest followed by 4,5,6 are very few in numbers\n#Death rate highest for individual people of family size 0 followed by 1 and 2\n#some death rate are also seen for higher size family members witrh 6,7,8,9\nggplot(titanic1,aes(x=Embarked,fill=factor(Survived)))+ geom_bar()\n#Embarked S : highest death rate\n#Embarked S : highest survival rate but death rate are mush more in numbers\n#Embarked C and Q death and survival are almost equal in ratio\nBoxplot(titanic$Age~titanic$Survived)\nBoxplot(titanic$Fare~titanic$Survived)\n#people of higher class having high fare have higher survival rate \n  ######################################################################################################################\n#end of EDA Part of training data \n######################################################################################################################\n#Modelling using Decision Trees \n#delete the unneccessary columns name,surname and Ticket\nstr(titanic1)\nset.seed(123)\n\nindices <- sample(1:nrow(titanic1),0.7*nrow(titanic1))\nregresst1 <- titanic1[indices,]\ntestR1 <- titanic1[-indices,]\n#delete the Name,surname,Ticket from regresst1\n\nregresst1 <- regresst1[,-c(4,9,13)]\ntestR1 <- testR1[,-c(4,9,13)]\n\ntree_survive <- rpart(Survived~.,data=regresst1,method = \"class\")\nprp(tree_survive)\n\npredict_survive <- predict(tree_survive,testR1[,-2],type = \"class\")\n\n\n\nconfusionMatrix(predict_survive,testR1$Survived,positive = \"1\")\n#          Reference\n#Prediction   0   1\n#0 156  31\n#1   11  70\n\n#Accuracy : 0.8433\n#Sensitivity : 0.693 \n# Specificity : 0.934\n\n\n\n#randome forest model\nlibrary(randomForest)\nrandom1 <- randomForest(Survived~.,data=regresst1,mtry=9,ntree=600,do.trace=2, proximity=FALSE,na.action = na.omit)\n\n\n plot(random1)\n\n\n#looking at the plot lets take ntree as 200\n\nrandom2 <- randomForest(Survived~.,data=regress1,mtry=6,ntree=270,do.trace=2, proximity=FALSE,na.action=na.omit)\n\nplot(random2)\npred_surv <- predict(random2,testR1[,-2])\n\ntable(pred_surv,testR1$Survived)\nconfusionMatrix(pred_surv,testR1$Survived,positive = \"1\")\n###################################################################\n\n#Prediction   0   1\n#0 158   4\n#1   8  98\n\n#Accuracy : 0.9552          \n#95% CI : (0.9231, 0.9767)\n     \n\n#Kappa : 0.9057          \n#Mcnemar's Test P-Value : 0.3865          \n\n#Sensitivity : 0.9608          \n#Specificity : 0.9518          \n#Pos Pred Value : 0.9245          \n#Neg Pred Value : 0.9753          \n#Prevalence : 0.3806          \n#Detection Rate : 0.3657          \n#Detection Prevalence : 0.3955          \n#Balanced Accuracy : 0.9563          \n\n#'Positive' Class : 1               \n#use the model random2 for test data titanic_test1\nregress2$Survived <- c(0,1)\nregress2$Survived <- as.factor(regress2$Survived)\ncolnames(regress2$Survived)[1] <- \"Pclass\"\nregress2 <- rbind(regress1[1,],regress2)\nregress2 <- regress2[-1,]\npred_survive <- predict(random2,regress2[,-1])\n##\ntitanic_test1$Survived <- 0\ntitanic_test1 <- titanic_test1[,c(1,14,2,3,4,5,6,7,8,9,10,11,12,13)]\ntitanic_test1 <- rbind(titanic1[1,],titanic_test1)\ntitanic_test1 <- titanic_test1[-1,]\npred_survive2 <- predict(random2,titanic_test1[,-2])\ntitanic_test1$Survived <- 0\ntitanic_test1$Survived <- pred_survive2\nwrite.csv(titanic_test1,\"titanic_test2.csv\")\n","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","collapsed":true,"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":false},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}