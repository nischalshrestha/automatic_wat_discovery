{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "925f30d6-d920-199a-e11a-312050458e70"
      },
      "source": [
        "DATA EXPLORATION  Step by Step\n",
        "1.\tGetting and Reading data\n",
        "2.\tIdentifying missing values\n",
        "3.\tImputing missing values\n",
        "4.\tDescriptive  Statistics & Basic Visualisation\n",
        "5.\tGenerating model using Decision tree\n",
        "6.\tPrediction performance on test data\n",
        "7.\tEvaluating performance with ROCR "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "921a49f6-1aa2-2c50-6d2a-50a69b6526b5"
      },
      "outputs": [],
      "source": [
        "#clean Enviromental variables\n",
        "rm(list = ls())\n",
        "\n",
        "#set working dir\n",
        "getwd()\n",
        "setwd()\n",
        "\n",
        "# Read the data from wd & treat blank strings as NA\n",
        "train_data = read.csv(\"train.csv\",header = T,na.strings = c(\"NA\",\"\")\n",
        "\n",
        "# Type Converstions int to factors\n",
        "str(train_data)\n",
        "train_data$Survived = factor(train_data$Survived)\n",
        "train_data$Pclass = factor(train_data$Pclass)\n",
        "\n",
        "# Dealing with missing values\n",
        "is.na(train_data)\n",
        "sum(is.na(train_data$Age) == TRUE )\n",
        "\n",
        "# % of missing values\n",
        "sum(is.na(train_data$Age) == TRUE )/length(train_data$Age)\n",
        "sapply(train_data,function(df){sum(is.na(df)== T)/length(df);})\n",
        "\n",
        "# to visuvalize missing values\n",
        "install.packages(\"Amelia\")\n",
        "library(Amelia)\n",
        "\n",
        "#Plot the missing values\n",
        "missmap(train_data,main = \"missing values\")\n",
        "AmeliaView()\n",
        "\n",
        "# Impute missing values\n",
        "#useNA =\"always\" argument to show the number of NA values contained within data\n",
        "\n",
        "table(train_data$Embarked,useNA = \"always\")\n",
        "\n",
        "#Assign the two missing values to a more probable port\n",
        "train_data$Embarked[which(is.na(train_data$Embarked))]= 'S'\n",
        "\n",
        "#discover the types of titles contained in the names of train_data\n",
        "train_data$Name = as.character(train_data$Name)\n",
        "table_words = table(unlist(strsplit(train_data$Name,\"\\\\s+\")))\n",
        "sort(table_words[grep('\\\\.',names(table_words))],decreasing = T)\n",
        "\n",
        "library(stringr)\n",
        "tb = cbind(train_data$Age,str_match(train_data$Name,\"[a-zA-z]+\\\\.\"))\n",
        "table(tb[is.na(tb[,1]),2])\n",
        "\n",
        "#one way to impute data is to assign the mean value for each title \n",
        "mean.mr = mean(train_data$Age[grepl(\" Mr\\\\.\", train_data$Name)&!is.na(train_data$Age)])\n",
        "mean.mrs = mean(train_data$Age[grepl(\" Mrs\\\\.\", train_data$Name)& !is.na(train_data$Age)])\n",
        "mean.dr = mean(train_data$Age[grepl(\" Dr\\\\.\", train_data$Name) &!is.na(train_data$Age)])\n",
        "mean.miss = mean(train_data$Age[grepl(\" Miss\\\\.\", train_data$Name) & !is.na(train_data$Age)])\n",
        "mean.master = mean(train_data$Age[grepl(\" Master\\\\.\", train_data$Name) & !is.na(train_data$Age)])\n",
        "\n",
        "#Then, assign the missing value with the mean value of each title\n",
        "\n",
        "train_data$Age[grepl(\" Mr\\\\.\", train_data$Name) & is.na(train_data$Age)] = mean.mr\n",
        "train_data$Age[grepl(\" Mrs\\\\.\", train_data$Name) & is.na(train_data$Age)] = mean.mrs\n",
        "train_data$Age[grepl(\" Mrs\\\\.\", train_data$Name) & is.na(train_data$Age)] = mean.dr\n",
        "train_data$Age[grepl(\" Mrs\\\\.\", train_data$Name) & is.na(train_data$Age)] = mean.miss\n",
        "train_data$Age[grepl(\" Mrs\\\\.\", train_data$Name) & is.na(train_data$Age)] = mean.master\n",
        "View(train_data)\n",
        "\n",
        "#Exploring and visualizing data\n",
        "#generate descriptive statistics for each attribute, starting with passenger survival:\n",
        "barplot(table(train_data$Survived),main = \"Passenger Survival\",names = c(\"Pershied\",\"Survied\"))\n",
        "\n",
        "#generate the bar plot of passenger class:\n",
        "barplot(table(train_data$Pclass),main = \"Passenger Class\",names=c(\"First\",\"second\",\"Third\"))\n",
        "\n",
        "#outline the gender data\n",
        "barplot(table(train_data$Sex),main = \"Passenger Gender\")\n",
        "\n",
        "#plot the histogram of the different ages with the hist function\n",
        "hist(train_data$Age,main = \"Passenger Age\",xlab = \"Age\")\n",
        "\n",
        "#We can plot the bar plot of sibling passengers to get the following:\n",
        "barplot(table(train_data$SibSp), main=\"Passenger Siblings\")\n",
        "\n",
        "#Next, we can get the distribution of the passenger parch:\n",
        "barplot(table(train_data$Parch), main=\"Passenger Parch\")\n",
        "\n",
        "#histogram of the passenger fares:\n",
        "hist(train_data$Fare, main=\"Passenger Fare\", xlab = \"Fare\")\n",
        "\n",
        "#barplot the port of embarkation:\n",
        "barplot(table(train_data$Embarked), main=\"Port of Embarkation\")\n",
        "\n",
        "#Use barplot to find out which gender is more likely to perish during shipwrecks:\n",
        "counts = table(train_data$Survived,train_data$Sex)\n",
        "barplot(counts,col = c(\"black\",\"red\"),legend=c(\"Pershied\",\"Survived\"))\n",
        "\n",
        "#examine whether the Pclass factor of each passenger may affect the survival rate:\n",
        "count = table(train_data$Survived,train_data$Pclass)\n",
        "count\n",
        "barplot(count,col = c(\"black\",\"blue\"),legend=c(\"Pershied\",\"Survived\"),main = \"Passenger class Survival\")\n",
        "\n",
        "#Gender composition of each Pclass:\n",
        "counts = table(train_data$Sex, train_data$Pclass)\n",
        "barplot(counts, col=c(\"black\",\"red\"), legend = rownames(counts), main= \"Passenger Gender by Class\")\n",
        "#Furthermore, we examine the histogram of passenger ages:\n",
        "hist(train_data$Age[which(train_data$Survived == \"0\")], main=\"Passenger Age Histogram\", xlab=\"Age\", ylab=\"Count\", col =\"blue\",breaks=seq(0,80,by=2))\n",
        "hist(train_data$Age[which(train_data$Survived == \"1\")], col=\"red\", add = T, breaks=seq(0,80,by=2))\n",
        "\n",
        "#relationship between the age and survival rate\n",
        "boxplot(train_data$Age ~ train_data$Survived,\n",
        "        main=\"Passenger Survival by Age\",\n",
        "        xlab=\"Survived\", ylab=\"Age\")\n",
        "#categorize people with different ages into different groups,\n",
        "#<13 = children\n",
        "#13 t0 19 =youth, \n",
        "#20-65 Adults,\n",
        "#>65 senior Citizens\n",
        "\n",
        "train.child = train_data$Survived[train_data$Age < 13]\n",
        "length(train.child[which(train.child == 1)] ) / length(train.child)\n",
        "\n",
        "train.youth = train_data$Survived[train_data$Age >= 15 & train_data$Age < 25]\n",
        "length(train.youth[which(train.youth == 1)] ) / length(train.youth)\n",
        "                                                         \n",
        "train.adult = train_data$Survived[train_data$Age >= 20 & train_data$Age < 65]\n",
        "length(train.adult[which(train.adult == 1)] ) / length(train.adult)\n",
        "\n",
        "train.senior = train_data$Survived[train_data$Age >= 65]\n",
        "length(train.senior[which(train.senior == 1)] ) / length(train.senior)\n",
        "\n",
        "mosaicplot(train_data$Pclass ~ train_data$Survived,\n",
        "             main=\"Passenger Survival Class\", color=TRUE,\n",
        "             xlab=\"Pclass\", ylab=\"Survived\")\n",
        "\n",
        "##############\n",
        "#Predicting passenger survival with a decision tree\n",
        "set.seed(2)\n",
        "ind = sample(2,nrow(train_data),replace = T,prob = c(0.7,0.3))\n",
        "trainset = train_data[ind == 1,]\n",
        "testset = train_data[ind == 2,]\n",
        "library(party)\n",
        "train_tree = ctree(Survived ~ Pclass + Sex + Age + SibSp + Fare\n",
        "                                 + Parch + Embarked, data=trainset)\n",
        "train_tree\n",
        "\n",
        "\n",
        "#plot the tree:\n",
        "plot(train_tree, main=\"Conditional inference tree of Titanic Dataset\")\n",
        "\n",
        "# use svm to generate a prediction model.\n",
        "library('e1071')\n",
        "svm.model = svm(Survived ~ Pclass + Sex + Age + SibSp + Fare + Parch +\n",
        "                    Embarked, data = trainset, probability = TRUE)\n",
        "svm.model\n",
        "\n",
        "## predict the survival of the testing set:\n",
        "\n",
        "# 1.Apply predict function on test data\n",
        "ctree.predict = predict(train_tree, testset)\n",
        "# 2.Load the caret library for confusion matrix\n",
        "library(caret)\n",
        "# 3.Evaluate perfomance with confusion matrix\n",
        "result=confusionMatrix(ctree.predict, testset$Survived)\n",
        "result\n",
        "\n",
        "##### Assessing performance with the ROC curve\n",
        "#1. Prepare the probability matrix:\n",
        "train.ctree.pred = predict(train_tree, testset)\n",
        "train.ctree.prob = 1- unlist(treeresponse(train_tree,testset), use.names=F)[seq(1,nrow(testset)*2,2)]\n",
        "\n",
        "#2.Install and load the ROCR package:\n",
        "install.packages(\"ROCR\")\n",
        "require(ROCR)\n",
        "\n",
        "#3. Create an ROCR prediction object from probabilities:\n",
        "train.ctree.prob.rocr = prediction(train.ctree.prob,testset$Survived)\n",
        "\n",
        "#4 Prepare the ROCR performance object for the ROC curve (tpr=true positive\n",
        "#rate, fpr=false positive rate) and the area under curve (AUC)\n",
        "\n",
        "train.ctree.perf = performance(train.ctree.prob.rocr,\"tpr\",\"fpr\")\n",
        "train.ctree.auc.perf = performance(train.ctree.prob.rocr,measure = \"auc\", x.measure = \"cutoff\")\n",
        "\n",
        "#5.Plot the ROC curve, with colorize as TRUE, and put AUC as the title:\n",
        "plot(train.ctree.perf, col=2,colorize=T, main=paste(\"AUC:\",train.ctree.auc.perf@y.values))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "fc21fb89-0035-07a7-26fc-7b95af2f607c"
      },
      "outputs": [],
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "9633d70b-5e1b-8f3e-0c86-4568ca4c3362"
      },
      "source": [
        "null![enter image description here][1]\n",
        "\n",
        "\n",
        "  [1]: http://Missing%20Values"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}