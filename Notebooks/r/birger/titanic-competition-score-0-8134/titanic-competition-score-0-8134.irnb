{"nbformat": 4, "nbformat_minor": 0, "metadata": {"language_info": {"name": "R", "version": "3.4.0", "mimetype": "text/x-r-source", "file_extension": ".r", "codemirror_mode": "r", "pygments_lexer": "r"}, "kernelspec": {"display_name": "R", "name": "ir", "language": "R"}}, "cells": [{"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "0a297dea-1b15-46f6-bc1f-c5c8203ff96c", "_uuid": "7b2814e735d5ab6d50169acbd166adaf878128e7"}, "source": "# Predicting the survival rate of the Titanic disaster\nScore on Public Leaderboard: 0.81340\n\n## Step 1 - collecting data", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "_cell_guid": "4c01bfd9-ca5b-4fbf-8fd1-59de773e396c", "_uuid": "b8b19e261e8798a0c2940e621a32fd46c5b0ec13"}, "source": "suppressMessages(library('ggplot2')) # visualization\nsuppressMessages(library('ggthemes')) # visualization\nsuppressMessages(library('scales')) # visualization\nsuppressMessages(library('dplyr')) # data manipulation\nsuppressMessages(library('mice')) # imputation\nsuppressMessages(library('randomForest')) # classification algorithm", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "eb51e6ad-a9f4-4423-b640-4402b0b79914", "_uuid": "b4ed2adcdd1ba6a4ba630cc98f15b0a80bb52854"}, "source": "train <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\nfull  <- bind_rows(train, test)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "33852db5-1b77-4575-9bd6-beab8c521cf0", "_uuid": "dccf305aec8c3d6e647b5389837ae5014f8b47ed"}, "source": "## Step 2 - exploring and preparing the data", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "bac57e7e-644a-49b9-a1cd-f1eb1ce9142c", "_uuid": "02df414d1d8512dc63ab0b1ce023f64ae001b893"}, "source": "# check data\nstr(full)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "d2a3b00d-c2ba-4f1f-95ac-a640126dacb2", "_uuid": "e9a92961395257512a9359e66130ab5a68eb8a2a"}, "source": "### Looking for missing data", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "337ff92a-6408-471b-a4a3-51e935e95dc1", "_uuid": "77cbfc747dfd6035bac42f05e64ac4a84c8ee84c"}, "source": "full[full==''] <- NA\nsapply(full, function(x) sum(is.na(x)))", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "0ee408c6-bb86-46b8-bea8-b9a2cef93b3e", "_uuid": "3796947aa5372bec074943c89e2108da74672418"}, "source": "### Passenager Names", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "fc6a1ef0-953d-4fb4-b163-2ab21d6d3bbe", "_uuid": "0c7a71ba2dd308b66b15b7bf14ac4182f999629b"}, "source": "# Grab title from passenger names\nfull$Title <- gsub('.*, ([^.]*)\\\\..*', '\\\\1', full$Name)\n\n# Title vs Survivor\ntable(full$Title, full$Survived)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "fd65fb7b-8642-4293-adb6-ed7abe674a65", "_uuid": "18399c0bf26a25e372c12857cc983c5d57e3c001"}, "source": "# Replace rare titles\nfull$Title[full$Title == 'Mlle'] <- 'Miss'\nfull$Title[full$Title == 'Ms'] <- 'Miss'\nfull$Title[full$Title == 'Mme'] <- 'Mrs'\n# Group rare Title to officer and royalty\nofficer <- c('Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev')\nroyalty <- c('Dona', 'Lady', 'the Countess','Sir', 'Jonkheer')\nfull$Title[full$Title %in% officer] <- 'officer'\nfull$Title[full$Title %in% royalty] <- 'royalty'\n\n# Show title counts by sex\ntable(full$Sex, full$Title)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "f2e56aec-b51a-42c0-bdfb-afb0bbf83c3c", "_uuid": "47a9a2124f08ce405e317ffb8e596dadc3ed6a3e"}, "source": "# Get Surnames\nfull$Surname <- gsub('([^,]*),.*', '\\\\1', full$Name)\nstr(factor(full$Surname))", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "80265436-ef9e-4876-ad28-9005e015ff8a", "_uuid": "8a10c58f516aad240b3968537f736750981ccbef"}, "source": "### Cabins and Decks\nThere are 1014 out of 1309 cabins missing. Let's reduce the cabin to the deck it is on (1st letter).", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "e5ef1cef-8cc1-4fa6-93f6-653cf1776492", "_uuid": "b699b7b5a865cde3d086c846de63059fa09b8600"}, "source": "full$Deck <- sapply(as.character(full$Cabin), function(x) strsplit(x, NULL)[[1]][1])\n# Replace NA with 'U' (Unknown)\nfull <- within(full,\n   Deck <- ifelse(is.na(Deck),'U',Deck)\n)\n# Group upper, middle and lower decks\nfull$Deck[full$Deck == 'A' | full$Deck == 'B'] <- 'upper_deck'\nfull$Deck[full$Deck == 'C' | full$Deck == 'D'] <- 'middle_deck'\nfull$Deck[full$Deck == 'E' | full$Deck == 'F' | \n          full$Deck == 'G' | full$Deck == 'T'] <- 'lower_deck'\n    \nfull$Deck <- factor(full$Deck)\n    \nprint(summary(full$Deck))", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "fb8ea5a9-f577-4681-ad1b-1c547493e3b9", "_uuid": "bddd1d6a41f754b1f81aee18f8abafa58f853c56"}, "source": "### Family structure", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "2d17cd9a-52bc-43a6-9dd6-f5df59045ec3", "_uuid": "fdc23dc8ecff900cb6bb1bf7c36c828aeb18728a"}, "source": "# Familie size: siblings + spouses + parents + children + Passenger themselve\nfull$Fsize <- full$SibSp + full$Parch + 1\n\n# Group also people in the same cabin with family size == 1\ncabins <- full$Cabin\nn_occur <- data.frame(table(Var1=cabins))\nn_occur <- subset(n_occur, nchar(as.character(Var1)) > 1)\n\nsharedCabins <- n_occur$Var1[n_occur$Freq > 1]\n\nsharedInd <- full$Fsize == 1 & full$Cabin %in% sharedCabins\nfull$Fsize[sharedInd] <- 2", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "9b91fb5b-3c21-4181-8d42-1f35418dcf5d", "_uuid": "71bee2b2e1d1d57a8e2ff6984b5648f5fa2c9522"}, "source": "# Concatenate surname w/ family size\nfull$Family <- paste(full$Surname, full$FsizeAdj, sep='_')\n\n# Plot Family Size vs Survivor\nggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:11)) +\n  labs(x = 'Family Size') +\n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "aee29b1f-51a7-4d85-9f2a-beacc3834d3a", "_uuid": "732555707e23a06fd24f2ac27b0cba8cbbb5c94a"}, "source": "# Discretize family size\nfull$FsizeD[full$Fsize == 1] <- 'singleton'\nfull$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$FsizeD[full$Fsize > 4] <- 'large'\n\n# Show family size by survival using a mosaic plot\nmosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "ab75ce64-74d3-46dc-bb10-720c6f041eaf", "_uuid": "7a03ada6e09dd671c23424f2e1ceed381789df7d"}, "source": "### Port of Embarkation and Passenger Fare\nC = Cherbourg, Q = Queenstown, S = Southampton", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "00e54fbb-1116-4d50-bf3c-13a841446608", "_uuid": "0730fc10ecd1618724e4dd02fb6f5d363b05da48"}, "source": "# There are missing values\nstr(factor(full$Embarked))\nfull$PassengerId[full$Embarked == '']\nfull$Pclass[full$Embarked == '']\n\nggplot(full, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), \n    colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous(labels=dollar_format()) +\n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "6aace4fc-9f8c-45df-b218-455c3bf82c07", "_uuid": "c45cf711b53eb211689e364db71264d71afd9a0a"}, "source": "# Missing values are both class 1; safe to say they embark in Cherbourg\nfull$Embarked[c(62, 830)] <- 'C'", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "feb55c0e-4df5-4515-a11d-17951d97dfff", "_uuid": "b0f0da7ccdb6cb21c8d97c91123e9cab628447ee"}, "source": "# There are missing values\nstr(factor(full$Fare))\nfull$PassengerId[is.na(full$Fare) == TRUE]\n\nggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n  aes(x = Fare)) +\n  geom_density(fill = '#99d6ff', alpha=0.4) + \n  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n    colour='red', linetype='dashed', lwd=1) +\n  scale_x_continuous(labels=dollar_format()) +\n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "64dad794-554e-4762-bca4-854e03a76e23", "_uuid": "3d821f1091ed508282b7d4d9c4b44b252da7d0e1"}, "source": "# Replace missing fare value with median fare for class/embarkment\nfull$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "5c775b4e-4849-40e6-943e-e6ba898012b7", "_uuid": "942261f58b5d0ea37f3397539fec3adf92af96d3"}, "source": "### Age", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "001a61d4-44e1-436c-8708-1091012a3911", "_uuid": "0ecd47994686490a80a61e0a7c75473c4624382e"}, "source": "# First we'll look at the relationship between age, title & survival\nggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Title) + \n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "3ef23ab4-6058-40e9-ac16-a341971a6040", "_uuid": "26b3e29c8394645d1b4d80d0e9ee11ccb2629b67"}, "source": "# Show number of missing Age values\nsum(is.na(full$Age))\n\n# We know 'Masters' are young boys\nsum(is.na(full$Age[full$Title == 'Master']))\nsummary(full$Age[full$Title == 'Master'])\nfull$Age[is.na(full$Age) & full$Title == 'Master'] <- 4", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "3c4533e0-b32a-473a-b09f-b83ac5d9bfdd", "_uuid": "5dda397cd5adcece5300fa6055f33d7cf6b64efd"}, "source": "# Make variables factors into factors\nfactor_vars <- c('PassengerId', 'Pclass','Sex','Embarked', 'Deck',\n                 'Title','Surname','Family','FsizeD')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n\n# Perform mice imputation, excluding certain less-than-useful variables:\n#mice_mod <- mice(full[, !names(full) %in% c('Name','Ticket','Family','Surname','Survived')], method='rf') \nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived', 'Deck')], method='rf') \n    \n# Save the complete output \nmice_output <- complete(mice_mod)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "1f92ef49-f320-4673-91fe-79932037f1ca", "_uuid": "db041a5c21b5e4d0c7840bf948dba740e0ed61ff"}, "source": "# Plot age distributions\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen', ylim=c(0,0.04))", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "156ce800-e259-4381-a9a0-a5f6829d1dd5", "_uuid": "4d51a98693f9155d2283799228790c28ccc4ff5f"}, "source": "# Replace Age variable from the mice model.\nfull$Age <- mice_output$Age\n\n# Show new number of missing Age values\nsum(is.na(full$Age))", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "8eea2ead-f061-44e2-bdf5-1a745cb9effb", "_uuid": "5741eb3a484f62bfbe3f8f8530638df341fbb6ee"}, "source": "# First we'll look at the relationship between age & survival\nggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Title) + \n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "f32f0d53-e923-4c4a-8f61-bd2069ea6a24", "_uuid": "38f4187a0e36d2efc65b11eeebc875e0f3d0b31e"}, "source": "# First we'll look at the relationship between age & survival\nggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "a101473e-4ec2-4060-a974-1a1ee57f93c1", "_uuid": "a6b3829d4e8f11190324f5957eb2887e377e343f"}, "source": "# Create the column child, and indicate whether child or adult\nfull$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\n\n# Show counts\ntable(full$Child, full$Survived)\n\n# Adding Mother variable\nfull$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n\n# Show counts\ntable(full$Mother, full$Survived)\n\n# Finish by factorizing our two new factor variables\nfull$Child  <- factor(full$Child)\nfull$Mother <- factor(full$Mother)\n\nmd.pattern(full)", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "011198d8-345b-4688-a6ed-cb47b5b70851", "_uuid": "ef062d8e70f1a62f2336f9edddb37638588e151d"}, "source": "## Step 3 \u2013 training a model on the data", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "59107249-956e-4cd0-b1d3-fefe2cf1c60c", "_uuid": "b17b8beb34059b04f14b7c035191c7c1e3405d88"}, "source": "# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]\n\n# Set a random seed\nset.seed(754)\n\n# Build the model (note: not all possible variables are used)\n# Accuracy: 0.80861\n# rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + \n#                                            Fare + Embarked + Title +\n#                                            FsizeD + Child + Mother +\n#                                            Deck,\n#                                            data = train)\n\n# Reduce variables further to avoid overfitting\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare +  \n                                            Embarked + Title + FsizeD + Child,\n                                            data = train)\n\n#Pclass + Sex + Fare + Embarked + Title + \n#                           FsizeD + Child", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "c4c4d446-c847-451b-adb6-bb66f486c1df", "_uuid": "46a9d6880712668c529e00a4febbff3dd3343408"}, "source": "# Get importance from random forest model\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()", "cell_type": "code", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "collapsed": false, "_cell_guid": "ea60023b-c89f-4fa6-85ec-5e206b6c0eb9", "_uuid": "ea22612b0c0c78b05cc0dc33b57e165d2e1abb52"}, "source": "## Step 4 \u2013 evaluating model performance", "cell_type": "markdown", "outputs": []}, {"execution_count": null, "metadata": {"_execution_state": "idle", "trusted": false, "collapsed": false, "_cell_guid": "9c20b0ce-c225-408e-9f78-52e81cfefe2e", "_uuid": "49c70ecd1cd99687ab83a8ddbeb8cd9bd741c1f5"}, "source": "# Predict using the test set\nrf_prediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nrf_solution <- data.frame(PassengerID = test$PassengerId, Survived = rf_prediction)\n\n# Write the solution to file\nwrite.csv(rf_solution, file = 'Titanic_rf_Solution.csv', row.names = F)", "cell_type": "code", "outputs": []}]}