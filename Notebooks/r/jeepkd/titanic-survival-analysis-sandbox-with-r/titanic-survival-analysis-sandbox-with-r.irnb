{
  "metadata": {
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "_cell_guid": "12cf559e-5390-36aa-14bf-d83a2c8e62b3",
        "_active": false,
        "collapsed": false
      },
      "outputs": [],
      "source": "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(dplyr) # data manipulation\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.",
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "5078e210-d110-0593-faf0-db302475de65",
        "_active": false,
        "collapsed": false
      },
      "source": "train <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\nfull <- bind_rows(train, test)\n\n# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Show title counts by sex\ntable(full$Sex, full$Title)",
      "execution_count": 2,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "4effc6dd-2fb8-9df6-dabd-0fb4b0430c77",
        "_active": false,
        "collapsed": false
      },
      "source": "# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n# Show title counts by sex again\ntable(full$Sex, full$Title)",
      "execution_count": 3,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "971feb04-7f61-a8aa-e6b7-82d1a0fa6698",
        "_active": false,
        "collapsed": false
      },
      "source": "# Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name,  \n                      function(x) strsplit(x, split = '[,.]')[[1]][1])",
      "execution_count": 4,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "f6dec615-3bc7-aa61-4cc0-86c224c60619",
        "_active": false,
        "collapsed": false
      },
      "source": "# Create a family size variable including the passenger themselves\nfull$Fsize <- full$SibSp + full$Parch + 1\n\n# Create a family variable \nfull$Family <- paste(full$Surname, full$Fsize, sep='_')",
      "execution_count": 5,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    },
    {
      "metadata": {
        "_cell_guid": "d586406e-525d-2b92-006f-a4c4fa9e2486",
        "_active": true,
        "collapsed": false
      },
      "source": "full %>%\n    gu",
      "execution_count": 7,
      "cell_type": "code",
      "outputs": [],
      "execution_state": "idle"
    }
  ]
}