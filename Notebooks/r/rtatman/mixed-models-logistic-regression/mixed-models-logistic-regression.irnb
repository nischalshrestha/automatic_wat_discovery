{"cells":[{"metadata":{"_uuid":"bb2c2e0cefb711face445b01348f035f7db6316f"},"cell_type":"markdown","source":"This is a super quick primer on mixed model (also called multi-level) logistic regression. Here, I'm going to be pretending that I'm a data scientist working for the White Star line trying to figure out how we can improve saftey on other ships by figuring out whether there was an effect of ticket class (1st, 2nd or 3rd) on mortality. That information can then be used to figure out where more lifeboats and other saftey features should be put. \n\n____\n\nHere's the general work flow we'll be following.\n\n1. **Select dependent variable**. In this case, we're interested in whether or not someone survived. \n2. **Select fixed variables**.  I'm most interested in ticket class. \n3. **Select random variables**. I'm less interested in other social factors that could be affecting mortality (like age or gender) because as a shipping line we don't really have control over user demographics.\n4. **Fit model.** Also make sure to [check regression assumptions](https://www.kaggle.com/rtatman/regression-challenge-day-2).\n5. **Check for intraclass correlation of random variables.** Make sure that the groups we're using as random variables actually tend to group together. \n6. **Analyze model output**. Figure out what we've learned from our model.\n"},{"metadata":{"_uuid":"3db89742a38aef7f47842db2f2c42b861d64417e"},"cell_type":"markdown","source":"## Set up\n____\n\nRead our data in & do some pre-processing"},{"metadata":{"_uuid":"f3d8f0dcc9e2d09c8efe5035de6df43acf5fd528","_execution_state":"idle","trusted":true,"_kg_hide-output":true},"cell_type":"code","source":"library(tidyverse) # handy utility functions\nlibrary(lme4) # mixed effects modelling\nlibrary(sjPlot) # vis package for mixed effects models\nlibrary(sjstats) # for intraclass-correlation coefficient\nlibrary(caret) # model comparison & utility functions","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"edc6a586b148b77aa0cbafda58a8732c0f5e3944","_kg_hide-input":false,"_kg_hide-output":true},"cell_type":"code","source":"# do some basic data preperation\n# read in our data\ntitanic_data <- read_csv(\"../input/train.csv\")\n\n# make sure class is a factor\ntitanic_data$Pclass <- as.factor(titanic_data$Pclass)\n\n# remove unknown ages\ntitanic_data <- titanic_data %>%\n   filter(!is.na(Age)) \n\n# convert age to a grouping factor (child, adult, elderly)\ntitanic_data$AgeGroup <- case_when(titanic_data$Age <= 18 ~ \"child\", \n         titanic_data$Age > 18 &  titanic_data$Age <= 60 ~ \"adult\", \n         titanic_data$Age > 60 ~ \"elder\")\n\n# split into test & training data\nsmp_size <- floor(0.75 * nrow(titanic_data))\n\n## set the seed to make your partition reproducible\nset.seed(123)\ntrain_ind <- sample(seq_len(nrow(titanic_data)), size = smp_size)\n\ntrain <- titanic_data[train_ind, ]\ntest <- titanic_data[-train_ind, ]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c2e09e74e7ca63bafb80b5304f2fc2747db86ce4"},"cell_type":"markdown","source":"## Fit & evaluate models\n___\n\nHere I'll be training both a flat model & a mixed model."},{"metadata":{"trusted":true,"_uuid":"4a10fae09c6c4e9998a275c325a60d73244e0bd6"},"cell_type":"code","source":"flat_model <- lm(Survived ~ Pclass + AgeGroup + Sex, data = train)\nsummary(flat_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6bd393303f15132e38e45d68f94a6939a5c3441a"},"cell_type":"code","source":"# qqplot, points should more or less trace the line\nplot(flat_model, which = 2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2087eeaf4f62bf8c15c607747409d96ca0d17f5f"},"cell_type":"code","source":"mixed_model <- lmer(Survived ~ Pclass + (1|AgeGroup) + (1|Sex), data = train)\nsummary(mixed_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f99a64db9969d5096b1065cf4b01cebf97d85f07"},"cell_type":"code","source":"# qqplot (points should be near the center line)\nsjp.glmer(mixed_model, type = \"re.qq\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6b88a21cfbdedd9a29b687d8943037ac8d7ecf1b"},"cell_type":"markdown","source":"## Check the ICC\n____\n\nWe want the ICC for all our random effects to be far from 0. (It's a correlatoin, so it will be between 0 and 1.) You [can find more information here](https://www.kaggle.com/rtatman/intraclass-correlation-coefficients-example)."},{"metadata":{"trusted":true,"_uuid":"97c7085547d146d730b28ad64e10d517badc8101"},"cell_type":"code","source":"icc(mixed_model)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"890dfa236f5a40ea52bd00c7fe40a0097ae63add"},"cell_type":"markdown","source":"## Analyze the model\n____\n\nI like the plot_model function from sjPlot."},{"metadata":{"trusted":true,"_uuid":"05ddd9ba697ce9aeafbb31ed5287ebbcd38b35a0"},"cell_type":"code","source":"plot_model(flat_model, show.values = TRUE, value.offset = .3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9d3423dbcab6d8908d463978945a5ef9b9697949"},"cell_type":"code","source":"plot_model(mixed_model, show.values = TRUE, value.offset = .3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d0d0ac296299eff1d1a37029d0a9890e448ed610"},"cell_type":"code","source":"sjp.lmer(mixed_model)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"03cba818ed04bbf2beb99d7dbcb4069c9fd1bd5d"},"cell_type":"markdown","source":"## Use models for prediction\n___\n\nFinally, because this is Kaggle, let's do a little bit of prediction. In this case, the mixed model does not change our predictions, but it does tell us that age group probably isn't that important when we control for other variables."},{"metadata":{"trusted":true,"_uuid":"e72b3a08935dadb4e1c9cf162d72179093a47841"},"cell_type":"code","source":"# flat model predictions\nconfusionMatrix(predict(flat_model, newdata = test) > 0.5, \n                as.logical(test$Survived))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7047cfd51b63e65f0ec84a269e7eb7d5e5eef3a0"},"cell_type":"code","source":"# mixed model predictions\nconfusionMatrix(predict(mixed_model, newdata = test) > 0.5, \n                as.logical(test$Survived))","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}