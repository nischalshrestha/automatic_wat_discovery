{"nbformat": 4, "cells": [{"source": "\n## I have read many tutorial for predicting survival in Titanic. In my opinion, the most favourite /best tutorial is from Ozan Aygun https://www.kaggle.com/dataygun/let-s-run  (I am a newbie, and I am sorry that I do not know how to put the name with the link ) . However, this is my own practice based on what I understand from the data.\n\n# The Titanic analysis is progressing in 3 steps:\n\n #1) Reading Data : This step shows \" train & test \" data , and types of variables in data. From there, I explore what should I do with specific variable in data.\n\n # 2) Data pre-processing\n\n# 2a. Missing value : all features need to be imputed before feature engineering\n\n# 2b. Feature engineering with Name and Ticket variables\n\n# 2c. Checking the relationship of all features with \"Survived\"\n\n# 2d. Checking continuous variables\n \n# 3) Modeling\n\n## 1 Reading Data\n\nlibrary(party)\nlibrary(arules)\nlibrary(arulesViz)\nlibrary(e1071)\ntraining <- read.csv('../input/train.csv', stringsAsFactors = F)\ntesting  <- read.csv('../input/test.csv', stringsAsFactors = F)\ndim(training)\nnames(training)\ndim(testing)\nnames(testing)# There is no \"Survived\" in testing data\ntesting$Survived <- NA\n\ncombi <- rbind(training, testing)\nstr(combi) # The structure is not good - there are not any factor variables.\ncombi[sapply(combi, is.character)] <- lapply(combi[sapply(combi, is.character)], as.factor) # convert character to factor\ncombi[sapply(combi, is.integer)] <- lapply(combi[sapply(combi, is.integer)], as.factor) # convert integer to factor\nstr(combi) # Now the type of all variable look better\n\n\n## 2 Data Exploring\n#a. Missing value\n\nsummary(combi)# There are 3 variables need to be imputed : Age, Embarked, and Fare. The feature \"Cabin\" is dropped, because the amount of missing value is bigger than 50% of the total.\n\n## Imputing Age & Fare by using mean & median\nAge <- mean(combi$Age[!is.na(combi$Age)])\ncombi$Age[is.na(combi$Age)] <- Age\n\nwhich(is.na(combi$Fare))\ncombi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)\n\n## \"Embarked\" is a factor variable, so it will be imputed by the most frequency factor\nsummary(combi$Embarked)\nwhich(combi$Embarked == '') \ncombi$Embarked[c(62,830)] = \"S\" # replace those two with \"S\"\nsummary(combi)\n\n\n## 2b.Feature engineering with Name and Ticket variables.\n#The \"Name\" variable has strings, which are not good for my model, as well as, the \"Ticket\" also has both of number and character.\n   \nName <- as.character(combi$Name)\ncombi$Title<-sapply(Name,FUN=function(x) {strsplit(x,split='[,.]')[[1]][2]}) # just take a gender of \"Name\"\n\ntable(combi$Title)# there are a few titles, that could not make the model to work well, so let's combine a few of the most unusual ones.\n\ncombi$Title[combi$Title %in%c('Mme', 'Mlle')] <- 'Mlle'\ncombi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir' \ncombi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\ncombi$Title <- factor(combi$Title)# Finally, change the variable to factor\ncombi<-combi[,!(colnames(combi) %in% c(\"Name\",\"Cabin\"))]# drop \"Name\" & \"Cabin\"\n## \"Ticket\"\nsummary(combi$Ticket) # This feature is so complicated for me, because the most frequency factor is \"Other\": 947, and the frequency others look not too much. So, before dropping this feature, I decide to use Market Basket Analysis to emphasis How important of \"Ticket\".\n\n## 2c. Checking the relationship of all featuers with Survived\n\ntrans <- combi[1:891,-1]\ntrans$Age <-discretize(trans$Age, method = \"frequency\", 3) # Continuous variables need to be binned / discretized\ntrans$Fare <- discretize(trans$Fare, method = \"frequency\", 3)\n\nstr(trans)\ntransf<- as(trans,\"transactions\")\nitemFrequencyPlot(transf, topN=25,  cex.names=.5)\n\nrules <- apriori(transf,parameter = list(minlen=2, supp=0.005, conf=0.8),appearance = list(rhs=c(\"Survived=0\", \"Survived=1\"),default=\"lhs\"),control = list(verbose=F))\nrules.sorted <- sort(rules, by=\"lift\")\ninspect(rules.sorted)\n# find redundant rules\nsubset.matrix <- is.subset(rules.sorted, rules.sorted)\nsubset.matrix[lower.tri(subset.matrix, diag=T)] <- NA\nredundant <- colSums(subset.matrix, na.rm=T) >= 1\nwhich(redundant)\n# remove redundant rules\nrules.pruned <- rules.sorted[!redundant]\ninspect(rules.pruned[1:20]) # top 20 rules\n# In conclusion of stage 2c, the \"Ticket\" can be dropped\n\n## 2d.Checking continuous variables\nhist(combi$Age) # it seems like there is a small skew here\nsummary(combi$Age)\nskewness(combi$Age)# the skew is acceptable\n\nhist(combi$Fare) # very skew\nsummary(combi$Fare)\nskewness(combi$Fare)# a clear positive skew\nkurtosis(combi$Fare)\n\ncombi$Fare=log10(combi$Fare+1) # solving skewness\nsummary(combi$Fare)\nhist(combi$Fare)\nskewness(combi$Fare)\nkurtosis(combi$Fare) \n\n## 3 Modeling\ncombi<-combi[,!(colnames(combi) %in% c(\"Ticket\"))]\nstr(combi)\ntrain <- combi[1:891,]\ntest <- combi[892:1309,]\nset.seed(123)\nfit <- cforest(Survived~ .,data = train,controls=cforest_unbiased(ntree=2000, mtry=3))\nPrediction <- predict(fit, test, OOB=TRUE, type = \"response\")\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\n\nwrite.csv(submit, file = \"mytitanic.csv\", row.names = FALSE)\n", "outputs": [], "cell_type": "code", "execution_state": "idle", "metadata": {"_uuid": "8ae1ce329e8555a29f52506a559e56335f122fbb", "_active": false, "_cell_guid": "1fef5d73-ddb0-855e-b01e-5028db641008", "collapsed": false}, "execution_count": null}], "metadata": {"kernelspec": {"language": "R", "display_name": "R", "name": "ir"}, "language_info": {"file_extension": ".r", "version": "3.4.0", "codemirror_mode": "r", "mimetype": "text/x-r-source", "name": "R", "pygments_lexer": "r"}}, "nbformat_minor": 0}