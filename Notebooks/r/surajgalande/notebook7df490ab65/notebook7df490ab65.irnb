{"nbformat": 4, "metadata": {"kernelspec": {"display_name": "R", "name": "ir", "language": "R"}, "language_info": {"version": "3.4.1", "codemirror_mode": "r", "name": "R", "pygments_lexer": "r", "mimetype": "text/x-r-source", "file_extension": ".r"}}, "cells": [{"source": "Learning the Survivals of Titanic", "metadata": {"_execution_state": "idle", "_cell_guid": "acf0813e-196d-4802-8901-ff9f22da7929", "_uuid": "3b1ccf73a0e8415e4c97b730bae403ff2784161f", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "markdown"}, {"source": "library(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(ggthemes) # visualization\nlibrary(scales) # visualization\nlibrary(dplyr) # data manipulation\nlibrary(mice) # imputation\nlibrary(randomForest) # classification algorithm\n\ntrain <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\nfull  <- bind_rows(train, test)\n\nstr(full)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "bad22257-42cf-4ea3-b13b-bab0ca445141", "_uuid": "9daa4d294e52c6c88d48c5b7ea384e892ab9cb0e"}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "full$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\ntable(full$Sex, full$Title)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "d2a56285-f276-4690-b934-78e1665b078a", "_uuid": "dec6ca4a7f8d8fb3fd2b0325509791fc71fcf976", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "#Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\ntable(full$Sex, full$Title)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "ed2961fc-59ff-484a-b2f0-f417c43221db", "_uuid": "841bd716c7d3a9a2ed680776ce5be018eef0b12c", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name,  \n                      function(x) strsplit(x, split = '[,.]')[[1]][1])", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "00065433-2a81-4730-b3da-c5ad4c08cc36", "_uuid": "f21dcc03bd0655429cecf8999ba3df744d08bca6", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "full$FSize <- full$SibSp + full$Parch + 1\n\nfull$Family <- paste(full$Surname, full$FSize, sep='_')", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "63eb3cd7-ea3a-4682-acbb-513743d06c25", "_uuid": "849b0b7f66de084455b63efbe2068b3d5b8fb71f", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Use ggplot2 to visualize the relationship between family size & survival\nggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived)))+\ngeom_bar(stat='count', position='dodge')+\nscale_x_continuous(breaks=c(1:11))+\nlabs(x = 'Family Size')+\ntheme_few()", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "59a54474-f56d-4516-b3b6-02c9493f92c3", "_uuid": "acfd16562f567e24eb47bf04c30bca9a27f86984", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Discretize family size\nfull$FsizeD[full$FSize == 1] <- 'singleton'\nfull$FsizeD[full$FSize < 5 & full$FSize > 1] <- 'small'\nfull$FsizeD[full$FSize > 4] <- 'large'\n\n# Show family size by survival using a mosaic plot\n#mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "fe042a7b-2c92-4775-89b0-43bcb40e6d65", "_uuid": "8d55e01266d6ac9fa767f36bf5dd760facdd8fa6", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "e7b4bfa9-839c-46e3-9713-7b31d3f38060", "_uuid": "71caeb81ef8ad7744df663b19ef91f119975c378", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Create a Deck variable. Get passenger deck A - F:\nfull$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))\n", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "193a2b8e-1eb4-45be-af93-1ce7509afac2", "_uuid": "cfad3f0f96c79dcaa7a42ff4a3f21af376fb60e3", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "embark_fare <- full %>%\n  filter(PassengerId != 62 & PassengerId != 830)\n\n# Use ggplot2 to visualize embarkment, passenger class, & median fare\nggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), \n    colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous(labels=dollar_format()) +\n  theme_few()", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "2860ccba-5968-47ca-9f02-9f919b40afa7", "_uuid": "f37bfb2941d88f317a9bc7e904a24a6cd2180450", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n  aes(x = Fare)) +\n  geom_density(fill = '#99d6ff', alpha=0.4) + \n  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n    colour='red', linetype='dashed', lwd=1) +\n  scale_x_continuous(labels=dollar_format()) +\n  theme_few()", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "05a3029c-68a2-4d8b-a023-820459a1243a", "_uuid": "8bc24392837b9733f4f681eaf653fa85fdb832a9", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Since their fare was $80 for 1st class, they most likely embarked from 'C'\nfull$Embarked[c(62, 830)] <- 'C'\n\n# Replace missing fare value with median fare for class/embarkment\nfull$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "107dcfb5-1d1a-4f4c-b0df-bc162b7ca654", "_uuid": "97bd04c995db14ad8e19edaa522e37c913e9111e", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "factor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n                 'Title','Surname','Family','FsizeD')\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n    \n# Perform mice imputation, excluding certain less-than-useful variables. To replace empty age entries with values:\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf') \n\n# Save the complete output \nmice_output <- complete(mice_mod)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "1e9b3329-65aa-4372-8425-2309ed2570e9", "_uuid": "a4eb53fd15a13143c0cc335b43e52ece7f68d14a", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Plot age distributions\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen', ylim=c(0,0.04))", "metadata": {"trusted": false, "_execution_state": "busy", "_cell_guid": "280b93d6-504d-400d-947d-f4dfb32ebe1b", "_uuid": "a1c3c4528969737d8efb2caede9535492eb3f845", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "#replace mice output age with full age\nfull$Age <- mice_output$Age\n\nsum(is.na(full$Age))", "metadata": {"trusted": false, "_execution_state": "busy", "_cell_guid": "49802fce-ae1b-45a2-83a5-536095391d49", "_uuid": "d621763569d6f377ac36cc415744e87d001fa5a8", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# First we'll look at the relationship between age & survival\nggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n  theme_few()", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "69e2ae90-aeeb-4013-8beb-b53218b2b5b8", "_uuid": "22bde4d5603e42abe5c98a5b47a0ff7489f1a47f", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "full$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\n\ntable(full$Child, full$Survived)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "5c8823bb-8c73-4680-bb2b-c7d616af8651", "_uuid": "7430b0450b7c8afd75af1857be1a2a9cf579f8f2", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "full$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss' ] <- 'Mother'\ntable(full$Mother, full$Survived)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "0b66d5c5-d71b-4323-804b-dff5c2014137", "_uuid": "64ead7bc46cf9da419bcc9ee8e3ead8dc7f87ea7", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Finish by factorizing our two new factor variables\nfull$Child  <- factor(full$Child)\nfull$Mother <- factor(full$Mother)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "2240d4e8-5111-4e2f-b616-f5f3a81d08ca", "_uuid": "9a6b4d7fe19e63abfac92e45ff5b783c5763bfcf", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Double check data for NAs:\nmd.pattern(full)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "86b67c9b-6ac3-44b5-8d8e-5a44479a24a7", "_uuid": "2ce2e7ba05c4ce5745cde7859fd57ad7914e16ec", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "#At last we\u2019re ready to predict who survives among passengers of the Titanic based on variables that we carefully curated and treated for missing values. For this, we will rely on the randomForest classification algorithm; we spent all that time on imputation, after all.\n\n#Prediction:\n\n# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]\n\n# Set a random seed\nset.seed(754)\n\n#Build the model using \"Random Forest\"\n# Build the model (note: not all possible variables are used)\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + \n                                            Fare + Embarked + Title + \n                                            FsizeD + Child + Mother,\n                                            data = train)\n\n# Show model error\nplot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)\n", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "07f0f084-0fea-4cad-9ac7-e4fad462b047", "_uuid": "7e13abd237c1c71cd7adcd845509c964622bf913", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "#Let\u2019s look at relative variable importance by plotting the mean decrease in Gini calculated across all trees\n# Get importance\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\nrankImportance", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "fffdf8ba-0311-48cb-bb24-8f722c0b421a", "_uuid": "35eeb4edcac3ab690857982d1b924f7d7d2ee455", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +  \n  coord_flip() +\n  theme_few()", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "52c7a149-333a-4b01-8caa-86efe953c216", "_uuid": "3b1a73eb0ada4f0ade3d4406c87b2b41401f3ac8", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}, {"source": "# Predict using the test set\nprediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# Write the solution to file\nwrite.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)", "metadata": {"trusted": false, "_execution_state": "idle", "_cell_guid": "d596f328-0132-43af-a275-e56a70d4a214", "_uuid": "b96244a94584b8c2e394dbe59dcc1c6529c9c78e", "collapsed": false}, "outputs": [], "execution_count": null, "cell_type": "code"}], "nbformat_minor": 0}