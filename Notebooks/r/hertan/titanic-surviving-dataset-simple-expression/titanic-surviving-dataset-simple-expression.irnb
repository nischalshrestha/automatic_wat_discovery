{"metadata": {"language_info": {"mimetype": "text/x-r-source", "pygments_lexer": "r", "codemirror_mode": "r", "name": "R", "file_extension": ".r", "version": "3.4.1"}, "kernelspec": {"language": "R", "name": "ir", "display_name": "R"}}, "nbformat": 4, "nbformat_minor": 0, "cells": [{"metadata": {"collapsed": false, "_cell_guid": "c477f327-2289-4f4d-954c-f3f608473e01", "_uuid": "ad0c4507569fb6c89cc8614b39c5e20fcf3c5355", "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "**TITANIC DATASET - FEATURE EXTRACTION AND VISUALISATION**", "cell_type": "markdown"}, {"execution_count": null, "source": "library('dplyr') # Data proceesing\nlibrary('randomForest') # Model creating\nlibrary('ggplot2') # Data visualization\nlibrary('mice') # Imputation\n\n# First of all, get the data:)\n\npath <- \"../input/\"\ntrain.df <- read.csv(paste0(path,\"train.csv\"), na.strings=c(\"\"), stringsAsFactors = FALSE)\ntest.df <- read.csv(paste0(path,\"test.csv\"), na.strings=c(\"\"), stringsAsFactors = FALSE)\n\nall.df <- bind_rows(train.df,test.df)\n\n# factorizing features\nall.df$Survived <- as.factor(all.df$Survived)\nall.df$Pclass <- as.factor(all.df$Pclass)\nall.df$Sex <- as.factor(all.df$Sex)\nall.df$Embarked <- as.factor(all.df$Embarked)\n# we will try to infer meaningful info from the features below, so using character data type for them\nall.df$Cabin <- as.character(all.df$Cabin)\nall.df$Name <- as.character(all.df$Name)\nall.df$Ticket <- as.character(all.df$Ticket)\n\n#separating train and test data inside the combined data\nall.df$Set <- 'Train'\nall.df[892:1309,]$Set <- 'Test'\n\n\n\n\n", "cell_type": "code", "metadata": {"collapsed": false, "trusted": false, "_cell_guid": "c022d319-5dd1-7a4a-87d9-b5294b7fa997", "_active": false, "_uuid": "55ad0fe2b4147244ab69f4f1ecc65ea15e5d32b7", "_execution_state": "idle"}, "outputs": [], "execution_state": "idle"}, {"metadata": {"collapsed": false, "_cell_guid": "7075f4e8-05ea-45a4-9b18-9e096fff0b1f", "_uuid": "43c9777bdb239adfa33d370990e81457036c4e9c", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# DATA EXPLORATION\n\n\n#Extracting Titles from Name Feature, it will be a significant feature\ntitle <- sapply (all.df$Name, function(x) substr(x, grep(\",\",unlist(strsplit(x, \"\"))) + 2, which(strsplit(x, \"\")[[1]]==\".\") -1))\n\n    \n#correction\ntitle[title=='Mlle'] <- 'Miss'\ntitle[title=='Ms'] <- 'Miss'\ntitle[title=='Mme'] <- 'Mrs'\n\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\ntitle[title %in% rare_title] <- 'Rare'  # we combine all rare titles into one class\ntitle <- as.factor(title)\nall.df$Title <- title\n\n# As you can see, it seems to be a good indicator  \nggplot(all.df[all.df$Set=='Train',], aes(Title, fill = Survived)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"Title\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"Title vs Survived\")   \n  \n\n\n\n\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "cbe4d801-9f01-4c5e-a9c6-a4ac08af1d22", "_uuid": "79d1d6b38b7cccc575c0e71f2dd8ee832e7c31ca", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# Create a new feature RelativeNumber\nall.df$RelativeNumber <- all.df$SibSp + all.df$Parch + 1\n\nggplot(all.df[all.df$Set=='Train',], aes(RelativeNumber, fill = Survived)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"RelativeNumber\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"RelativeNumber vs Survived\")", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "3c6a5855-cee2-4d04-b1b9-9294fe0dc2ef", "_uuid": "01ee445a37150a01919669c1ee28aaa77bc87e42", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# To have 1-3 relative is the highest chance to be survived according to the graph\n# So we create a new feature named as FamilySize from RelativeNumber \n\nall.df$FamilySize[all.df$RelativeNumber==1] <- 'single'\nall.df$FamilySize[all.df$RelativeNumber>1 & all.df$RelativeNumber<5] <- 'small'\nall.df$FamilySize[all.df$RelativeNumber>4] <- 'large'\nall.df$FamilySize <- as.factor(all.df$FamilySize)\n\n\n\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "d57fb3a5-5e99-4ec8-9d26-02b05b2c48da", "_uuid": "5bdc03eeafb5487d3967accd2955692e1b74a30d", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# There are a lot of NA values for Cabin values, \n# however I think cabin info is an important factor for surviving,\n# so I create a new feature CabinInfo including the NA values as a separate a class\nall.df$CabinInfo <- NA\nall.df[is.na(all.df$Cabin), ]$CabinInfo <- 'NA'\nall.df[!is.na(all.df$Cabin), ]$CabinInfo <- substr(all.df[!is.na(all.df$Cabin), ]$Cabin,1,1)\nall.df[all.df$CabinInfo == 'T', ]$CabinInfo <- 'NA'  # there is only one passenger with cabin 'T', for this reason we add it to 'NA' cabin\nall.df[all.df$CabinInfo == 'G', ]$CabinInfo <- 'NA' # there are also very few G class, so we add it to 'NA' as well.\n\n\nggplot(all.df[all.df$Set=='Train',], aes(CabinInfo, fill = Survived)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"CabinInfo\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"CabinInfo vs Survived\")", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "05ffc194-12fa-4594-9900-e4e28589eb78", "_uuid": "fb3c04070be951b107b20056b2966efaf6c67026", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "#According to the above graph, to group B, D, E into one class and A, C, F into another class will be more meaningful.\n\nall.df[all.df$CabinInfo == 'B', ]$CabinInfo <- 'BDE'\nall.df[all.df$CabinInfo == 'D', ]$CabinInfo <- 'BDE'\nall.df[all.df$CabinInfo == 'E', ]$CabinInfo <- 'BDE'\nall.df[all.df$CabinInfo == 'A', ]$CabinInfo <- 'ACF'\nall.df[all.df$CabinInfo == 'C', ]$CabinInfo <- 'ACF'\nall.df[all.df$CabinInfo == 'F', ]$CabinInfo <- 'ACF'\nall.df$CabinInfo <- as.factor(all.df$CabinInfo)", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "798d9e9b-3e00-49ed-a2e7-ad741054da45", "_uuid": "e4339f39a6afc497995a055f9d41f8cc6b7fbf60", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# IMPUTATION\n\n# Before the imputation, I wanted to extract some important features like 'Title' \n# which I believe that it has an effect on age\n\n# use mice package for assigning proper values for the missing age values, it gives better results than decision tree\nmice_model <- mice(all.df[,  c('Age','Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked', 'Title',  \n                        'RelativeNumber', 'FamilySize')], method='rf', printFlag = FALSE) \nmice_output <- complete(mice_model)\n\nall.df[is.na(all.df$Age), 'Age'] <- mice_output[which(is.na(all.df$Age)),'Age']\nall.df$Age <- round(all.df$Age)\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "2732168a-ecfe-48f5-89c8-1957c2e1b7cc", "_uuid": "6c17290f6a92d1fad5a5a41ce9fa78f61ced4a32", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# There is one NA value for Fare column, we find the PClass, Embarked and Title of the related passenger\nna.fare <- all.df[which(is.na(all.df$Fare)),] # passanger with id 1044 does not have Fare info\nall.df$Fare[1044] <- median(all.df[all.df$Pclass == 3 & all.df$Embarked == 'S' & all.df$Title == 'Mr',]$Fare, na.rm = TRUE)\n\n# There are 2 NA values for Embarked column\nna.embarked <- all.df[which(is.na(all.df$Embarked)),] # 62 and 830 passenger id do not have Embarked info\n# They both paid same fare(80) and travelled in same Pclass (1)  and same cabin (B28), we can understand that they are together\n\nC_Fare <- mean(all.df[all.df$Embarked == 'C', ]$Fare, na.rm = T) # 62.46$\nS_Fare <- mean(all.df[all.df$Embarked == 'S', ]$Fare, na.rm = T) # 27.39$\nQ_Fare <- mean(all.df[all.df$Embarked == 'Q', ]$Fare, na.rm = T) # 12.40$\n\n# So they both are most probably embarked from Cherbourg \n# Passengers embarked from Cherbourg pay 62$ averagely, which is the nearest one what they pay \nall.df$Embarked[62] <- as.factor('C')\nall.df$Embarked[830] <- as.factor('C')\n\n\n# So we completed the imputation part, again continue to extract new features", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "07e2a0ed-e0c0-4940-bdd1-f51dd9b8a353", "_uuid": "96655d43d40add84be95aa36d34b7a3ad0521933", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# analyzing interaction between fare and pclass columns, they are strongly related \n\ntrain.class3 <- all.df[all.df$Pclass==3 & all.df$Set=='Train',]\ntrain.class2 <- all.df[all.df$Pclass==2 & all.df$Set=='Train',]\ntrain.class1 <- all.df[all.df$Pclass==1 & all.df$Set=='Train',]\n\nggplot(train.class3, aes(y=train.class3$Pclass, x=train.class3$Fare)) + \ngeom_point(aes(color=train.class3$Survived), position = \"jitter\") +\nxlab(\"Fare\") + ylab(\"Pclass\") +\ngeom_vline(aes(xintercept=10), colour='black', linetype='dashed', lwd=1) +\ngeom_vline(aes(xintercept=20), colour='black', linetype='dashed', lwd=1) +\nscale_color_discrete(name = \"Survived\") +\nggtitle(\"Pclass1 vs Fare vs Survived\")\n\nggplot(train.class2, aes(y=train.class2$Pclass, x=train.class2$Fare)) + \nxlab(\"Fare\") + ylab(\"Pclass\") +\nscale_color_discrete(name = \"Survived\") + \ngeom_point(aes(color=train.class2$Survived), position = \"jitter\") +\ngeom_vline(aes(xintercept=20), colour='black', linetype='dashed', lwd=1) +\nggtitle(\"Pclass2 vs Fare vs Survived\")\n\nggplot(train.class1, aes(y=train.class1$Pclass, x=train.class1$Fare)) +\nxlab(\"Fare\") + ylab(\"Pclass\") +\nscale_color_discrete(name = \"Survived\") + \ngeom_point(aes(color=train.class1$Survived), position = \"jitter\") +\ngeom_vline(aes(xintercept=50), colour='black', linetype='dashed', lwd=1) +\ngeom_vline(aes(xintercept=120), colour='black', linetype='dashed', lwd=1) +\nggtitle(\"Pclass3 vs Fare vs Survived\")\n\n\n# we create a new feature which represent the relation between fare, pclass and surviving\n\nall.df$Class.fare.level[all.df$Pclass==3 & all.df$Fare < 10] <- 'P3_1'\nall.df$Class.fare.level[all.df$Pclass==3 & all.df$Fare >= 10 & all.df$Fare < 20] <- 'P3_2'\nall.df$Class.fare.level[all.df$Pclass==3 & all.df$Fare >= 20] <- 'P3_3'\nall.df$Class.fare.level[all.df$Pclass==2 & all.df$Fare < 20] <- 'P2_1'\nall.df$Class.fare.level[all.df$Pclass==2 & all.df$Fare >= 20] <- 'P2_2'\nall.df$Class.fare.level[all.df$Pclass==1 & all.df$Fare < 50] <- 'P1_1'\nall.df$Class.fare.level[all.df$Pclass==1 & all.df$Fare >= 50 & all.df$Fare < 120] <- 'P1_2'\nall.df$Class.fare.level[all.df$Pclass==1 & all.df$Fare >= 120] <- 'P1_3'\n\nall.df$Class.fare.level <- as.factor(all.df$Class.fare.level)", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "ad903c7b-6664-447f-bffc-bb677ebef329", "_uuid": "08a7e9f0702961ea458e83fb42d45c639e40e927", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "## analyzing the relation between age, sex and survived columns \ntrain.female <- all.df[all.df$Sex == 'female' & all.df$Set=='Train',]\ntrain.male <- all.df[all.df$Sex == 'male' & all.df$Set=='Train',]\n\n# female (Age vs Survived)\nage.survived.female <- table(train.female$Age, train.female$Survived)\nage.survived.female <- cbind(age.survived.female, age.survived.female[,1]/(age.survived.female[,1] + age.survived.female[,2]))\nage.survived.female.df <- data.frame(age.survived.female)\nage.survived.female.df <- cbind(age.survived.female.df, rownames(age.survived.female.df))\ncolnames(age.survived.female.df) <- c('not_survived','survived','death_rate','age')\nage.survived.female.df <- cbind(age.survived.female.df, total = age.survived.female.df$not_survived + age.survived.female.df$survived )\n\n# male (Age vs Survived)\nage.survived.male <- table(train.male$Age, train.male$Survived)\nage.survived.male <- cbind(age.survived.male, age.survived.male[,1]/(age.survived.male[,1] + age.survived.male[,2]))\nage.survived.male.df <- data.frame(age.survived.male)\nage.survived.male.df <- cbind(age.survived.male.df, rownames(age.survived.male.df))\ncolnames(age.survived.male.df) <- c('not_survived','survived','death_rate','age')\nage.survived.male.df <- cbind(age.survived.male.df, total = age.survived.male.df$not_survived + age.survived.male.df$survived )\n\n# just look at the age.survived.female data frame\nglimpse(age.survived.female.df)\n\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "88a00f02-ab88-4f3e-a705-0cb571da7fc6", "_uuid": "0c643c0fdf57700f999b317ab56420fe6ac3ac7e", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# Visualizing the data frame will be much more helpful to understand, two seperate graph for female and male\n\nggplot(data=age.survived.female.df, aes(y=age.survived.female.df$death_rate, x=age.survived.female.df$age)) + geom_point(size = age.survived.female.df$total, alpha=0.3) + \n  geom_hline(aes(yintercept=0.50), colour='red', linetype='dashed', lwd=1) +\n  xlab(\"Age\") + ylab(\"Death Rate\")\n\n\n\nggplot(data=age.survived.male.df, aes(y=age.survived.male.df$death_rate, x=age.survived.male.df$age)) + geom_point(size = age.survived.male.df$total, alpha=0.3) + \n  geom_hline(aes(yintercept=0.50), colour='red', linetype='dashed', lwd=1) +\n  xlab(\"Age\") + ylab(\"Death Rate\") \n\n# May be it is not a good idea to approach from the abovementionded view,\n# I want to add pclass information and assess age, sex and pclass together", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "6b1d2733-1948-43a9-9e4c-7511c8cdc970", "_uuid": "b9f58c2a477e5d65cde49804f1197302fe64be5f", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# Pclass vs Age vs Sex vs Survived\nggplot(all.df[all.df$Set=='Train', ], aes(y=all.df[all.df$Set=='Train', ]$Pclass, x=all.df[all.df$Set=='Train', ]$Age)) +\nfacet_wrap(~ Sex) +\nxlab(\"Age\") + ylab(\"Pclass\") +\nscale_color_discrete(name = \"Survived\") + \ngeom_point(aes(color=all.df[all.df$Set=='Train', ]$Survived), position = \"jitter\") +\ngeom_vline(aes(xintercept=10), colour='black', linetype='dashed', lwd=1) +\ngeom_vline(aes(xintercept=40), colour='black', linetype='dashed', lwd=1) +\nggtitle(\"Pclass vs Age vs Sex vs Survived\")", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "a63cffc5-0066-4088-bd72-48a1dde81497", "_uuid": "f9ebbf0f52db248399b40c56f24959dec5a5856d", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# now we are looking at the relation between age, sex and pclass, in terms of the light of the above graphs\nall.df$Class.sex.age.level <- NA\nall.df[all.df$Age<=10 & all.df$Sex=='female' & all.df$Pclass==1, ]$Class.sex.age.level <- 'cF1'\nall.df[all.df$Age<=10 & all.df$Sex=='male' & all.df$Pclass==1, ]$Class.sex.age.level <- 'cM1'\nall.df[all.df$Age<=10 & all.df$Sex=='female' & all.df$Pclass==2, ]$Class.sex.age.level <- 'cF2'\nall.df[all.df$Age<=10 & all.df$Sex=='male' & all.df$Pclass==2, ]$Class.sex.age.level <- 'cM2'\nall.df[all.df$Age<=10 & all.df$Sex=='female' & all.df$Pclass==3, ]$Class.sex.age.level <- 'cF3'\nall.df[all.df$Age<=10 & all.df$Sex=='male' & all.df$Pclass==3, ]$Class.sex.age.level <- 'cM3'\n\nall.df[all.df$Age>10 & all.df$Age<=40 & all.df$Sex=='female' & all.df$Pclass==1, ]$Class.sex.age.level <- 'aF1'\nall.df[all.df$Age>10 & all.df$Age<=40 & all.df$Sex=='male' & all.df$Pclass==1, ]$Class.sex.age.level <- 'aM1'\nall.df[all.df$Age>10 & all.df$Age<=40 & all.df$Sex=='female' & all.df$Pclass==2, ]$Class.sex.age.level <- 'aF2'\nall.df[all.df$Age>10 & all.df$Age<=40 & all.df$Sex=='male' & all.df$Pclass==2, ]$Class.sex.age.level <- 'aM2'\nall.df[all.df$Age>10 & all.df$Age<=40 & all.df$Sex=='female' & all.df$Pclass==3, ]$Class.sex.age.level <- 'aF3'\nall.df[all.df$Age>10 & all.df$Age<=40 & all.df$Sex=='male' & all.df$Pclass==3, ]$Class.sex.age.level <- 'aM3'\n\nall.df[all.df$Age>40 & all.df$Sex=='female' & all.df$Pclass==1, ]$Class.sex.age.level <- 'oF1'\nall.df[all.df$Age>40 & all.df$Sex=='male' & all.df$Pclass==1, ]$Class.sex.age.level <- 'oM1'\nall.df[all.df$Age>40 & all.df$Sex=='female' & all.df$Pclass==2, ]$Class.sex.age.level <- 'oF2'\nall.df[all.df$Age>40 & all.df$Sex=='male' & all.df$Pclass==2, ]$Class.sex.age.level <- 'oM2'\nall.df[all.df$Age>40 & all.df$Sex=='female' & all.df$Pclass==3, ]$Class.sex.age.level <- 'oF3'\nall.df[all.df$Age>40 & all.df$Sex=='male' & all.df$Pclass==3, ]$Class.sex.age.level <- 'oM3'\n\n# after investigating each class, I decided to combine all classes together \n# with insignificant surviving rates and too few amounts\nall.df[all.df$Class.sex.age.level %in% c('aF3','aM1','cF1', 'cF3', 'cM1', 'cM3'),]$Class.sex.age.level <- 'other'\n\nall.df$Class.sex.age.level <- as.factor(all.df$Class.sex.age.level)\n\nggplot(all.df[all.df$Set=='Train',], aes(Class.sex.age.level, fill = Survived)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"Class.sex.age.level\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"Class.sex.age.level vs Survived\")\n\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "0795231e-9ec1-4adb-8b32-e6588bdba722", "_uuid": "79584106dbbeec0528d83f68927d164797cf613f", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# Another importanf factor for surviving is definitely travelling with a family(group) or alone\n\n# First of all, we extract surname info from name column\nall.df$Surname <- sapply(all.df$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])\n\n# Forming a new data frame which includes passenger info which share same ticket and cabin\n# To calculate the frequencies of same cabin and same ticket number\n# is a very important parameter to indicate that people are travelling together \n\n# dplyr is a very useful package, especially if you are familiar with sql\n\n# another useful method is ave method, you can simply calculate cabin and ticket frequencies\n#all.df$Ticket.Frequency <- ave(seq(nrow(all.df)), all.df$Ticket, FUN=length)\n#all.df$Cabin.Frequency <- ave(seq(nrow(all.df)), all.df$Cabin, FUN=length)\n\npassenger_stats <- all.df %>% group_by(Surname, RelativeNumber, Ticket, Cabin) %>%\nsummarize(family.size = n(), unknown = sum(is.na(Survived)), \n          survived.info = sum(as.numeric(Survived)-1, na.rm=T), death.info = family.size -(unknown + survived.info)\n           ) \n\nall.df <- cbind(all.df, all.df %>% left_join(passenger_stats, c('Surname', 'RelativeNumber', 'Ticket', 'Cabin')) %>%\nselect('family.size','unknown', 'survived.info', 'death.info') )\n\n ", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "4c1f49f3-94a9-42fb-90b0-9a11111760c6", "_uuid": "1be3a72e1e8f2b7f206d9af0a2e03a405f3df63c", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "all.df$Travelling.together <- NA\nall.df[all.df$family.size==1,]$Travelling.together <- 'alone'\n# if we do not know whether the people inside the group survived or not survived, then we can not infer any thing by using Travelling.together feature\nall.df[all.df$family.size>1 & all.df$survived.info==0 & all.df$death.info==0 ,]$Travelling.together <- 'no_info'\n\n# For train set\n# Calculating the surviving rate in the group, excluding the passenger himself/herself\nfor (i in 1:891){\n    if( (all.df$family.size[i]>1) & (all.df$survived.info[i]>0 | all.df$death.info[i]>0)  ) {\n       if( all.df$Survived[i] ==1 ){\nall.df[i,]$Travelling.together <- round( (all.df$survived.info[i]-1)/(all.df$family.size[i]-1), 2)\n      }else{\nall.df[i,]$Travelling.together <- round( all.df$survived.info[i]/(all.df$family.size[i]-1), 2)          \n       }\n        }\n}\n\n# For test set \nfor (i in 892:1309){\n    if( (all.df$family.size[i]>1) & (all.df$survived.info[i]>0 | all.df$death.info[i]>0) ) {      \nall.df[i,]$Travelling.together <- round( (all.df$survived.info[i]/all.df$family.size[i]), 2)\n        }\n}\n\n\n# Surviving rate in the groups for train data\nggplot(all.df[all.df$Set=='Train',], aes(Travelling.together, fill = Survived)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"Travelling.together\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"Train Travelling.together vs Survived\")\n   \n# Surviving rate in the groups for test data\nggplot(all.df[all.df$Set=='Test',], aes(Travelling.together)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"Travelling.together\") +\n  ylab(\"Count\") +\n  ggtitle(\"Test Travelling.together vs Survived\")\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "5b9842e9-6892-4ce7-ba41-5fa121cb56f6", "_uuid": "744dab6fa39edf17679620d6c4db95ff8a5d32a2", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# I decide to seperate the Travelling.together feature into 3 groups\n# One of them is 0, the other one is alone and I define all other classes into one class\n\nall.df[!(all.df$Travelling.together %in% c('alone','0','no_info')) , ]$Travelling.together <- 'survived_in_group'\n\nall.df$Travelling.together <- as.factor(all.df$Travelling.together)\n\nggplot(all.df[all.df$Set=='Train',], aes(Travelling.together, fill = Survived)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"Travelling.together\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"Train Travelling.together vs Survived\")\n   \n# Surviving rate in the groups for test data\nggplot(all.df[all.df$Set=='Test',], aes(Travelling.together)) + \n  geom_bar(stat = \"count\")+\n  xlab(\"Travelling.together\") +\n  ylab(\"Count\") +\n  ggtitle(\"Test Travelling.together vs Survived\")\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "94e7ca9f-9a77-45f8-9863-82e39e72ab53", "_uuid": "d70167a1aadb0b248d1a31db4279707679d7dc3f", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# We basically formed new features from the given information\n# And now we use them while creating the model\n# you can try different algorithms, \n# there a lot of options (decision tree, random forest, logistic regression, svm, naive bayes, xgboost etc.) \n# I used random forest in this kernel, additionally you can change the default values of the parameters, but do not expect big diferences generally:)\n\nfeature.set <- c('Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Title', 'FamilySize', 'CabinInfo', \n                 'Class.fare.level', 'Class.sex.age.level', 'Travelling.together')\n\n# selecting only the features which will be used in the model\nall.df.model.input <- all.df[, feature.set]\n\n# seperating the data as train and test set\ntrain.df <- all.df.model.input[1:891,]\ntest.df <- all.df.model.input[892:1309,]\n\n\nfit.model.randomforest <- randomForest(Survived ~ .,\n                                       data = train.df, importance = TRUE, keep.forest=TRUE)\n\n\n\n", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "e3275465-b652-4f64-a45e-3d8081e2abe0", "_uuid": "8be02e90f31276dbbe90e09226ede47eb727dab5", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# making predictions using the created rf model\npred <- predict(fit.model.randomforest, test.df[,-1], \n                type = \"class\")\n\npredictions <- data.frame(c(892:1309), pred)\nnames(predictions) <- c(\"PassengerId\",\"Survived\")\nwrite.csv(predictions, \"rf_model_prediction.csv\", row.names = FALSE)", "cell_type": "code"}, {"metadata": {"collapsed": false, "_cell_guid": "b0fcbb98-da8d-47d1-989a-48bdf67fda6a", "_uuid": "1a38d3b3b7d4d2f6421448cbc6a44aa4d7d78b9b", "trusted": false, "_execution_state": "idle"}, "execution_count": null, "outputs": [], "source": "# As an useful property of random forest package, we can observe the importance of features used in the model\n\nimportance    <- importance(fit.model.randomforest)\nFeature.importance <- data.frame(Features = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseAccuracy'],2))\n\nFeature.importance <- Feature.importance %>% mutate(Rank=dense_rank(desc(Importance)))\n\nggplot(Feature.importance, aes(x = reorder(Features, Importance), \n                           y = Importance, fill = Importance)) +\ngeom_bar(stat='identity') + \ngeom_text(aes(x = Features, label = Rank),\nsize = 5, y= 0.5, colour = 'red') +\nlabs(x = 'Features') +\ncoord_flip() \n", "cell_type": "code"}]}