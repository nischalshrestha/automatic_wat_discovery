{"cells":[{"metadata":{"_uuid":"b741cca3602ee853f477ae15f9eb0649bb0ec958","_execution_state":"idle","trusted":true,"_kg_hide-input":true,"_kg_hide-output":true},"cell_type":"code","source":"\nlibrary(tidyverse) # metapackage with lots of helpful functions\nlibrary(class)\nlist.files(path = \"../input\")\n# write.csv(evl,\"test_scored.csv\")","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"trusted":true,"_uuid":"90731344a3c53b27242a1a47d37bcc91a037fa9b"},"cell_type":"code","source":"rm(list=ls())\nt1 <- read.csv('../input/test.csv',  as.is = T)\nt2 <- read.csv('../input/train.csv', as.is = T)\nall <-  bind_rows(t2,t1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bc7a0653c775d7c8e048aad409fe069c30bfa8a2"},"cell_type":"markdown","source":"First I wnat to deal with the missing age values. To do this I'll use linear regression."},{"metadata":{"trusted":true,"_uuid":"408f60e69fe1cc2beebf5540d269511b783c4d02","_kg_hide-input":true},"cell_type":"code","source":"# Predict missing ages.\ncolSums(is.na(all))\n# female=1 male=0\nall$Sex <- gsub('female','1',all$Sex)\nall$Sex <- gsub('male','0',all$Sex)\n# make all$Sex numeric\nall$Sex <- as.numeric(all$Sex)\nmissing.a <- all[which(is.na(all$Age)),] # I want to predict these  missing values\ntrain <- all[which(!is.na(all$Age)),] # For training the model I want to use data w/no missing values\n\n# Train the model\nmodel <- lm(Age ~ Pclass+Sex, data = train)\n# predict\npred <- predict(model, missing.a)\npred <- as.data.frame(pred)\n# Fill in the missing values\n# There maybe an easier way to do this.\ncount <- 0\nfor (i in which(is.na(all$Age))) {\ncount <- count + 1\n  all$Age[i] <- pred$pred[count]\n}\ncolSums(is.na(all))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3ae4ee15abeb681c8538d090f54c1b91665735d2"},"cell_type":"markdown","source":"Some of the fares are zero so I'll turn those cells to NA"},{"metadata":{"trusted":true,"_uuid":"0f4eb2f6fa61ff3eeaa54a3795aa627beb4ac9f6","_kg_hide-input":true},"cell_type":"code","source":"# Some of the fares are zero so I'll turn those cells to NA\nall$Fare[all$Fare==0] <- NA\nall$Embarked[which(all$Embarked=='')] <- 'S'\n# Change to numeric type.\nall$Fare <- as.numeric(all$Fare)\ncolSums(is.na(all))\n# str(all)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"abf9a6492003bfcf73a7e2a941a4d1de2aa95e40"},"cell_type":"markdown","source":"I'll use median values to fill in 18 missing fare values."},{"metadata":{"trusted":true,"_uuid":"7ec88f22164df5a72944be315a30d81531600b81","_kg_hide-input":true},"cell_type":"code","source":"all$Fare[which(is.na(all$Fare))] <- median(all$Fare, na.rm = T)\ncolSums(is.na(all))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"827db288342131731fce185b1cd4c5ad06857b2d","_kg_hide-input":true},"cell_type":"code","source":"data.frame(num=1:length(names(all)),names=names(all) ) ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fa5ecc5648aef8e7af02a87a43a1208a3ed03454","_kg_hide-input":true},"cell_type":"code","source":"# Remove some columns\ndf <- all[-c(1,4,9,11)]\nhead(df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"49af635cc54f5e4516f3da404d8cead6b83fa47a","_kg_hide-input":true},"cell_type":"code","source":"# Make df$Survived a factor.\ndf$Survived <- as.factor(df$Survived)\n# Change Embarked to mumbers.\ndf$Embarked[which(df$Embarked=='C')] <- 0\ndf$Embarked[which(df$Embarked=='Q')] <- 1\ndf$Embarked[which(df$Embarked=='S')] <- 2\n# make embarek numeric\ndf$Embarked <- as.numeric(df$Embarked)\n\n###### Normalize data\nnorm <- function(x){return( (x-min(x))/(max(x)-min(x)) )}\n\ntrain_target <- df[1:579,1]\ntest_target <- df[580:891,1]\ndf_z <- df # I'll use df_z later for z-score standardization\n# # Leave the target comumn out.\ndf <- as.data.frame(lapply(df[,c(2:8)],norm))\nx <- df # x will be used to predict survival.\n\ndf<- df[1:891,]\ntrain <- df[1:579,]\ntest <- df[580:891,]\n# I'll start with k to be a square root of train observations.\nk <- as.integer(sqrt(579))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"e7fc5bcef16ac0d6de3959a21801f2c92e3d6d1d","_kg_hide-input":true},"cell_type":"code","source":"# Train model\nmodel <- knn(train = train,\n             test = test,    \n             cl = train_target,\n             k=k )","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"eea03acc7058ae615f16f4d26460a1bf0ac43cee"},"cell_type":"markdown","source":"To find accuracy of the model we can devide the erro values by lenght of the model."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"8eaa9423fe2f02cfce584f8285aa5159dc3b35f1"},"cell_type":"code","source":"t <- table(test_target,model)\nt\naccuracy <- 100-((t[2]+t[3])/length(model))*100\ncat('\\n')\ncat('accuracy = ',accuracy,'%')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bfd01a3173084302380e0e766e827b09781a0c52"},"cell_type":"markdown","source":"improving model performance using  z-score standardization."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"579d3318109838e1dc1b8fcc3712c316e5198ac3"},"cell_type":"code","source":"df_z1 <- as.data.frame(scale(df_z[-c(1)]))\n\ndf_z1_train <- df_z1[1:579,]\ndf_z1_test <- df_z1[580:891,]\ndf_z1_train_target <- df_z[1:579,1]\ndf_z1_test_target <- df_z[580:891,1]\n\nk <- 5\nmodel <- knn(train = df_z1_train,\n             test = df_z1_test,\n             cl = df_z1_train_target,\n             k=k )\n\nt <- table(df_z1_test_target,model)\nt\naccuracy <- 100-((t[2]+t[3])/length(model))*100\ncat('\\n')\ncat('accuracy = ',accuracy,'%')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9f7ed5722f84d29cc80b56704da2fdd25955e410"},"cell_type":"markdown","source":"A slight improvment."},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"5fff7393c1773cfdb04a0f58f1a3bb3a7b16ac8a"},"cell_type":"code","source":"k <- 5\nmodel <- knn(train = df_z1_train,\n             test = x[892:1309,], #df_z1_test, \n             cl = df_z1_train_target,\n             k=k )\n# write.csv(evl,\"test_scored.csv\")","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_uuid":"77f40449f327754b3bd67b0adbce4bac904033c7"},"cell_type":"code","source":"submit <- data.frame(PassengerId=892:1309,Survived=model)\nwrite.csv(submit,file = 'score.csv', row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}