{"cells": [{"cell_type": "code", "execution_count": null, "outputs": [], "source": ["library(ggplot2) # Data visualization\n", "library(readr) # CSV file I/O, e.g. the read_csv function"], "metadata": {"_kg_hide-input": false, "_kg_hide-output": false, "_uuid": "5c0c580e63fd50a3562f9927daaee3b49c2db59d", "_cell_guid": "59f0b808-a6ed-4f6d-b1bc-8633f75b394a"}}, {"cell_type": "markdown", "source": ["## Getting and Cleaning the data"], "metadata": {"_uuid": "aa1779f5193befff26af7bde94c26dbe9768760b", "_cell_guid": "ebb244e6-f240-4a25-9159-3cfd6996aadb"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["# Load the training and test data \n", "df_train<-read.csv(\"../input/train.csv\",na.strings = '')\n", "df_test<-read.csv(\"../input/test.csv\",na.strings = '')\n", "\n", "#Summarize the data and look at the first few rows to get the idea about the nature of data. \n", "summary(df_train)\n", "head(df_train)"], "metadata": {"_uuid": "e751d8cdd225863348b01a1259d45b74c17def6a", "_cell_guid": "9b4be8a2-4e14-4382-834c-f421221a0877"}}, {"cell_type": "markdown", "source": ["### The following things can be observed from the above summary. \n", "* Columns Name / Ticket have too many unique values and are most likely not useful for prediction. The PassengerId column is just  a serial number and it is also not expected to contain useful information about whether a passenger survives or not. \n", "* Column \"Cabin\" has too many rows with missing data, and too many unique values in other rows. so, that is also likely not a useful column for prediction. \n", "\n", "**Age:** The histogram below shows that there is a reasonable split between the Survived and \"Not-Survived\" classes at all age groups, and age by itself may not be a strong predictor of survival. Since we are also missing a lot of values from the \"Age\" column, we willd drop it form the set of predictors. "], "metadata": {"_uuid": "9b88bfcb8ed9304aba67a84289fd42470d711e54", "_cell_guid": "50c783fd-2ddf-479b-8bed-bae1166102b3"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["ggplot(data=df_train, mapping = aes(Age))+ geom_histogram(aes(fill=as.factor(Survived),y=..density..)) + geom_density()"], "metadata": {"_uuid": "8815db7bc144fdf0f050983828aab612feaa62cb", "_cell_guid": "b5f5104a-5608-44f0-87a1-6ad3e20c8ab9"}}, {"cell_type": "markdown", "source": ["**We will drop the following columns from the training data for a simpler (and more generalizable model)**"], "metadata": {"_uuid": "6bb42da57c2d3c608aa7052334bb5c9ae016f721", "_cell_guid": "3044f186-8289-43d4-80d9-ff4bd373b780"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["df_train <- subset(df_train,select=-c(Cabin,Name,Ticket,PassengerId, Age))\n", "summary(df_train)"], "metadata": {"_uuid": "ed0ddff45fd249703d539f3f5445bd7982b72fc1", "_cell_guid": "a4ae64ab-a5c4-4c30-86b7-f7c144fe3e33"}}, {"cell_type": "markdown", "source": ["## Addressing the NA vaues (Imputation)\n", "We see that column \"Age\" still has a lot of NAs. We will substitute the NA values with the average value for Age as shown below.\n", "\n", "For Column \"Embarked\" which has only two NA values in the training data, we will use the majority value as the value for NAs. \n", "\n"], "metadata": {"_uuid": "ff2e714c0312bf951f30ff3a8d2ee60d7eb8f4ff", "_cell_guid": "ce1c31c4-450e-4ddf-9019-54477b1fd1b5"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["# use the average age vaule for the missing ages\n", "#df_train$Age[is.na(df_train$Age)] <- mean(df_train$Age,na.rm=T)\n", "\n", "# use the majority value for two items with missing \"embarked\" value\n", "df_train$Embarked[is.na(df_train$Embarked)] <- names(sort(table(df_train$Embarked),decreasing=TRUE)[1])\n", "\n", "summary(df_train)"], "metadata": {"_uuid": "7891fe77beba2d5e956ad2ab50fee1e065db2436", "_cell_guid": "e370225c-ae17-4b80-8d5c-576c78b91cb3"}}, {"cell_type": "markdown", "source": ["## Exploratory Data Analysis\n", "\n", "Let us plot histograms for all the variables and see which of them. First we look a the variables with numerical values. "], "metadata": {"_uuid": "cd36f5d840cfd5cfd8baa41cdddb0638ea207736", "_cell_guid": "240880a3-d63c-461e-b08d-4e5f08b1f2ce"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["library(reshape)\n", "df_train_melt <- melt(df_train,id.vars = c('Survived','Sex','Embarked'))\n", "#summary(test\n", "ggplot(data = df_train_melt, mapping = aes(x = value, fill = as.factor(Survived), color = as.factor(Survived))) + \n", "    geom_histogram(bins = 10) + facet_wrap(~variable, scales = 'free_x')"], "metadata": {"_kg_hide-output": true, "_uuid": "53dea72242cd3cae023efe553304f4afa76675c4", "scrolled": true, "_cell_guid": "8373e3c1-ee5c-4f84-a713-05716536c6be"}}, {"cell_type": "markdown", "source": ["Now we look at variables with text / categorical values (\"Sex\", and \"Embarked\")"], "metadata": {}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["ggplot(data=df_train, mapping = aes (Sex))+ geom_bar(aes(fill=as.factor(Survived)))"], "metadata": {"_uuid": "3b04acfa46113c9f2e5fbcf9ef75d6692be8b040", "_cell_guid": "7c4b6984-e927-43b3-b51a-76bd38457371"}}, {"cell_type": "markdown", "source": ["Let us build a simple decision tree to identify some of the important variables. "], "metadata": {"_uuid": "2baed8b85ba4c849d0fdbf697429f7db774ca63f", "_cell_guid": "190b6022-c96e-46b3-99c4-974da767ba9a"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["library(rpart.plot)\n", "mytree <- rpart(Survived ~ .,\n", "                 data = df_train,\n", "                 method =\"class\")\n", "rpart.plot(mytree, type=4,extra=101)"], "metadata": {"_uuid": "362fa3387f7671d75d6211b1abe9c40446431994", "_cell_guid": "8c89d782-7243-4757-a2c0-84c027861e99"}}, {"cell_type": "markdown", "source": ["From the above, it can be seen that the sex of teh passenger had a good correlation with the survival. Passenger class also seems to have played a role for female passengers. \n", "\n", "# Baseline Model\n", "Let us first make a logistic regression just using sex as a predictor. We can use cross validation to estimate the error rate using that model. \n"], "metadata": {"_uuid": "5a139be94326228871fae9ba4b57dfe6a79be7af", "_cell_guid": "c5972438-c8fa-4393-b92f-7124ec8d5e54"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["library(caret)\n", "ctrl <- trainControl(method = \"repeatedcv\", number = 10, savePredictions = TRUE)\n", "mod_glm_Sex <- train(as.factor(Survived) ~ Sex,  data=df_train, method=\"glm\", family=\"binomial\",\n", "                 trControl = ctrl, tuneLength = 5)\n", "\n", "#pred = predict(mod_fit)\n", "#confusionMatrix(data=pred, df_train$Survived)"], "metadata": {"_uuid": "b8a9e4c7d746eccc2aee511d3878a6b3d46ac556", "_cell_guid": "1b775d5d-3243-430f-ae19-8085d02df918"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["mod_glm_Sex"], "metadata": {"_uuid": "4988ab29ec683ce1a244b781e24a1ce823c41d11", "_cell_guid": "f19b408b-95ce-4ae2-a18c-37d10efc6ffe"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["mod_glm_all <- train(as.factor(Survived) ~ .,  data=df_train, method=\"glm\", family=\"binomial\",\n", "                 trControl = ctrl, tuneLength = 5)\n", "mod_glm_all"], "metadata": {"_uuid": "d422fad90b896afc25c88e6abf56f0d38a1e0812", "_cell_guid": "d9fc96b4-0498-4917-a1cf-b958766e4e14"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["mod_rf_all <- train(as.factor(Survived) ~ .,  data=df_train, method=\"rf\",\n", "                    trControl = ctrl, tuneLength = 5)\n", "mod_rf_all"], "metadata": {"_uuid": "a6fcc64426c0141c0686b884896a423a81740c35", "_cell_guid": "c6e359c8-4b53-4607-a8a6-7b9783583b74"}}, {"cell_type": "markdown", "source": ["Since the random forest model seems to improve the accuracy from 0.797 to 0.827, we will use teh random forest model. \n", "\n", "# Applying the model to test data\n", "\n", "## Taking care of NA values. \n", "We first need to make sure there are no \"NA\" values in the predictor columns of the test dataset. "], "metadata": {"_uuid": "858f583101db89677b8bcce5d8f6b346fde54617", "_cell_guid": "b28730e1-2b0f-48b0-a685-c12b0b9552a4"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["summary(df_test)"], "metadata": {"_uuid": "a31831927b29836b3d9a74a3a80481694dd90c86", "_cell_guid": "354277cf-f242-4793-9ed6-6a45b1c2732c"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["# use the average age vaule for the missing ages\n", "df_test$Fare[is.na(df_test$Fare)] <- mean(df_test$Fare,na.rm=T)\n", "summary(df_test)"], "metadata": {"_uuid": "4c433171224b859f36cd1168409bbe266cdb7b05", "_cell_guid": "c7b5ca52-37c6-48c9-846b-775a3c95680a"}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": ["predictions_rf2 <- cbind(df_test$PassengerId,as.numeric(predict(mod_rf_all,newdata=df_test))-1)\n", "colnames(predictions_rf2) <- c(\"PassengerId\",\"Survived\")\n", "write.csv(file = \"prediction_rf2.csv\", predictions_rf2,row.names = F,quote = FALSE)\n"], "metadata": {"_kg_hide-input": true, "_kg_hide-output": false, "_uuid": "ebad60076fc46aecfba40d0ade3cbf2ef1649168", "_cell_guid": "f0dc58c1-0099-4f33-8963-37fe62cf1690"}}, {"cell_type": "markdown", "source": ["**This file was submitted to the contest with a score of 0.77. I hope to comeback and improve this some day :)**"], "metadata": {}}, {"cell_type": "code", "execution_count": null, "outputs": [], "source": [], "metadata": {}}], "nbformat": 4, "nbformat_minor": 1, "metadata": {"language_info": {"name": "R", "codemirror_mode": "r", "file_extension": ".r", "version": "3.4.2", "mimetype": "text/x-r-source", "pygments_lexer": "r"}, "kernelspec": {"language": "R", "name": "ir", "display_name": "R"}}}