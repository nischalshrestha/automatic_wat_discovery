{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "d77017d1-13d6-e902-f0e4-b5e810592f03"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "aee7b898-af46-d797-1a93-ef5f9a214af3"
      },
      "outputs": [],
      "source": [
        "---\n",
        "title: ' Prediction de la mort sur Titanic'\n",
        "output:\n",
        "  html_notebook: default\n",
        "  html_document: default\n",
        "---\n",
        "\n",
        "## I. Introduction\n",
        "\n",
        "### 1.1 Chargeons les librairies que nous aurons besoin\n",
        "\n",
        "\n",
        "\n",
        "```{r}\n",
        "library('ggplot2')  # pour la visualisation\n",
        "library('ggthemes') # pour la visualisation\n",
        "library('scales') # pour la visualisation\n",
        "library('dplyr') # pour la manipulation\n",
        "library('mice')  # pour la manipulation\n",
        "library('prettyR')\n",
        "library('randomForest') # l'algorithme de classifcation \n",
        "library('AUC')\n",
        "library('Rcpp')\n",
        "library('ROCR')\n",
        "library('rpart')\n",
        "#pour la pr\u00e9diction des survivants\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "### 1.2 Chargeons les donne\u00e9es dans l'environnement de travail\n",
        "\n",
        "```{r}\n",
        "train <- read.csv(\"../input/train.csv\", header = TRUE, stringsAsFactors = FALSE)\n",
        "train$IsTrain <- TRUE\n",
        "test <- read.csv(\"../input/test.csv\", header = TRUE, stringsAsFactors = FALSE)\n",
        "test$IsTrain <- FALSE\n",
        "# L'instruction stringAsFactor=F permet de dire \u00e0 R : ne transforme pas automatiquement tous \n",
        "#les champs String en Factor\n",
        "\n",
        "# Dans un elan d'exploration de donne\u00e9e nous allons fusionner les deux data train et test\n",
        "test$Survived <- NA\n",
        "full <- rbind(train, test)\n",
        "\n",
        "\n",
        "# Regardons le contenu de full \n",
        "\n",
        "str(full)\n",
        "```\n",
        "\n",
        "# D\u00e9crivons les variables : \n",
        "\n",
        "Variable   ................        Description\n",
        "\n",
        "Survived     ->                                    variable \u00e0 predire vie(1) mort(0) \n",
        "\n",
        "Pclass      ->                                    La classe du passager\n",
        "\n",
        "Name    ->                                         Le nom du passager\n",
        "\n",
        "Age  ->                                            le nom du passager\n",
        "\n",
        "Sex     ->                                         le sex du passager\n",
        "\n",
        "SibSp   ->                                         Nomre de freres et soeurs/epouses \u00e0 bord\n",
        "\n",
        "Parch      ->                                      Nombre de parents/enfant \u00e0 bord\n",
        "\n",
        "Ticket          ->                                Indique le numero du ticket du passager\n",
        "\n",
        "Fare            ->                                Indique le le prix du ticket\n",
        "\n",
        "Cabin               ->                          indique la cabine du passager\n",
        "\n",
        "Embarked               ->                         Indique le porte d emquation du passager\n",
        "\n",
        "\n",
        "## 2. L ing\u00e9nierie des variables (Lart de savoir observer)\n",
        "\n",
        "### Extraction du titre (genre Mr. , Mme, ...) et du prenom\n",
        "\n",
        "### 2.1 Extraction du titre\n",
        "\n",
        "```{r}\n",
        "full$title <- gsub('(.*,)|(\\\\..*)', '', full$Name)\n",
        "```\n",
        "\n",
        "### Regardons le contenu de title\n",
        "\n",
        "```{r}\n",
        "table(full$title)\n",
        "```\n",
        "\n",
        "When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).\n",
        "\n",
        "\n",
        "# On observe qu'il y a des titres non significatifs (the countess, Rev,..), on peut les considerer donc comme des tites rares\n",
        "\n",
        "```{r}\n",
        " rare_title <- c( ' Capt', ' Col', ' Don', ' Dona', ' Dr', ' Jonkheer', ' Major', ' Rev', ' the Countess', ' Lady')\n",
        "```\n",
        " # Simplifions de ce fait cette colonne avec des regroupements \n",
        " \n",
        "```{r}\n",
        "full$title[full$title == ' Mlle'] <- 'Miss'\n",
        "full$title[full$title == ' Ms'] <- 'Miss'\n",
        "full$title[full$title == ' Mme'] <- 'Mrs'\n",
        "full$title[full$title %in% rare_title] <- 'rare_title'\n",
        "    \n",
        "```\n",
        "\n",
        "# Regardons tout cela \n",
        "\n",
        "```{r}\n",
        "table(full$Sex, full$title)\n",
        "```\n",
        "\n",
        "# 2.2. Cr\u00e9ons la collone Surname par extraction de l'information de la colonne Name\n",
        "\n",
        "```{r}\n",
        "full$SurName <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])\n",
        "```\n",
        "\n",
        "# qu'est il arriv\u00e9 aux familles? Rasseblons les\n",
        "\n",
        "```{r}\n",
        "# definissons la taille des familles\n",
        "full$Fsize <- full$SibSp + full$Parch + 1;\n",
        "\n",
        "# Creons une variable pour identifier les familles\n",
        "\n",
        "full$Family <- paste(full$SurName, full$Fsize, sep = '-')\n",
        "```\n",
        "\n",
        "\n",
        "### Visualisation \n",
        "\n",
        "# visualisons la relation qui existe entre la taille des famille(Fsize) et la survie(Survived)\n",
        "\n",
        "```{r}\n",
        "ggplot(full[1:891,], aes(x=Fsize, fill= factor(Survived))) +\n",
        "  geom_bar(stat = 'count', position = 'dodge') + scale_x_continuous(breaks = c(1:1)) +\n",
        "  labs(x = 'family Size') +\n",
        "  theme_few()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# Divisons les famille en sous partie\n",
        "\n",
        "```{r}\n",
        "\n",
        "full$FsizeD[full$Fsize == 1] <- 'singleton'\n",
        "full$FsizeD[full$Fsize < 5 & full$Fsize >1] <- 'small'\n",
        "full$FsizeD[full$Fsize > 4] <- 'large'\n",
        "\n",
        "```\n",
        "\n",
        "# Observons un peu tout ca \n",
        "\n",
        "```{r}\n",
        "mosaicplot(table(full$FsizeD, full$Survived), main = 'Taille de la famille par la survie', shade = TRUE)\n",
        "```\n",
        "\n",
        "# Occupons des valeurs manquantes\n",
        "\n",
        "En principe vu que les donne\u00e9 ne sont pas gigantsque on va pas supprimer les lignes comportant les valeurs manquantes, mais on va essayer de pr\u00e9dire la valeur de ses donne\u00e9es manquantes.\n",
        "\n",
        "# Cherchons les colonnes qui ont des champs vides ou nulle\n",
        "\n",
        "```{r}\n",
        "colSums(is.na(full))\n",
        "```\n",
        "\n",
        "### Nous remarquons qu'il y a 263 valeurs manquantes de la variable Age. Nous pouvons donc essayer de predire la valeur de ses donne\u00e9es manquantes :\n",
        "\n",
        "Regardons un peu le resume de Age\n",
        "\n",
        "```{r}\n",
        "summary(full$Age)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "```{r}\n",
        "age_model <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + title, \n",
        "                   \n",
        "                   data = full[!is.na(full$Age), ], method = \"anova\")\n",
        "\n",
        "full$Age[is.na(full$Age)] <- predict(age_model, full[is.na(full$Age),]) \n",
        "\n",
        "summary(full$Age)\n",
        "```\n",
        "Il y a une valeur manquante dans Fare\n",
        "\n",
        "Nous allons utliser la methode visuelle et la non  visuelle \n",
        "\n",
        "```{r}\n",
        "summary(full$Fare)\n",
        "```\n",
        "La methode ci-dessous est rapide si on a deja une idee des indices de la valeur manquante : \n",
        "```{r}\n",
        "ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n",
        "  aes(x = Fare)) +\n",
        "  geom_density(fill = '#99d6ff', alpha=0.4) + \n",
        "  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n",
        "    colour='red', linetype='dashed', lwd=1) +\n",
        "  scale_x_continuous(labels=dollar_format()) +\n",
        "  theme_few()\n",
        "```\n",
        "\n",
        "Trouvons la valeur de la mediane : \n",
        "\n",
        "```{r}\n",
        "\n",
        "full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)\n",
        "\n",
        "# full$Fare[1044]  a re\u00e7u comme valeur :\n",
        "\n",
        "median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)\n",
        "```\n",
        "```{r}\n",
        "summary(full$Fare)\n",
        "```\n",
        "\n",
        "Dans le cas contraire, nous allons calculer la mediane directement\n",
        "\n",
        "```{r}\n",
        "fare.pclass.na <- full$Pclass[is.na(full$Fare)]\n",
        "fare.median <- median(full$Fare[full$Pclass==fare.pclass.na], na.rm = TRUE)\n",
        "full[is.na(full$Fare), \"Fare\"] <- fare.median\n",
        "summary(full$Fare)\n",
        "\n",
        "```\n",
        "\n",
        "Verifions l'existance d'un champs considere comme : \" \"\n",
        "\n",
        "```{r}\n",
        "colSums(full == '')\n",
        "```\n",
        "\n",
        "Nous remarquons qu il existe deux valeurs absence dans la variable Embarqued \n",
        "\n",
        "Essayons de trouver les valeurs qui correspondent \u00e0 ces valeurs : \n",
        "\n",
        "```{r}\n",
        "# filtrons les valeurs manquantes et excluons les du data frame\n",
        "embark_fake <- full %>%\n",
        "  filter(PassengerId != 62 & PassengerId !=830)\n",
        "```\n",
        "Resultat du filtre : les deux valeurs exclus\n",
        "\n",
        "```{r}\n",
        "colSums(embark_fake == '')\n",
        "```\n",
        "\n",
        "Essayons de visualiser tout cela avec boxplot\n",
        "\n",
        "```{r}\n",
        "ggplot(embark_fake, aes(x=Embarked, y=Fare, fill = factor(Pclass))) +\n",
        "  geom_boxplot() +\n",
        "  geom_hline(aes(yintercept = 80) , \n",
        "colours = 'red' , linetype = 'dashed' , lwd = 2) + \n",
        "  scale_y_continuous(labels = dollar_format())  + \n",
        "  theme_few()\n",
        "```\n",
        "On observe que la median port d embarquation C coinde avec le prix 8,5\n",
        " Donc on peut remplacer les variables manquantes par 'C'\n",
        " \n",
        " \n",
        "```{r}\n",
        "table(full$Embarked)\n",
        "```\n",
        "\n",
        "```{r}\n",
        "full[full$Embarked == \"\", \"Embarked\"] <- \"C\"\n",
        "full$Embarked[c(62, 830)] <- 'C'\n",
        "table(full$Embarked)\n",
        "full$Pclass[is.na(full$Pclass)] <- 'Adult'\n",
        "```\n",
        " Regardons un peu la relation qui peut exister entre l age et survie, et considerons un peu que le sex est un predicateur significatif\n",
        " \n",
        " \n",
        "```{r}\n",
        "ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +\n",
        "  \n",
        "  geom_histogram() + \n",
        "  \n",
        "  facet_grid(.~Sex) +\n",
        "  \n",
        "  theme_few()\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "Vu que l age est significatif, separons cette variable en grande famille : les Adultes et les enfants\n",
        "\n",
        "```{r}\n",
        "full$class[full$Age < 18] <- 'Child'\n",
        "full$class[full$Age > 18] <- 'Adult'\n",
        "\n",
        "```\n",
        "Essayons de regarder la classe et la survie \n",
        "```{r}\n",
        "table(full$class,full$Survived)\n",
        "```\n",
        "\n",
        "```{r}\n",
        "full$class <- as.factor(full$class)\n",
        "# Make variables factors into factors\n",
        "full$class <- as.factor(full$class)\n",
        "\n",
        "full$Sex <- as.factor(full$Sex)\n",
        "full$title <- as.factor(full$title)\n",
        "full$FsizeD <- as.factor(full$FsizeD)\n",
        "full$Embarked <- as.factor(full$Embarked)\n",
        "\n",
        "# Set a random seed\n",
        "set.seed(129)\n",
        "```\n",
        "\n",
        "Regardons sil existe encore des valeurs manquantes\n",
        "\n",
        "```{r}\n",
        "md.pattern(full)\n",
        "```\n",
        "\n",
        "```{r}\n",
        "train <- full[1:891,]\n",
        "test <- full[892:1309,]\n",
        "train <- train[, colSums(is.na(train)) == 0]\n",
        "survived.eq <- \"factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title + FsizeD\"\n",
        "survived.formula <- as.formula(survived.eq)\n",
        "```\n",
        "\n",
        "\n",
        "Definissons les variables de notre modele : \n",
        "\n",
        "\n",
        "```{r}\n",
        "model <- randomForest(formula = survived.formula, data = train, ntree = 500, \n",
        "                              mtry = 3, \n",
        "                              nodesize = 0.01 * nrow(train))\n",
        "\n",
        "model1 <- randomForest(formula = survived.formula, \n",
        "                               data = train, \n",
        "                               ntree = 500, \n",
        "                               mtry = 3, \n",
        "                               nodesize = 0.01 * nrow(test))\n",
        "\n",
        "model2 <- randomForest(formula = survived.formula, \n",
        "                               data = train, \n",
        "                               ntree = 1000, \n",
        "                               mtry = 3,\n",
        "                               nodesize = 0.01 * nrow(train))\n",
        "\n",
        "model3 <- randomForest(formula = survived.formula, \n",
        "                               data = train, \n",
        "                               ntree = 1000, \n",
        "                               mtry = 3, \n",
        "                               nodesize = 0.01 * nrow(test))\n",
        "```\n",
        "\n",
        " Le hors-sac (OOB) erreur est l erreur moyenne pour chaque z_icalcul\u00e9es en utilisant les pr\u00e9dictions des arbres qui ne contiennent pas z_idans leur \u00e9chantillon bootstrap respective. Cela permet \u00e0 RandomForestClassifier\u00eatre en forme et valid\u00e9e tout en \u00e9tant form\u00e9s\n",
        "\n",
        "```{r}\n",
        "       par(mfrow=c(2,2),oma=c(0,0,2,0))\n",
        "plot(model)\n",
        "plot(model1)\n",
        "plot(model2)\n",
        "plot(model3)\n",
        "title(main=\"le taux d'erreur OOB(hors sac) pour chaque modele \",outer=TRUE)\n",
        "       \n",
        "```\n",
        "\n",
        " Regardons la matrice de confusion de chaque modele\n",
        "\n",
        "\n",
        "```{r}\n",
        "      model$confusion\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "model1$confusion\n",
        "```\n",
        "\n",
        "```{r}\n",
        "model2$confusion\n",
        "```\n",
        "\n",
        "```{r}\n",
        "model3$confusion\n",
        "```\n",
        "\n",
        "Afiichons limportance de chaque variable sur un modele\n",
        "\n",
        "```{r}\n",
        "par(mfrow=c(2,2),oma=c(0,0,2,0))\n",
        "varImpPlot(model)\n",
        "varImpPlot(model1)\n",
        "varImpPlot(model2)\n",
        "varImpPlot(model3)\n",
        "title(main=\"Importance by model\",outer=TRUE)\n",
        "```\n",
        "```{r}\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{r}\n",
        "acc <- 1-model$err.rate[nrow(model$err.rate),1]\n",
        "acc1 <- 1-model1$err.rate[nrow(model1$err.rate),1]\n",
        "acc2 <- 1-model2$err.rate[nrow(model1$err.rate),1]\n",
        "acc3 <- 1-model3$err.rate[nrow(model1$err.rate),1]\n",
        "acc_all <- rbind(acc,acc1,acc2,acc3)\n",
        "plot(acc_all, main=\"Accuracy by model\", col=c(1,2,3,4), pch=16)\n",
        "legend(\"bottomright\", legend=c(\"model\", \"model1\", \"model2\", \"model3\"), cex=0.7, col=c(1,2,3,4), pch=16)\n",
        "```\n",
        "\n",
        "```{r}\n",
        "importance <- importance(model)\n",
        "importance1 <- importance(model1)\n",
        "importance2 <- importance(model2)\n",
        "importance3 <- importance(model3)\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "```{r}\n",
        "varImportance <- data.frame(Variables = row.names(importance), \n",
        "                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n",
        "# Create a rank variable based on importance\n",
        "rankImportance <- varImportance %>%\n",
        "  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n",
        "\n",
        "# Use ggplot2 to visualize the relative importance of variables\n",
        "ggplot(rankImportance, aes(x = reorder(Variables, Importance), \n",
        "    y = Importance, fill = Importance)) +\n",
        "  geom_bar(stat='identity') + \n",
        "  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n",
        "    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n",
        "  labs(x = 'Variables') +\n",
        "  coord_flip() + \n",
        "  theme_few()\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "# Predict\n",
        "predict1 <- predict(model,type=\"prob\",newdata=train)[,2]\n",
        "predict2 <- predict(model1,type=\"prob\",newdata=train)[,2]\n",
        "predict3 <- predict(model2,type=\"prob\",newdata=train)[,2]\n",
        "predict4 <- predict(model3,type=\"prob\",newdata=train)[,2]\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "# Prediction\n",
        "rf.pred <- prediction(predict1, train$Survived)\n",
        "rf.pred1 <- prediction(predict2, train$Survived)\n",
        "rf.pred2 <- prediction(predict3, train$Survived)\n",
        "rf.pred3 <- prediction(predict4, train$Survived)\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "# Performance\n",
        "tt.rf.perf <- performance(rf.pred,\"tpr\",\"fpr\")\n",
        "tt.rf.perf1 <- performance(rf.pred1,\"tpr\",\"fpr\")\n",
        "tt.rf.perf2 <- performance(rf.pred2,\"tpr\",\"fpr\")\n",
        "tt.rf.perf3 <- performance(rf.pred3,\"tpr\",\"fpr\")\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "# Calculate AUC\n",
        "rf.auc <- performance(rf.pred,\"auc\")\n",
        "rf.auc1 <- performance(rf.pred1,\"auc\")\n",
        "rf.auc2 <- performance(rf.pred2,\"auc\")\n",
        "rf.auc3 <- performance(rf.pred3,\"auc\")\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "# Converting S4 class to vector\n",
        "tt.rf.auc <- unlist(slot(rf.auc, \"y.values\"))\n",
        "tt.rf.auc1 <- unlist(slot(rf.auc1, \"y.values\"))\n",
        "tt.rf.auc2 <- unlist(slot(rf.auc2, \"y.values\"))\n",
        "tt.rf.auc3 <- unlist(slot(rf.auc3, \"y.values\"))\n",
        "auc <- rbind(tt.rf.auc,tt.rf.auc1,tt.rf.auc2,tt.rf.auc3)\n",
        "auc\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "# Minimum and Maximum AUC\n",
        "minauc <- min(round(auc, digits = 4))\n",
        "maxauc <- max(round(auc, digits = 4))\n",
        "minauct <- paste(c(\"min(AUC) = \"),minauc,sep=\"\")\n",
        "maxauct <- paste(c(\"max(AUC) = \"),maxauc,sep=\"\")\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "```{r}\n",
        "plot(tt.rf.perf,main=\"ROC Curve for Random Forest\",col=1,lwd=1) # Black\n",
        "plot(tt.rf.perf1,col=2,lwd=1, add=TRUE) # Red\n",
        "plot(tt.rf.perf2,col=3,lwd=1, add=TRUE) # Green\n",
        "plot(tt.rf.perf3,col=4,lwd=1, add=TRUE) # Blue\n",
        "abline(a=0,b=1,lwd=2,lty=2,col=\"gray\")\n",
        "legend('bottom',c(minauct,maxauct),cex=0.7, border = FALSE)\n",
        "legend(\"bottomright\", legend=c(\"model\", \"model1\", \"model2\", \"model3\"), cex=0.7, col=c(1,2,3,4), lwd=1)\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "titanic1.pred <- predict(model1, newdata = test)\n",
        "titanic3.pred <- predict(model3, newdata = test)\n",
        "\n",
        "PassengerId <- test$PassengerId\n",
        "\n",
        "output1.df <- as.data.frame(PassengerId)\n",
        "output3.df <- as.data.frame(PassengerId)\n",
        "\n",
        "output1.df$Survived <- titanic1.pred\n",
        "output3.df$Survived <- titanic3.pred\n",
        "\n",
        "write.csv(output1.df, file=\"rf_model1.csv\", row.names = FALSE)\n",
        "write.csv(output3.df, file=\"rf_model3.csv\", row.names = FALSE)\n",
        "```"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}