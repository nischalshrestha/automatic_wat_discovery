{"cells":[{"metadata":{"_uuid":"a4d58fb48ae2e2abeb62e5f83a5faf18be0be074","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.\n\n\n# This code read the titanic data files and do some feature engineering\n# Load raw data\n\n#==============================================================================\n#\n# Code 1 started\n#\n#==============================================================================\n\nsetwd(\"F:/courses/Data_R_Programming/\")\ntrain <- read.csv(\"train.csv\", header = TRUE)\ntest <- read.csv(\"test.csv\", header = TRUE)\n\n# Add a \"Survived\" variable to the test set to allow for combining data sets\ntest.survived <- data.frame(Survived = rep(\"None\", nrow(test)), test[,])\n\n# Combine data sets\ndata.combined <- rbind(train, test.survived)\n\n# A bit about R data types (e.g., factors)\nstr(data.combined)\n\ndata.combined$Survived <- as.factor(data.combined$Survived)\ndata.combined$Pclass <- as.factor(data.combined$Pclass)\n\n\n# Take a look at gross survival rates\ntable(data.combined$Survived)\n\n\n# Distribution across classes\ntable(data.combined$Pclass)\n\n\n# Load up ggplot2 package to use for visualizations\nlibrary(ggplot2)\n\n\n# Hypothesis - Rich folks survived at a higer rate\ntrain$Pclass <- as.factor(train$Pclass)\nggplot(train, aes(x = Pclass, fill = factor(Survived))) +\n  geom_bar() +\n  xlab(\"Pclass\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\") \n\n\n# Examine the first few names in the training data set\nhead(as.character(train$Name))\n\n\n# How many unique names are there across both train & test?\nlength(unique(as.character(data.combined$Name)))\n\n\n# Two duplicate names, take a closer look\n# First, get the duplicate names and store them as a vector\ndup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), \"Name\"])\n\n\n# Next, take a look at the records in the combined data set\ndata.combined[which(data.combined$Name %in% dup.names),]\n\n\n# What is up with the 'Miss.' and 'Mr.' thing?\nlibrary(stringr)\n\n\n# Any correlation with other variables (e.g., sibsp)?\nmisses <- data.combined[which(str_detect(data.combined$Name, \"Miss.\")),]\nmisses[1:5,]\n\n\n# Hypothesis - Name titles correlate with age\nmrses <- data.combined[which(str_detect(data.combined$Name, \"Mrs.\")), ]\nmrses[1:5,]\n\n\n# Check out males to see if pattern continues\nmales <- data.combined[which(train$Sex == \"male\"), ]\nmales[1:5,]\n\n\n# Expand upon the realtionship between `Survived` and `Pclass` by adding the new `Title` variable to the\n# data set and then explore a potential 3-dimensional relationship.\n\n# Create a utility function to help with title extraction\n# NOTE - Using the grep function here, but could have used the str_detect function as well.\nextractTitle <- function(name) {\n  name <- as.character(name)\n  \n  if (length(grep(\"Miss.\", name)) > 0) {\n    return (\"Miss.\")\n  } else if (length(grep(\"Master.\", name)) > 0) {\n    return (\"Master.\")\n  } else if (length(grep(\"Mrs.\", name)) > 0) {\n    return (\"Mrs.\")\n  } else if (length(grep(\"Mr.\", name)) > 0) {\n    return (\"Mr.\")\n  }   else {\n    return (\"Other\")\n  }\n}\n\n\n# NOTE - The code below uses a for loop which is not a very R way of\n#        doing things\ntitles <- NULL\nfor (i in 1:nrow(data.combined)) {\n  titles <- c(titles, extractTitle(data.combined[i,\"Name\"]))\n}\ndata.combined$title <- as.factor(titles)\n\n\n# Since we only have survived lables for the train set, only use the\n# first 891 rows\nggplot(data.combined[1:891,], aes(x = title, fill = Survived)) +\n  stat_count(width = 0.5) +\n  facet_wrap(~Pclass) + \n  ggtitle(\"Pclass\") +\n  xlab(\"Title\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\")\n\n\n\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n\n\n#==============================================================================\n#\n# Code 2 started\n#\n#==============================================================================\n\n\n\n# What's the distribution of females to males across train & test?\ntable(data.combined$Sex)\n\n\n# Visualize the 3-way relationship of sex, pclass, and survival, compare to analysis of title\nggplot(data.combined[1:891,], aes(x = Sex, fill = Survived)) +\n  stat_count(width = 0.5) +\n  facet_wrap(~Pclass) + \n  ggtitle(\"Pclass\") +\n  xlab(\"Sex\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\")\n\n\n# OK, age and sex seem pretty important as derived from analysis of title, let's take a closer \n# look at the distibutions of age over entire data set\nsummary(data.combined$Age)\nsummary(data.combined[1:891,\"Age\"])\n\n# Just to be thorough, take a look at survival rates broken out by sex, pclass, and age\nggplot(data.combined[1:891,], aes(x = Age, fill = Survived)) +\n  facet_wrap(~Sex + Pclass) +\n  geom_histogram(binwidth = 10) +\n  xlab(\"Age\") +\n  ylab(\"Total Count\")\n\n\n# Validate that \"Master.\" is a good proxy for male children\nboys <- data.combined[which(data.combined$title == \"Master.\"),]\nsummary(boys$Age)\n\n\n# We know that \"Miss.\" is more complicated, let's examine further\nmisses <- data.combined[which(data.combined$title == \"Miss.\"),]\nsummary(misses$Age)\n\nggplot(misses[misses$Survived != \"None\",], aes(x = Age, fill = Survived)) +\n  facet_wrap(~Pclass) +\n  geom_histogram(binwidth = 5) +\n  ggtitle(\"Age for 'Miss.' by Pclass\") + \n  xlab(\"Age\") +\n  ylab(\"Total Count\")\n\n\n# OK, appears female children may have different survival rate, \n# could be a candidate for feature engineering later\nmisses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0),]\nsummary(misses.alone$Age)\nlength(which(misses.alone$Age <= 14.5))\n\n\n# Move on to the sibsp variable, summarize the variable\nsummary(data.combined$SibSp)\n\n\n# Can we treat as a factor?\nlength(unique(data.combined$SibSp))\n\n\ndata.combined$sibsp <- as.factor(data.combined$SibSp)\n\n\n# We believe title is predictive. Visualize survival reates by sibsp, pclass, and title\nggplot(data.combined[1:891,], aes(x = SibSp, fill = Survived)) +\n  stat_count(width = 1) +\n  facet_wrap(~Pclass + title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"SibSp\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\n\n# Treat the parch vaiable as a factor and visualize\ndata.combined$parch <- as.factor(data.combined$Parch)\nggplot(data.combined[1:891,], aes(x = Parch, fill = Survived)) +\n  stat_count(width = 1) +\n  facet_wrap(~Pclass + title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"ParCh\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\n\n# Let's try some feature engineering. What about creating a family size feature?\ntemp.sibsp <- c(train$SibSp, test$SibSp)\ntemp.parch <- c(train$parch, test$Parch)\ndata.combined$family.size <- as.factor(temp.sibsp + temp.parch + 1)\n\n\n# Visualize it to see if it is predictive\nggplot(data.combined[1:891,], aes(x = family.size, fill = Survived)) +\n  stat_count(width = 1) +\n  facet_wrap(~Pclass + title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"family.size\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\n\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n\n\n#==============================================================================\n#\n# Code 3 started\n#\n#==============================================================================\n\n\n\n\n\n# Take a look at the ticket variable\nstr(data.combined$Ticket)\n\n\n# Based on the huge number of levels ticket really isn't a factor variable it is a string. \n# Convert it and display first 20\ndata.combined$ticket <- as.character(data.combined$Ticket)\ndata.combined$Ticket[1:20]\n\n\n# There's no immediately apparent structure in the data, let's see if we can find some.\n# We'll start with taking a look at just the first char for each\nticket.first.char <- ifelse(data.combined$Ticket == \"\", \" \", substr(data.combined$Ticket, 1, 1))\nunique(ticket.first.char)\n\n\n# OK, we can make a factor for analysis purposes and visualize\ndata.combined$ticket.first.char <- as.factor(ticket.first.char)\n\n# First, a high-level plot of the data\nggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +\n  geom_bar() +\n  ggtitle(\"Survivability by ticket.first.char\") +\n  xlab(\"ticket.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,350) +\n  labs(fill = \"Survived\")\n\n# Ticket seems like it might be predictive, drill down a bit\nggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass) + \n  ggtitle(\"Pclass\") +\n  xlab(\"ticket.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,150) +\n  labs(fill = \"Survived\")\n\n# Lastly, see if we get a pattern when using combination of pclass & title\nggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass + title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"ticket.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,200) +\n  labs(fill = \"Survived\")\n\n\n\n\n# Next up - the fares Titanic passengers paid\nsummary(data.combined$Fare)\nlength(unique(data.combined$Fare))\n\n\n# Can't make fare a factor, treat as numeric & visualize with histogram\nggplot(data.combined, aes(x = Fare)) +\n  stat_count(width = 5) +\n  ggtitle(\"Combined Fare Distribution\") +\n  xlab(\"Fare\") +\n  ylab(\"Total Count\") +\n  ylim(0,200)\n\n\n# Let's check to see if fare has predictive power\nggplot(data.combined[1:891,], aes(x = Fare, fill = Survived)) +\n  stat_count(width = 5) +\n  facet_wrap(~Pclass + title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"fare\") +\n  ylab(\"Total Count\") +\n  ylim(0,50) + \n  labs(fill = \"Survived\")\n\n\n\n\n# Analysis of the cabin variable\nstr(data.combined$Cabin)\n\n\n# Cabin really isn't a factor, make a string and the display first 100\ndata.combined$cabin <- as.character(data.combined$Cabin)\ndata.combined$cabin[1:100]\n\n\n# Replace empty cabins with a \"U\"\ndata.combined[which(data.combined$Cabin == \"\"), \"cabin\"] <- \"U\"\ndata.combined$Cabin[1:100]\n\n\n# Take a look at just the first char as a factor\ncabin.first.char <- as.factor(substr(data.combined$Cabin, 1, 1))\nstr(cabin.first.char)\nlevels(cabin.first.char)\n\n\n# Add to combined data set and plot \ndata.combined$cabin.first.char <- cabin.first.char\n\n# High level plot\nggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +\n  geom_bar() +\n  ggtitle(\"Survivability by cabin.first.char\") +\n  xlab(\"cabin.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,750) +\n  labs(fill = \"Survived\")\n\n# Could have some predictive power, drill in\nggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass) +\n  ggtitle(\"Survivability by cabin.first.char\") +\n  xlab(\"Pclass\") +\n  ylab(\"Total Count\") +\n  ylim(0,500) +\n  labs(fill = \"Survived\")\n\n# Does this feature improve upon pclass + title?\nggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass + title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"cabin.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,500) +\n  labs(fill = \"Survived\")\n\n\n# What about folks with multiple cabins?\ndata.combined$cabin.multiple <- as.factor(ifelse(str_detect(data.combined$Cabin, \" \"), \"Y\", \"N\"))\n\nggplot(data.combined[1:891,], aes(x = cabin.multiple, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass + title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"cabin.multiple\") +\n  ylab(\"Total Count\") +\n  ylim(0,350) +\n  labs(fill = \"Survived\")\n\n\n\n\n# Does survivability depend on where you got onboard the Titanic?\nstr(data.combined$Embarked)\nlevels(data.combined$Embarked)\n\n\n# Plot data for analysis\nggplot(data.combined[1:891,], aes(x = Embarked, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass + title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"embarked\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\n\n\n\n\n\n#==============================================================================\n#\n# code #4 - Exploratory Modeling 1\n#\n#==============================================================================\n\n\nlibrary(randomForest)\n\n# Train a Random Forest with the default parameters using pclass & title\nrf.train.1 <- data.combined[1:891, c(\"Pclass\", \"title\")]\nrf.label <- as.factor(train$Survived)\n\nset.seed(1234)\nrf.1 <- randomForest(x = rf.train.1, y = rf.label, importance = TRUE, ntree = 1000)\nrf.1\nvarImpPlot(rf.1)\n\n\n\n# Train a Random Forest using pclass, title, & sibsp\nrf.train.2 <- data.combined[1:891, c(\"Pclass\", \"title\", \"SibSp\")]\n\nset.seed(1234)\nrf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)\nrf.2\nvarImpPlot(rf.2)\n\n\n\n# Train a Random Forest using pclass, title, & parch\nrf.train.3 <- data.combined[1:891, c(\"Pclass\", \"title\", \"Parch\")]\n\nset.seed(1234)\nrf.3 <- randomForest(x = rf.train.3, y = rf.label, importance = TRUE, ntree = 1000)\nrf.3\nvarImpPlot(rf.3)\n\n\n\n# Train a Random Forest using pclass, title, sibsp, parch\nrf.train.4 <- data.combined[1:891, c(\"Pclass\", \"title\", \"SibSp\", \"Parch\")]\n\nset.seed(1234)\nrf.4 <- randomForest(x = rf.train.4, y = rf.label, importance = TRUE, ntree = 1000)\nrf.4\nvarImpPlot(rf.4)\n\n\n\n# Train a Random Forest using pclass, title, & family.size\nrf.train.5 <- data.combined[1:891, c(\"Pclass\", \"title\", \"family.size\")]\n\nset.seed(1234)\nrf.5 <- randomForest(x = rf.train.5, y = rf.label, importance = TRUE, ntree = 1000)\nrf.5\nvarImpPlot(rf.5)\n\n\n\n# Train a Random Forest using pclass, title, sibsp, & family.size\nrf.train.6 <- data.combined[1:891, c(\"Pclass\", \"title\", \"sibsp\", \"family.size\")]\n\nset.seed(1234)\nrf.6 <- randomForest(x = rf.train.6, y = rf.label, importance = TRUE, ntree = 1000)\nrf.6\nvarImpPlot(rf.6)\n\n\n\n# Train a Random Forest using pclass, title, parch, & family.size\nrf.train.7 <- data.combined[1:891, c(\"Pclass\", \"title\", \"parch\", \"family.size\")]\n\nset.seed(1234)\nrf.7 <- randomForest(x = rf.train.7, y = rf.label, importance = TRUE, ntree = 1000)\nrf.7\nvarImpPlot(rf.7)\n\n\n\n\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n\n\n#==============================================================================\n#\n# Code 5 started\n#\n#==============================================================================\n\n\n# Before we jump into features engineering we need to establish a methodology\n# for estimating our error rate on the test set (i.e., unseen data). This is\n# critical, for without this we are more likely to overfit. Let's start with a \n# submission of rf.5 to Kaggle to see if our OOB error estimate is accurate.\n\n# Subset our test records and features\ntest.submit.df <- data.combined[892:1309, c(\"Pclass\", \"title\", \"family.size\")]\n\n# Make predictions\nrf.5.preds <- predict(rf.5, test.submit.df)\ntable(rf.5.preds)\n\n# Write out a CSV file for submission to Kaggle\nsubmit.df <- data.frame(PassengerId = rep(892:1309), Survived = rf.5.preds)\n\nwrite.csv(submit.df, file = \"RF_SUB_20171202_1.csv\", row.names = FALSE)\n\n# Our submission scores 0.79426, but the OOB predicts that we should score 0.8159.\n# Let's look into cross-validation using the caret package to see if we can get\n# more accurate estimates\n\n\n\n\n#==============================================================================\n#\n# Code #6 - Exploratory Modeling 2\n#\n#==============================================================================\n\n# Let's use a single decision tree to better understand what's going on with our\n# features. Obviously Random Forests are far more powerful than single trees,\n# but single trees have the advantage of being easier to understand.\n\n# Install and load packages\n#install.packages(\"rpart\")\n#install.packages(\"rpart.plot\")\nlibrary(rpart)\nlibrary(rpart.plot)\n\n# Per Code #5, let's use 3-fold CV repeated 10 times \n\n# Create utility function\nrpart.cv <- function(seed, training, labels, ctrl) {\n  cl <- makeCluster(6, type = \"SOCK\")\n  registerDoSNOW(cl)\n  \n  set.seed(seed)\n  # Leverage formula interface for training\n  rpart.cv <- train(x = training, y = labels, method = \"rpart\", tuneLength = 30, \n                    trControl = ctrl)\n  \n  #Shutdown cluster\n  stopCluster(cl)\n  \n  return (rpart.cv)\n}\n\n# Grab features\nfeatures <- c(\"Pclass\", \"title\", \"family.size\")\nrpart.train.1 <- data.combined[1:891, features]\n\n# Run CV and check out results\nrpart.1.cv.1 <- rpart(rf.label~Pclass+ title+ family.size,data=rpart.train.1)\nlibrary(rpart.plot)\ninstall.packages('rattle')\ninstall.packages('rpart.plot')\ninstall.packages('RColorBrewer')\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\nfancyRpartPlot(rpart.1.cv.1)\n\n\n\n\n\n\n\n# The plot bring out some interesting lines of investigation. Namely:\n#      1 - Titles of \"Mr.\" and \"Other\" are predicted to perish at an \n#          overall accuracy rate of 83.2 %.\n#      2 - Titles of \"Master.\", \"Miss.\", & \"Mrs.\" in 1st & 2nd class\n#          are predicted to survive at an overall accuracy rate of 94.9%.\n#      3 - Titles of \"Master.\", \"Miss.\", & \"Mrs.\" in 3rd class with \n#          family sizes equal to 5, 6, 8, & 11 are predicted to perish\n#          with 100% accuracy.\n#      4 - Titles of \"Master.\", \"Miss.\", & \"Mrs.\" in 3rd class with \n#          family sizes not equal to 5, 6, 8, or 11 are predicted to \n#          survive with 59.6% accuracy.\n\n\n# Both rpart and rf confirm that title is important, let's investigate further\ntable(data.combined$title)\n\n# Parse out last name and title\ndata.combined[1:25, \"name\"]\nlibrary(stringr)\n\nname.splits <- str_split(data.combined$Name, \",\")\nname.splits[1]\nlast.names <- sapply(name.splits, \"[\", 1)\nlast.names[1:10]\n\n# Add last names to dataframe in case we find it useful later\ndata.combined$last.name <- last.names\n\n# Now for titles\nname.splits <- str_split(sapply(name.splits, \"[\", 2), \" \")\ntitles <- sapply(name.splits, \"[\", 2)\nunique(titles)\n\n# What's up with a title of 'the'?\ndata.combined[which(titles == \"the\"),]\n\n# Re-map titles to be more exact\ntitles[titles %in% c(\"Dona.\", \"the\")] <- \"Lady.\"\ntitles[titles %in% c(\"Ms.\", \"Mlle.\")] <- \"Miss.\"\ntitles[titles == \"Mme.\"] <- \"Mrs.\"\ntitles[titles %in% c(\"Jonkheer.\", \"Don.\")] <- \"Sir.\"\ntitles[titles %in% c(\"Col.\", \"Capt.\", \"Major.\")] <- \"Officer\"\ntable(titles)\n\n# Make title a factor\ndata.combined$new.title <- as.factor(titles)\n\n# Visualize new version of title\nggplot(data.combined[1:891,], aes(x = new.title, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass) + \n  ggtitle(\"Surival Rates for new.title by pclass\")\n\n# Collapse titles based on visual analysis\nindexes <- which(data.combined$new.title == \"Lady.\")\ndata.combined$new.title[indexes] <- \"Mrs.\"\n\nindexes <- which(data.combined$new.title == \"Dr.\" | \n                   data.combined$new.title == \"Rev.\" |\n                   data.combined$new.title == \"Sir.\" |\n                   data.combined$new.title == \"Officer\")\ndata.combined$new.title[indexes] <- \"Mr.\"\n\n# Visualize \nggplot(data.combined[1:891,], aes(x = new.title, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~ Pclass) +\n  ggtitle(\"Surival Rates for Collapsed new.title by pclass\")\n\n\n# Grab features\nfeatures <- c(\"Pclass\", \"new.title\", \"family.size\")\nrpart.train.2 <- data.combined[1:891, features]\n\n# Run CV and check out results\nrpart.2.cv.1 <- rpart(rf.label~Pclass+ new.title+ family.size,data=rpart.train.2)\n\nrpart.2.cv.1\n\n# Plot\nfancyRpartPlot(rpart.2.cv.1)\n\n\n\n# Dive in on 1st class \"Mr.\"\nindexes.first.mr <- which(data.combined$new.title == \"Mr.\" & data.combined$Pclass == \"1\")\nfirst.mr.df <- data.combined[indexes.first.mr, ]\nsummary(first.mr.df)\n\n# One female?\nfirst.mr.df[first.mr.df$sex == \"female\",]\n\n# Update new.title feature\nindexes <- which(data.combined$new.title == \"Mr.\" & \n                   data.combined$Sex == \"female\")\ndata.combined$new.title[indexes] <- \"Mrs.\"\n\n# Any other gender slip-ups?\nlength(which(data.combined$Sex == \"female\" & \n               (data.combined$new.title == \"Master.\" |\n                  data.combined$new.title == \"Mr.\")))\n\n# Refresh data frame\nindexes.first.mr <- which(data.combined$new.title == \"Mr.\" & data.combined$Pclass == \"1\")\nfirst.mr.df <- data.combined[indexes.first.mr, ]\n\n# Let's look at surviving 1st class \"Mr.\"\nsummary(first.mr.df[first.mr.df$Survived == \"1\",])\nView(first.mr.df[first.mr.df$Survived == \"1\",])\n\n# Take a look at some of the high fares\nindexes <- which(data.combined$ticket == \"PC 17755\" |\n                   data.combined$ticket == \"PC 17611\" |\n                   data.combined$ticket == \"113760\")\nView(data.combined[indexes,])\n\n# Visualize survival rates for 1st class \"Mr.\" by fare\nggplot(first.mr.df, aes(x = Fare, fill = Survived)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"1st Class 'Mr.' Survival Rates by fare\")\n\n\n# Engineer features based on all the passengers with the same ticket\nticket.party.size <- rep(0, nrow(data.combined))\navg.fare <- rep(0.0, nrow(data.combined))\ntickets <- unique(data.combined$ticket)\n\nfor (i in 1:length(tickets)) {\n  current.ticket <- tickets[i]\n  party.indexes <- which(data.combined$ticket == current.ticket)\n  current.avg.fare <- data.combined[party.indexes[1], \"Fare\"] / length(party.indexes)\n  \n  for (k in 1:length(party.indexes)) {\n    ticket.party.size[party.indexes[k]] <- length(party.indexes)\n    avg.fare[party.indexes[k]] <- current.avg.fare\n  }\n}\n\ndata.combined$ticket.party.size <- ticket.party.size\ndata.combined$avg.fare <- avg.fare\n\n# Refresh 1st class \"Mr.\" dataframe\nfirst.mr.df <- data.combined[indexes.first.mr, ]\nsummary(first.mr.df)\n\n\n# Visualize new features\nggplot(first.mr.df[first.mr.df$Survived != \"None\",], aes(x = ticket.party.size, fill = Survived)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Survival Rates 1st Class 'Mr.' by ticket.party.size\")\n\nggplot(first.mr.df[first.mr.df$Survived != \"None\",], aes(x = avg.fare, fill = Survived)) +\n  geom_density(alpha = 0.5) +\n  ggtitle(\"Survival Rates 1st Class 'Mr.' by avg.fare\")\n\n\n# Hypothesis - ticket.party.size is highly correlated with avg.fare\nsummary(data.combined$avg.fare)\n\n# One missing value, take a look\ndata.combined[is.na(data.combined$avg.fare), ]\n\n# Get records for similar passengers and summarize avg.fares\nindexes <- with(data.combined, which(Pclass == \"3\" & title == \"Mr.\" & family.size == 1 &\n                                       ticket != \"3701\"))\nsimilar.na.passengers <- data.combined[indexes,]\nsummary(similar.na.passengers$avg.fare)\n\n# Use median since close to mean and a little higher than mean\ndata.combined[is.na(avg.fare), \"avg.fare\"] <- 7.840\n\n# Leverage caret's preProcess function to normalize data\npreproc.data.combined <- data.combined[, c(\"ticket.party.size\", \"avg.fare\")]\npreProc <- preProcess(preproc.data.combined, method = c(\"center\", \"scale\"))\n\npostproc.data.combined <- predict(preProc, preproc.data.combined)\n\n# Hypothesis refuted for all data\ncor(postproc.data.combined$ticket.party.size, postproc.data.combined$avg.fare)\n\n# How about for just 1st class all-up?\nindexes <- which(data.combined$Pclass == \"1\")\ncor(postproc.data.combined$ticket.party.size[indexes], \n    postproc.data.combined$avg.fare[indexes])\n# Hypothesis refuted again\n\n\n# OK, let's see if our feature engineering has made any difference\nfeatures <- c(\"Pclass\", \"new.title\", \"family.size\", \"ticket.party.size\", \"avg.fare\")\nrpart.train.3 <- data.combined[1:891, features]\n\n# Run CV and check out results\nrpart.3.cv.1 <- rpart(rf.label~Pclass+ new.title+ family.size+ticket.party.size+avg.fare,data=rpart.train.3)\n\nrpart.3.cv.1\n\n# Plot\nfancyRpartPlot(rpart.3.cv.1)\n\n\n\n\n\n\n#==============================================================================\n#\n# Code #7 - Submitting, scoring, and some analysis.\n#\n#==============================================================================\n\n#\n# Rpart scores 0.80383\n#\n# Subset our test records and features\ntest.submit.df <- data.combined[892:1309, features]\n\n# Make predictions\nrpart.3.preds <- predict(rpart.3.cv.1, test.submit.df, type = \"class\")\ntable(rpart.3.preds)\n\n# Write out a CSV file for submission to Kaggle\nsubmit.df <- data.frame(PassengerId = rep(892:1309), Survived = rpart.3.preds)\n\nwrite.csv(submit.df, file = \"RPART_SUB_20160619_1.csv\", row.names = FALSE)\n\n\n#\n# Random forest scores 0.80861\n#\nfeatures <- c(\"Pclass\", \"new.title\", \"ticket.party.size\", \"avg.fare\")\nrf.train.temp <- data.combined[1:891, features]\n\nset.seed(1234)\nrf.temp <- randomForest(x = rf.train.temp, y = rf.label, ntree = 1000)\nrf.temp\n\n\ntest.submit.df <- data.combined[892:1309, features]\n\n# Make predictions\nrf.preds <- predict(rf.temp, test.submit.df)\ntable(rf.preds)\n\n# Write out a CSV file for submission to Kaggle\nsubmit.df <- data.frame(PassengerId = rep(892:1309), Survived = rf.preds)\n\nwrite.csv(submit.df, file = \"RF_SUB_20171202_1.csv\", row.names = FALSE)\n\n\n# ***************************************************** T h e    e n d  ***********************************\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5c569113ace160cdf9747e497e721757f139f665"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fe9e0ee4d4bdb20fffde41d48176f38b33d1b583"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}