{"cells": [{"cell_type": "markdown", "source": "Hi, \nI am new to Machine Learning and Kaggle. I have gone through some of the work done by other Kagglers for my understanding. I will be using Decision Trees for solving this classification problem and will be doing basic data manipulation, treating missing values and some comprehensive visualizations along the way. Later, i plan to use Random Forest to understand (practically) how well it help with the over-fitting issue in decision trees. I am looking forward to learning a lot from Kaggle, so feedback is most welcome!", "execution_count": null, "metadata": {"_uuid": "feb450226df8347120dcc0f190fc7b18c096cebb", "_execution_state": "idle", "collapsed": false, "_cell_guid": "042023cf-6a63-4ae0-b634-99ddab89b65d"}, "outputs": []}, {"cell_type": "code", "source": "#Loading Packages\n\nlibrary('ggplot2')  # for data visualization\nlibrary('rpart')    # algorithm for decision trees\nlibrary('rattle')   # data mining\nlibrary('dplyr')  #data manipulation\nlibrary('rpart.plot')  # for visualization\nlibrary('RColorBrewer')  # for visualization\nlibrary('randomForest')  # algorithm for random forest\nlibrary('gbm') # algorithm for boosting\n\n", "execution_count": null, "metadata": {"_uuid": "71a338fc4e131eff3f84ea619d8d89648eeed0af", "_execution_state": "idle", "trusted": false, "_cell_guid": "c6cd65c2-3cc2-48b8-8bd1-aeab7e29a509"}, "outputs": []}, {"cell_type": "markdown", "source": "Now importing the data and inspecting it", "execution_count": null, "metadata": {"_uuid": "96cb40ff82fe19b3eca918f0f4a5737b2aaf1695", "_execution_state": "idle", "collapsed": false, "_cell_guid": "e3fe7604-7df2-45a2-9410-23603e8052f9"}, "outputs": []}, {"cell_type": "code", "source": "traindata <- read.csv('../input/train.csv')\ntestdata <- read.csv('../input/test.csv')\n\ntotaldata <- bind_rows(traindata, testdata)\n\nstr(totaldata)\n", "execution_count": null, "metadata": {"_uuid": "15fac215d9382bb53555189173556277039941bb", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "54b7820b-a040-47a7-98ff-c5201559181d"}, "outputs": []}, {"cell_type": "markdown", "source": "Hypothesis:\n1. Children and Female have higher survival rate\n2. Family Size (may include siblings + parents/caretakers) may have led to reduced survival rate\n3.  PClass and Fare may also help in deciding the survival rate\nLet's create one variables and add to the totaldata namely Family_Size", "execution_count": null, "metadata": {"_uuid": "96a5d7866d8fedc267a78cf1272870efb08ccb53", "_execution_state": "idle", "collapsed": false, "_cell_guid": "f3f0cb89-264d-4c63-b5b8-77f6cf5e597c"}, "outputs": []}, {"cell_type": "code", "source": "totaldata$Family_size <- totaldata$SibSp + totaldata$Parch + 1\n\ntotaldata\n\n", "execution_count": null, "metadata": {"_uuid": "868fcc4c2cc20d118c3d279e4ba0738183c429d6", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "d7744d4a-1a90-41e3-9bc0-2dd0afe42d37"}, "outputs": []}, {"cell_type": "code", "source": "# checking the structure of totaldata now\n\nstr(totaldata)", "execution_count": null, "metadata": {"_uuid": "23d0b417180439a5846f23bd77245c1b34491095", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "6b6d93e2-f289-4192-9de2-2592b35d7d30"}, "outputs": []}, {"cell_type": "markdown", "source": "Data Manipulation and treating missing values\n\n 1. Embarked values\n 2. Age\n 3. Fare\n\nI will not be excluding these values. Rather, I will impute the values based on mean, median or mode of the available data for embarked code and fare. For age, I will be predicting the values based on the existing variables and using the Anova method.", "execution_count": null, "metadata": {"_uuid": "5253d0b0d8f4b8411059d93472d1b3be80594928", "_execution_state": "idle", "collapsed": false, "_cell_guid": "034d2030-dab7-46e3-acd1-8be647ab44fc"}, "outputs": []}, {"cell_type": "code", "source": "# fill the missing values in embarkment for 62 & 830\n\nembark1 <- subset(totaldata, !( PassengerId==62 | PassengerId==830)) \n\n# Use ggplot2 to visualize embarkment, passenger class, & median fare\nggplot(embark1, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot()\n", "execution_count": null, "metadata": {"_uuid": "f3a216b54a1b1a5aa25f40843d10ba935b578e63", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "255f6195-0937-4fa0-8c55-9c1628d5eb19"}, "outputs": []}, {"cell_type": "markdown", "source": "So, from the boxplot, noticed that the median value for 1st class passenger embarking from C is around $80. Similar is the case for passenger id 62 and 830, both travelled in 1st class and paid $80. so we can safely assume they embarked from C.", "execution_count": null, "metadata": {"_uuid": "61d4a7199d62f65555bfb1cc259ada465772b323", "_execution_state": "idle", "collapsed": false, "_cell_guid": "af299cd6-6963-4ae9-ad16-c3c027637b82"}, "outputs": []}, {"cell_type": "code", "source": "totaldata$Embarked[c(62, 830)] <- \"C\"\n\n#factorizing the embarked column because categorical data\n\ntotaldata$Embarked <- factor(totaldata$Embarked)\n", "execution_count": null, "metadata": {"_uuid": "b3562242f36274d3375d5a5a3345fc809139feab", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "ffcb0a38-c7e9-409d-a429-60980fdccb55"}, "outputs": []}, {"cell_type": "markdown", "source": "Now, lets look at the missing age values in the table which seem to be quite a lot. I am going to simply use a decision tree model to predict age using other variables and using the Anova method as we are predicting continuous variable. ", "execution_count": null, "metadata": {"_uuid": "d1ad622b22b9e48f1f3004fd34123a2fcfab7468", "_execution_state": "idle", "collapsed": false, "_cell_guid": "5b1ee0ea-305b-4f51-a72b-251050e64ef4"}, "outputs": []}, {"cell_type": "code", "source": "age_predicted <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Family_size,\n                       data = totaldata[!is.na(totaldata$Age),], method = \"anova\")\ntotaldata$Age[is.na(totaldata$Age)] <- predict(age_predicted, totaldata[is.na(totaldata$Age),])\n\n", "execution_count": null, "metadata": {"_uuid": "3b5223196ec3ec8940fd471830be5f3959b75d44", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "9bff47c8-d0a1-492f-8539-f65777ee2a9d"}, "outputs": []}, {"cell_type": "markdown", "source": "Finally, we can impute the fare value for passenger 1044 who embarked from S and travelled in Pclass 3. I will be looking at median for similar passenger with same pclass and embarked code. ", "execution_count": null, "metadata": {"_uuid": "a3f10b8139c1854d0acce46c0bd439cfd4a3104a", "_execution_state": "idle", "collapsed": false, "_cell_guid": "c2c10175-6d0d-42d4-a1e4-e538f535f4cf"}, "outputs": []}, {"cell_type": "code", "source": "totaldata$Fare[1044] <- median(totaldata[totaldata$Pclass == \"3\" & totaldata$Embarked == \"S\", ]$Fare, na.rm = TRUE)\n\ntotaldata$Fare[1044]\n", "execution_count": null, "metadata": {"_uuid": "cb5c6b45d9f56f28b72fc14f3b7d3f39f6ae8875", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "d9c02c4b-7b5b-4a61-b801-ddc0c5a9eb96"}, "outputs": []}, {"cell_type": "markdown", "source": "As we can see the median value for 3rd class passengers embarking from \"S\" is $8.05 amd that is the value we have assigned to the passengerid 1044.  Now lets also create one more variable for Child to see if being a child has better survival rates", "execution_count": null, "metadata": {"_uuid": "397b1e8811d19a42b439ecb13c7812e8a372180f", "_execution_state": "idle", "collapsed": false, "_cell_guid": "a3d62dcb-00c2-49ef-a3f6-23c8575f0b03"}, "outputs": []}, {"cell_type": "code", "source": "totaldata$Child <- NA\ntotaldata$Child[totaldata$Age < 18] <- 1\ntotaldata$Child[totaldata$Age >= 18] <- 0\n\nstr(totaldata)", "execution_count": null, "metadata": {"_uuid": "1a114b31543b052bfa3e5c6d97b65e115b3ca88d", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "7de2a7d0-8b22-461d-822b-87d92009571c"}, "outputs": []}, {"cell_type": "code", "source": "# Let's see the proportions in  table\n\nprop.table(table(totaldata$Child, totaldata$Survived),1)\n", "execution_count": null, "metadata": {"_uuid": "4194ff1b0aa36fd8e64eb0e8dedfcdf9992f40bd", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "8f847325-38b9-4ae7-b52e-76e91af81778"}, "outputs": []}, {"cell_type": "code", "source": "# not much of a difference being a child. now let's see if family size can have better predictivity\n\nprop.table(table(totaldata$Family_size, totaldata$Survived), 1)\n\n", "execution_count": null, "metadata": {"_uuid": "a70fefc07746513fd9d91a75657efa073008f14b", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "3ffdbc3f-7c8a-4ba5-925a-c91ae22fbc89"}, "outputs": []}, {"cell_type": "code", "source": "# final check to see if our data is fine for prediction..str(totaldata)\nstr(totaldata)", "execution_count": null, "metadata": {"_uuid": "f68cf9b8a4f8b29467d06176e00e22b77553f968", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "58b8af06-8c66-41c8-8a1d-b00163a40f14"}, "outputs": []}, {"cell_type": "code", "source": "#Splitting the data back to Train & Test datasets\ntrain <- totaldata[1:891,]\ntest <- totaldata[892:1309,]", "execution_count": null, "metadata": {"_uuid": "b9e7e2665d48ccc0286f86902895c8bad2ef18ca", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "0be5a5fb-eb7d-4250-9d8c-d2045e796967"}, "outputs": []}, {"cell_type": "code", "source": "# Now the prediction!!\n\nmodel1 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Family_size + Child,\n                      data = train, method = \"class\")\n\n#visualize the tree \n\nfancyRpartPlot(model1)", "execution_count": null, "metadata": {"_uuid": "c0ef9465705b1c4ee449f7ed4d511031b9febe4e", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "231d1fcc-97d4-46c6-b21a-926b1349b86e"}, "outputs": []}, {"cell_type": "markdown", "source": "So, the most important variables seem to be Sex, Age, Pclass, Fare, Siblings.. Let's do the prediction on train set to understand the performance of the model..", "execution_count": null, "metadata": {"_uuid": "7f5af3dbc12cead78cb13cc7bfae60c410b15989", "_execution_state": "idle", "collapsed": false, "_cell_guid": "675a8a3d-3832-4424-945d-f785aa05d4b1"}, "outputs": []}, {"cell_type": "code", "source": "prediction1 <- predict(model1, train, type = \"class\")\n\nsummary(prediction1)", "execution_count": null, "metadata": {"_uuid": "9e1cac8f82546d139f34efd9d2b0ab4b2d055622", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "e1569ce6-2bbe-4de2-9e95-93c0a7e777d7"}, "outputs": []}, {"cell_type": "code", "source": "#I can see that decision trees is showing death to survival as 624:267 as opposed to 549:342.  Now, I will use the random forest to see if my result changes and by how much...\n\nset.seed(111)\n\nmodel2 <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Child + Family_size,\n                          data = train, importance = TRUE, ntree = 1000)\n\nprediction2 <- predict(model2, train, type = \"class\")\n\nsummary(prediction2)\n", "execution_count": null, "metadata": {"_uuid": "2ab304754226e08cac7b5b45f008b62504d86c28", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "6ffd29a2-e3c7-4db0-977c-28c4974ddd6d"}, "outputs": []}, {"cell_type": "code", "source": "# Random forest seems to get better prediction results. So, i will go with the randomforest model for my prediction. \n\nprediction <- predict(model2, test, type = \"class\")\n\nsolution <- data.frame(PassengerId = test$PassengerId, Survived = prediction)\n\nwrite.csv(solution, file = \"rf_solution.csv\", row.names = FALSE)", "execution_count": null, "metadata": {"_uuid": "a438bb3005e1b5fe358d071bf3f84556525d6b73", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "5a6cc7d9-b000-4dd3-8a9b-9e28cc8571cc"}, "outputs": []}, {"cell_type": "code", "source": "# I am also going to do try out Gadient Boosting to see if the prediction can improve further.. \n\ntotaldata = select(totaldata, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Child, Family_size)\nend_trn = nrow(train)\nend = nrow(totaldata)\nmodel3 = gbm.fit(x = totaldata[1:end_trn, ], y = train$Survived, \n             shrinkage=0.01, distribution = 'bernoulli',\n             interaction.depth=3, nTrain = round(end_trn * 0.8), \n             n.minobsinnode=10, n.trees=3000, verbose=T)\n\nsummary(model3)\ngbm.perf(model3)\n\n", "execution_count": null, "metadata": {"_uuid": "c7262dca08141c910c6fd017519249c9fe150849", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "fe7c1db8-29c5-4bec-9216-d35608f30805"}, "outputs": []}, {"cell_type": "code", "source": "# now checking prediction on train data\n\npredictiontest <- predict(object = model3, newdata = totaldata[1:end_trn,], n.trees = gbm.perf(model3, plot.it = F), type = \"response\")\npredictiontest <- round(predictiontest)\nhead(predictiontest, n=20)\nhead(train$Survived, n=20)\n\n", "execution_count": null, "metadata": {"_uuid": "8d22cf1c914d0298aa0d9480ceeb57fa85446d3c", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "73f33354-6522-4536-959b-410956d9b2df"}, "outputs": []}, {"cell_type": "code", "source": "prediction3 <- predict(object = model3, newdata = totaldata[(end_trn+1):end, ], n.trees = gbm.perf(model3, plot.it = F), type = \"response\")\nprediction3 <- round(prediction3)\nsolution2 <- data.frame(PassengerId = test$PassengerId, Survived = prediction3)\n\nwrite.csv(solution2, file = \"gbm_solution.csv\", row.names = FALSE)", "execution_count": null, "metadata": {"_uuid": "a44ea5e1ff1c0d677f906d98868c7f6ca6bda7cd", "_execution_state": "idle", "collapsed": false, "trusted": false, "_cell_guid": "bfd9679c-19ae-444d-a0bb-1dd33458cbdf"}, "outputs": []}], "nbformat": 4, "nbformat_minor": 0, "metadata": {"language_info": {"pygments_lexer": "r", "version": "3.4.0", "mimetype": "text/x-r-source", "file_extension": ".r", "name": "R", "codemirror_mode": "r"}, "kernelspec": {"name": "ir", "display_name": "R", "language": "R"}}}