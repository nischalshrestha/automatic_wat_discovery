{"cells":[{"metadata":{"trusted":true,"_uuid":"795edbae8b22ac2772a272c205b4b7fbe70746e1"},"cell_type":"code","source":"# Load packages\nlibrary('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"dc3139d0820f16ce3d93f533efcbff103d436c5c"},"cell_type":"code","source":"train <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\nfull  <- bind_rows(train, test) # bind training & test data\n\n# check data\nstr(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"638abc0043936d50327f7cd016d4cba8e2da31fb"},"cell_type":"code","source":"# Grab title from passenger names\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n# Show title counts by sex\ntable(full$Sex, full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"46ccf66f3da81a5ed75deb55c907c1a4daebc966"},"cell_type":"code","source":"# Titles with very low cell counts to be combined to \"rare\" level\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\nfull$Title[full$Title == 'Mlle']        <- 'Miss' \nfull$Title[full$Title == 'Ms']          <- 'Miss'\nfull$Title[full$Title == 'Mme']         <- 'Mrs' \nfull$Title[full$Title %in% rare_title]  <- 'Rare Title'\n\n# Show title counts by sex again\ntable(full$Sex, full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"47e0c5ec1b27b420ba1bef46c691c30b4637ada8"},"cell_type":"code","source":"# Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name,  \n                      function(x) strsplit(x, split = '[,.]')[[1]][1])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a19a5a6c75e5b6559f52281418c23893b70d1ffa"},"cell_type":"code","source":"# Create a family size variable including the passenger themselves\nfull$Fsize <- full$SibSp + full$Parch + 1\n\n# Create a family variable \nfull$Family <- paste(full$Surname, full$Fsize, sep='_')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b2bbdc1770258ecd761ab0cefcee306ec09a057f"},"cell_type":"code","source":"# Use ggplot2 to visualize the relationship between family size & survival\nggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:11)) +\n  labs(x = 'Family Size') +\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9b137836717f2fc9c66f88ae24b53143269955fc"},"cell_type":"code","source":"# Discretize family size\nfull$FsizeD[full$Fsize == 1] <- 'singleton'\nfull$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$FsizeD[full$Fsize > 4] <- 'large'\n\n# Show family size by survival using a mosaic plot\nmosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ed049cada787a0dae243ebe16265d90a4336ed14"},"cell_type":"code","source":"# This variable appears to have a lot of missing values\nfull$Cabin[1:28]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"07c9d2321f8ba022f9f27674a010cf77ba4e6325"},"cell_type":"code","source":"# The first character is the deck. For example:\nstrsplit(full$Cabin[2], NULL)[[1]]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"299676007e5866e2241478e1f25b1c9b3dc92eb0"},"cell_type":"code","source":"# Create a Deck variable. Get passenger deck A - F:\nfull$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"78d280de6b57543e604311c1038e0c9cc0ab56cc"},"cell_type":"code","source":"# Passengers 62 and 830 are missing Embarkment\nfull[c(62, 830), 'Embarked']","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4399d5550b34660f19c4fc36a7a81de2000ea47d"},"cell_type":"code","source":"# Get rid of our missing passenger IDs\nembark_fare <- full %>%\n  filter(PassengerId != 62 & PassengerId != 830)\n\n# Use ggplot2 to visualize embarkment, passenger class, & median fare\nggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), \n    colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous(labels=dollar_format()) +\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f0fcbcf0bf968dd36b08140190f373cbad5c6b1e"},"cell_type":"code","source":"# Since their fare was $80 for 1st class, they most likely embarked from 'C'\nfull$Embarked[c(62, 830)] <- 'C'","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c03d43b90464455f0c70e9e12870c96ed73df76"},"cell_type":"code","source":"# Show row 1044\nfull[1044, ]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9f3e1a58d5d255d56d56768ba6e59a6a6cd71980"},"cell_type":"code","source":"ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], \n  aes(x = Fare)) +\n  geom_density(fill = '#99d6ff', alpha=0.4) + \n  geom_vline(aes(xintercept=median(Fare, na.rm=T)),\n    colour='red', linetype='dashed', lwd=1) +\n  scale_x_continuous(labels=dollar_format()) +\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2627c49c561910e4ede59d55f679e0ddee563557"},"cell_type":"code","source":"# Replace missing fare value with median fare for class/embarkment\nfull$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f5df05af676a63b616ec77d1ff14d3476de523c9"},"cell_type":"code","source":"# Show number of missing Age values\nsum(is.na(full$Age))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d48566877903ab26c0037565b5f22ff0910536a5"},"cell_type":"code","source":"# Make variables factors into factors\nfactor_vars <- c('PassengerId','Pclass','Sex','Embarked',\n                 'Title','Surname','Family','FsizeD')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n\n# Perform mice imputation, excluding certain less-than-useful variables:\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"88d58c8bcedb9e29135e5ebbbb90cffb9e4e7776"},"cell_type":"code","source":"# Save the complete output \nmice_output <- complete(mice_mod)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7c444031f9d1c794ed428b59e19bf06b4dd95966"},"cell_type":"code","source":"# Plot age distributions\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen', ylim=c(0,0.04))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3ff95e9d3b19e4e37d173c906e22a329947f2658"},"cell_type":"code","source":"# Replace Age variable from the mice model.\nfull$Age <- mice_output$Age\n\n# Show new number of missing Age values\nsum(is.na(full$Age))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9416a2ae3cf286d8b77cb0cdc4c3bf6623f199af"},"cell_type":"code","source":"# First we'll look at the relationship between age & survival\nggplot(full[1:891,], aes(Age, fill = factor(Survived))) + \n  geom_histogram() + \n  # I include Sex since we know (a priori) it's a significant predictor\n  facet_grid(.~Sex) + \n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0c623e49d154f6eb341a64946fe53208f65057a2"},"cell_type":"code","source":"# Create the column child, and indicate whether child or adult\nfull$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\n\n# Show counts\ntable(full$Child, full$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6c3986b6dd698950a291bcf6af9193f8676d4304"},"cell_type":"code","source":"# Adding Mother variable\nfull$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n\n# Show counts\ntable(full$Mother, full$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7a98467b0c34f35f0b88c3fa49aff49bf13e9e5b"},"cell_type":"code","source":"# Finish by factorizing our two new factor variables\nfull$Child  <- factor(full$Child)\nfull$Mother <- factor(full$Mother)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f22c272a0b3a0d7dd1481f07ba44bf377a1d919a"},"cell_type":"code","source":"md.pattern(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"105a8ba2bd0ed17c31e52b4ae4832dad3209a3c8"},"cell_type":"code","source":"# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"eee28c9a475f8397cd6f8ba54f859d7a291e8feb"},"cell_type":"code","source":"# Set a random seed\nset.seed(754)\n\n# Build the model (note: not all possible variables are used)\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + \n                                            Fare + Embarked + Title + \n                                            FsizeD + Child + Mother,\n                                            data = train)\n\n# Show model error\nplot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7daa504f7b68044fb11f5fbd995372b0f1685faa"},"cell_type":"code","source":"# Get importance\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"899506ebc7dc9b58cfcf98b854ac42798010a3dd"},"cell_type":"code","source":"# Predict using the test set\nprediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# Write the solution to file\nwrite.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2b98146001d581ce6ada8acfe0870ed05db4bd3c"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}