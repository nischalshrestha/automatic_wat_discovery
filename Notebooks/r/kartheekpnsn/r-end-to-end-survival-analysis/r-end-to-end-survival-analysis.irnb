{"cells":[{"metadata":{"_uuid":"e0738a94fb0e13e0e6d3760999695d50141ba8bc","_cell_guid":"609af148-c249-4747-9413-0a0173369dc0"},"cell_type":"markdown","source":"# R Code for \"Titanic: Machine Learning from Disaster\"\n---\n\n### Competition Description\nThe sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.\n\nOne of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.\n\nIn this challenge, we ask you to complete the analysis of what sorts of people were likely to survive. In particular, we ask you to apply the tools of machine learning to predict which passengers survived the tragedy.\n\n### Additional Details\nAll Additional details on titanic passengers can be read from this [link](https://www.encyclopedia-titanica.org/)\n\n### On the completion of code, you will learn:\n- R code for:\n    - Feature Engineering\n    - Feature Selection\n    - Model building using different algorithms\n    - Ensembling different algorithms\n    \n### Packages used:\n- Data manipulation:\n\t- data.table\n    - caret\n- Plotting\n    - ggplot2\n- Modelling\n\t- ranger (parallelized version of randomForest)\n\t- xgboost\n- Metrics\n     - MLmetrics (for measuring Accuracy)"},{"metadata":{"_uuid":"2a2683a182a07cf29092faa9bba8d5272216fe8e","_cell_guid":"8662e5b9-dfc1-4162-bbc8-35b34851d850"},"cell_type":"markdown","source":"---\n\n---\n## Code"},{"metadata":{"_uuid":"320d9fb98613c47613fd4474a862c582d6fe1311","_cell_guid":"fad72940-2a27-4fe1-a31a-d4ef565e3f0f"},"cell_type":"markdown","source":"### 1. Load the packages"},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"_uuid":"63e7e851b8d8d3aedead67c906795922eb6e8c67","_cell_guid":"cc7a5da5-8a67-4bf2-906f-c34c51e4816d","_execution_state":"idle","trusted":false},"cell_type":"code","source":"library(ggplot2) # Data visualization\nlibrary(data.table) # Data Manipulation\nlibrary(caret) # Data Manipulation\nlibrary(ranger) # Model building\nlibrary(xgboost) # Model building\nlibrary(MLmetrics) # For measuring Accuracy\nlibrary(repr) # # Adjust plot representation\noptions(repr.plot.width = 7, repr.plot.height = 5)","execution_count":53,"outputs":[]},{"metadata":{"_uuid":"7338af271cad352573a556e91bec61becf43b036","_cell_guid":"9dff2bf3-91a9-4ff1-ac1d-8d6596134ad5"},"cell_type":"markdown","source":"---\n### 2. Load the data"},{"metadata":{"collapsed":true,"_uuid":"8fc94b8e6da6a2e3d272b997af13478fcd2c788e","trusted":false,"_cell_guid":"140fc5d3-b515-4667-98b6-759b27e1cd04"},"cell_type":"code","source":"data = fread('../input/train.csv')\ntest = fread('../input/test.csv')","execution_count":54,"outputs":[]},{"metadata":{"_uuid":"e68be0496b90d7d8b4db23c20d97a1c832267fee","_cell_guid":"892b455d-11f5-49e6-8b4e-c9a019d73c74"},"cell_type":"markdown","source":"---\n### 3. Check the structure of train and test data"},{"metadata":{"_uuid":"e521a86fd05f9072d8072bc32a374970ab3ce322","trusted":false,"_cell_guid":"507b1dee-f12c-4e3a-85df-2eb52415be6c"},"cell_type":"code","source":"str(data)","execution_count":55,"outputs":[]},{"metadata":{"_uuid":"e8ba45192205725c43992028c733d10e8b94d457","trusted":false,"_cell_guid":"1417dda0-33d5-4f7d-af1e-c66d61b6c543"},"cell_type":"code","source":"str(test)","execution_count":56,"outputs":[]},{"metadata":{"_uuid":"7b21d27d7051eb52edd41d67b877394caa249966","_cell_guid":"1d7aa140-17b0-4a20-bbc9-4350bd0f2096"},"cell_type":"markdown","source":"---\n### 4. Understanding of features\n#### Data Dictionary\n|Variable|Description|Key|\n|--------|:----------:|:---:|\n|Survived|Target Variable indication whether a passenger had survived or not|0 = No, 1 = Yes|\n|Pclass|Ticket class|1 = 1st (Upper), 2 = 2nd (Middle), 3 = 3rd (Lower)|\n|Sex|Gender of the Passenger||\n|Age|Age of the Passenger in Years|Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5|\n|SibSp|Number of Siblings + Number of Spouses on board||\n|Parch|Number of Parents or Number of Children on board||\n|Ticket|Ticket Number||\n|Fare|Amount paid to get the ticket||\n|Cabin|Cabin number alloted for the passenger||\n|Embarked|Port of Embarkation|S= Southampton, C = Cherbourg, Q = Queenstown (In order of arrival)|\n\n#### Additional Variable Notes\n- sibsp: The dataset defines family relations in this way...\n  - Sibling = brother, sister, stepbrother, stepsister\n  - Spouse = husband, wife (mistresses and fianc√©s were ignored)\n- parch: The dataset defines family relations in this way...\n  - Parent = mother, father\n  - Child = daughter, son, stepdaughter, stepson\n  - Some children travelled only with a nanny, therefore parch=0 for them."},{"metadata":{"_uuid":"5dbb571b680ca98f9ddc47acea159d443a04bf30","_cell_guid":"d6504894-fb3a-476c-bacd-8baaabb41a15"},"cell_type":"markdown","source":"---\n### 5. Check for Missing/Blank values\n- Inside train data, we have\n    1. Age (177 rows missing)\n    2. Cabin (687 rows blank)\n    3. Embarked (2 rows blank)\n- Inside test data, we have\n    1. Age (86 rows missing)\n    2. Fare (1 row missing)\n    3. Cabin (327 rows blank)"},{"metadata":{"_uuid":"1f529ef6dada29a46ac4ae51c52f945d30913508","trusted":false,"_cell_guid":"1de4cc28-8247-4249-ad92-e234254d04da"},"cell_type":"code","source":"train_missing = data.frame(Missing_Count = apply(data, 2, function(x) sum(is.na(x))), \n                Blank_Count = apply(data, 2, function(x) sum(x == \"\", na.rm = T)))\n\ntrain_missing","execution_count":57,"outputs":[]},{"metadata":{"_uuid":"2b625192cc4115daf5355cbd79e487610d02a8a7","trusted":false,"_cell_guid":"fc3e1c01-8ebf-42be-af24-875608fee92f"},"cell_type":"code","source":"test_missing = data.frame(Missing_Count = apply(test, 2, function(x) sum(is.na(x))), \n                Blank_Count = apply(test, 2, function(x) sum(x == \"\", na.rm = T)))\n\ntest_missing","execution_count":59,"outputs":[]},{"metadata":{"_uuid":"bc84d4c2695601b9fb6f2908dcf7ac69d7fd0ba1","_cell_guid":"6a4e45bc-592b-45c4-bd01-dae921bc3e4c"},"cell_type":"markdown","source":"---\n### 6. Impute Missing & Blank values\n1. Impute the missing Fare by Mean value of that particular Pclass, Embarked, Sex, SibSp, Parch\n2. Drop Cabin column\n3. Impute blank values in Embarked by \"Southampton\"\n4. Impute missing values in Age by choosing one of the two options\n   - by Generating random numbers between (mean - std) and (mean + std).  [Idea from [here](https://www.kaggle.com/sinakhorami/titanic-best-working-classifier)]\n   - by mean value for that particular title (Mr., Mrs., Dr. .. etc)"},{"metadata":{"_uuid":"5fafd29021ea1e9a4ba9c732ea030e86f9b7982a","_cell_guid":"76b2f321-f97f-4a50-a751-ce4393b1f89f"},"cell_type":"markdown","source":"#### 6.1 Imputing Fare\n- Fare is missing for a passenger from Pclass: 3 who Embarked at \"S\" and has no values in SibSp and Parch\n- I have added an additional condition saying \"Fare < 10\" in the code below to bring the Fare distribution close to normal and take the mean value as replacement for missing\n- Here we got a mean value of \"**7.991**\""},{"metadata":{"_uuid":"843d401a3f848f731f33085f364daf767733fb14","trusted":false,"_cell_guid":"7aa7f25c-04ad-4cbe-83aa-e6fe0f1e14d3"},"cell_type":"code","source":"# # see who has missing fare inside test data\ntest[is.na(Fare)]\n\n# # Get the closest data for the person with missing fare\nnearest_data_fare_missing = data[Pclass == 3 & Embarked == \"S\" & SibSp+Parch == 0 & Fare < 10 & Fare > 5]\n\n# # plot and check the distribution\np = ggplot() + \n        geom_histogram(data = nearest_data_fare_missing, \n                       aes(x = Fare), fill = 'coral', color = 'black', bins = 10, alpha = 0.7) +\n        ggtitle('Distribution of Fare')\np\n","execution_count":62,"outputs":[]},{"metadata":{"_uuid":"f15ad68cebad70c384a52c5507ae15892d744382","trusted":false},"cell_type":"code","source":"# # Calculate the average fare for the nearest data to the missing fare row\nmissing_fare = nearest_data_fare_missing[, mean(Fare)]\n\n# # print the average fare value\nprint(paste0(\"Mean Fare value for the Nearest data to the missing row: \", missing_fare))\n\n# # Replace the missing fare with the average fare value calculated above\ntest[is.na(Fare), Fare := missing_fare]","execution_count":63,"outputs":[]},{"metadata":{"_uuid":"919dceff9549661788944275322db850b88ef40a"},"cell_type":"markdown","source":"#### 6.2 Cabin\n- As there are lot of blank values in this column. It is safe to drop this column.\n- It is not a rule to drop such columns. As this is a basic analysis, we can drop this column."},{"metadata":{"_uuid":"e07fab8d193417a6b3aba1d1fdb1105c6b4a88dc","trusted":false},"cell_type":"code","source":"# # see how many people has cabin missing\ntrain_cabin_missing = nrow(data[Cabin == \"\"])\ntest_cabin_missing = nrow(test[Cabin == \"\"])\n\n# # calculate the proportion of data with cabin missing\ntrain_cabin_missing_prop = (train_cabin_missing/nrow(data)) * 100\ntest_cabin_missing_prop = (test_cabin_missing/nrow(test)) * 100\n\n# # print the proportion of data with cabin missing\nprint(paste0('Proportion of rows in training data that has Cabin value Missing (in %): ', train_cabin_missing_prop))\nprint(paste0('Proportion of rows in test data that has Cabin value Missing (in %): ', test_cabin_missing_prop))","execution_count":64,"outputs":[]},{"metadata":{"_uuid":"02d5e80e13bb217955c94c09da6196d3f5e0280c","trusted":false},"cell_type":"code","source":"# # Drop the Cabin column in both train and test data\ndata[, Cabin := NULL]\ntest[, Cabin := NULL]","execution_count":65,"outputs":[]},{"metadata":{"_uuid":"327761b6db269525f12b3de772d21748f3ba62ae"},"cell_type":"markdown","source":"#### 6.3 Embarked\n- Replace the 2 blank values in Embarked by \"S\" (Southampton)\n- **Why?**\n    - Passenger \"Icard, Miss. Amelie\" boarded titanic at Southampton ([link](https://www.encyclopedia-titanica.org/titanic-survivor/amelia-icard.html))\n    - Passenger \"Stone, Mrs. George Nelson (Martha Evelyn)\" boarded titanic at Southamtop ([link](https://www.encyclopedia-titanica.org/titanic-survivor/martha-evelyn-stone.html))"},{"metadata":{"_uuid":"9b1c74953dbc79cb282338659d825026d7e5890d","trusted":false},"cell_type":"code","source":"# # see who has embarked as missing\nprint(data[Embarked == \"\"])\n\n# replace the blank values with \"S\"\ndata[Embarked == \"\", Embarked := \"S\"]","execution_count":66,"outputs":[]},{"metadata":{"_uuid":"1ca69c06911b6401e63bdb82a266bb20fde9de9e"},"cell_type":"markdown","source":"#### 6.4 Age Imputation\n- I chose to impute age by generating random numbers between (mean - std) and (mean + std)"},{"metadata":{"_uuid":"c77fa76452e8b6d3de42975cb226eb3e41372215","trusted":false},"cell_type":"code","source":"# # extract data with non-missing age from both train and test\nnon_missing_age = c(data[!is.na(Age), Age], test[!is.na(Age), Age])\n\n# # calculate mean and standard deviation for the non-missing ages\nmean_age = mean(non_missing_age)\nstd_age = sd(non_missing_age)\n\n# # calculate how many rows have age as missing in both train and test\ntrain_missing_count = nrow(data[is.na(Age)])\ntest_missing_count = nrow(test[is.na(Age)])\n\n# # impute the missing values by generating random numbers between (mean - std) and (mean + std)\ndata[is.na(Age), Age := runif(train_missing_count, min = (mean_age - std_age), max = (mean_age + std_age))]\ntest[is.na(Age), Age := runif(test_missing_count, min = (mean_age - std_age), max = (mean_age + std_age))]","execution_count":67,"outputs":[]},{"metadata":{"_uuid":"8ca1e7c87c1e531cce50c7135265b14f9f71cc10","_cell_guid":"cc32eb95-c7a4-444d-8014-a1c623e75fd1"},"cell_type":"markdown","source":"---\n### 7. Basic Feature Engineering\n\n1. **Fare**: Bin Fare into 5 buckets\n2. **Family Size**: Add a family size feature by adding up SibSp and Parch\n3. **Title**: Extract Title from the name (Title includes Mr. Mrs. Dr. ... etc)\n4. **Age**: Bin Age into 5 Buckets"},{"metadata":{"_uuid":"e63970bc8e4c1226e61d27fc8240d02a07fe8baf"},"cell_type":"markdown","source":"#### 7.1 Binning Fare\n- Bucket the Numerical value of Fare into 4 buckets using `cut` function in R\n- Why we chose 4 buckets?\n    - We have tried various buckets and checked how it is influencing Survived (target) variable\n    - We chose the best value which is 4"},{"metadata":{"_uuid":"80ff3bcd26f1e7d90ac794f11e29b5e56a4612e3","trusted":false},"cell_type":"code","source":"data[, Fare_Categorical := cut(Fare, breaks = 4)]\ntest[, Fare_Categorical := cut(Fare, breaks = 4)]","execution_count":68,"outputs":[]},{"metadata":{"_uuid":"7defb7a082c1afba462953870f5e9059045dae50"},"cell_type":"markdown","source":"#### 7.2 Create Family Size\n- We have added a feature that is a combination of Parch and SibSp\n- It defines that total family members on board along with the self count\n- Total family members = Siblings + Spouse + Parents + Children + **Self**\n- i.e. Family_Size = SibSp + Parch + 1"},{"metadata":{"_uuid":"1658c8c3192ac156e9a9f27ec233a2da47df0780","trusted":false},"cell_type":"code","source":"data[, Family_Size := Parch + SibSp + 1]\ntest[, Family_Size := Parch + SibSp + 1]","execution_count":69,"outputs":[]},{"metadata":{"_uuid":"19c9008affed8813a13e92f5113184d225731c16"},"cell_type":"markdown","source":"#### 7.3 Extact Title\n- Extract title from Name of the passenger.\n- Title includes: Mr, Mrs, Dr, Miss, Master ... etc.\n- Group the less occuring Titles into single category"},{"metadata":{"_uuid":"274db1759bded663ea42a1aeef74a69e688fed14","trusted":false},"cell_type":"code","source":"# # Sample name: 'Braund, Mr. Owen Harris'\n# # First_name = 'Mr. Owen Harris'\n# # Title = 'Mr'\ndata[, First_name := unlist(lapply(strsplit(Name, ','), function(x) x[[2]]))]\ndata[, Title := unlist(lapply(strsplit(First_name, '\\\\.'), function(x) x[[1]]))]\ndata[, First_name := NULL]\ndata[, table(Title)] # get count by title\n                              \ntest[, First_name := unlist(lapply(strsplit(Name, ','), function(x) x[[2]]))]\ntest[, Title := unlist(lapply(strsplit(First_name, '\\\\.'), function(x) x[[1]]))]\ntest[, First_name := NULL]","execution_count":101,"outputs":[]},{"metadata":{"_uuid":"ec62840ea24969051243569c962c4d3454124a7f","trusted":false},"cell_type":"code","source":"# # Examine Title\ndata[, table(Sex, Title)]","execution_count":71,"outputs":[]},{"metadata":{"_uuid":"f6d454c00a8babba6bb4db50aa11557fe5f2ce8d"},"cell_type":"markdown","source":"We can Clearly see that\n- **Capt, Col, Don, Jonhkeer, Major, Master, Mr, Rev, Sir** are used to refer Males\n- **Lady, Miss, Mlle, Mme, Mrs, Ms, the Countess** are used to refer females\n- **Dr** is used to refer both males and females\n\nWe club the rare titles into one group\n- **Male Rare titles**:  ['Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Sir']\n- **Female Rare titles**: ['Lady', 'Mlle', 'Mme', 'Ms', 'the Countess']"},{"metadata":{"_uuid":"b07e1f1c7d8f6648c9e106647b1b622dd7792ed5","trusted":false},"cell_type":"code","source":"# # extract rare titles per gender\n# # rare title has count less than or equal to 2\nm_rare_titles = data[Sex == \"male\" & Title != \" Dr\", .N, Title][N <= 2, Title] # c('Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Sir')\nf_rare_titles = data[Sex == \"female\" & Title != \" Dr\", .N, Title][N <= 2, Title] # c('Lady', 'Mlle', 'Mme', 'Ms', 'the Countess')\n\ndata[Title %in% m_rare_titles, Title := 'M_Rare']\ndata[Title %in% f_rare_titles, Title := 'F_Rare']\n\ntest[Title %in% m_rare_titles, Title := 'M_Rare']\ntest[Title %in% f_rare_titles, Title := 'F_Rare']","execution_count":103,"outputs":[]},{"metadata":{"_uuid":"ec5ec9f72dd5fe38188be50427539fed777a50bb"},"cell_type":"markdown","source":"#### 7.4 Binning Age\n- Bucket the Numerical value of Age into 10 buckets using `cut` function in R\n- Why we chose 10 buckets?\n    - We have tried various buckets and checked how it is influencing Survived (target) variable\n    - We chose the best value which is 10"},{"metadata":{"_uuid":"53d2bb23467db8f00d297f9d1131cc2309f35848","trusted":false},"cell_type":"code","source":"Age_Categorical = unique(cut(c(data[, Age], test[, Age]), breaks = 10))\ndata[, Age_Categorical := ifelse(Age <= 8.15, '[<8.15]', \n              ifelse(Age <= 16.1, '[8.15-16.1]', \n                     ifelse(Age <= 24.1, '[16.1-24.1]', \n                            ifelse(Age <= 32.1, '[24.1-32.1]', \n                                   ifelse(Age <= 40.1, '[32.1-40.1]', \n                                          ifelse(Age <= 48.1, '[40.1-48.1]', \n                                                 ifelse(Age <= 56.1, '[48.1-56.1]', \n                                                        ifelse(Age <= 64, '[56.1-64]', \n                                                               ifelse(Age <= 72, '[64-72]', \n                                                                      '[>72]')\n                                                              )\n                                                       )\n                                                )\n                                         )\n                                  )\n                           )\n                    )\n             )\n    ]\n\ntest[, Age_Categorical := ifelse(Age <= 8.15, '[<8.15]', \n              ifelse(Age <= 16.1, '[8.15-16.1]', \n                     ifelse(Age <= 24.1, '[16.1-24.1]', \n                            ifelse(Age <= 32.1, '[24.1-32.1]', \n                                   ifelse(Age <= 40.1, '[32.1-40.1]', \n                                          ifelse(Age <= 48.1, '[40.1-48.1]', \n                                                 ifelse(Age <= 56.1, '[48.1-56.1]', \n                                                        ifelse(Age <= 64, '[56.1-64]', \n                                                               ifelse(Age <= 72, '[64-72]', \n                                                                      '[>72]')\n                                                              )\n                                                       )\n                                                )\n                                         )\n                                  )\n                           )\n                    )\n             )\n    ]","execution_count":73,"outputs":[]},{"metadata":{"_uuid":"45ae51dc378e610aa052c00374fbcacf8a382757","_cell_guid":"0fb468b4-7f84-42b3-806c-ca291664f592"},"cell_type":"markdown","source":"---\n### 8. Basic Exploratory Analysis\n1. Analyze Pclass\n2. Analyze Sex\n3. Analyze Family_Size\n4. Analyze Title\n5. Analyze Fare_Categorical\n6. Analyze Age_Categorical\n7. Analyze Port of Embarkation\n8. Analyze Loners (Passengers travelling Alone)"},{"metadata":{"_uuid":"9884b69b975fabd3d15faf0e0640b34d728f1847"},"cell_type":"markdown","source":"#### 8.1 Analyze Pclass\n- 1st class surived the most (63%)\n- 3rd class surived the least (24%)"},{"metadata":{"_uuid":"beb7fc32f0def8eaf232a9dc3db1d3db4a408112","trusted":false,"_cell_guid":"d84969a1-86ed-4dbd-95b0-54cb85241f44"},"cell_type":"code","source":"# # print and check the influence of Pclass on survived\ndata[, .(Survival_Proportion = mean(Survived)), Pclass][order(Pclass)]\n\n# # plot and check the influence of Pclass on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Pclass], \n             aes(x = factor(Pclass), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Pclass') + ylab(\"Proportion of people Survived\")\np","execution_count":89,"outputs":[]},{"metadata":{"_uuid":"229edeaac5193569f16c6b35bd3b3eb4be935a06"},"cell_type":"markdown","source":"#### 8.2 Analyze Sex\n- Females surived the most (74%)\n- Males surived the least (19%)"},{"metadata":{"_uuid":"8646fb168437554dd9e30613acf83bc99f8688fa","trusted":false},"cell_type":"code","source":"# # print and check the influence of Sex on survived\ndata[, .(Survival_Proportion = mean(Survived)), Sex]\n\n# # plot and check the influence of Sex on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Sex], \n             aes(x = factor(Sex), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Sex (Gender)') + ylab(\"Proportion of people Survived\")\np","execution_count":90,"outputs":[]},{"metadata":{"_uuid":"8d2ea10252250a377d0f416b0ad98c0e91efe3a7"},"cell_type":"markdown","source":"#### 8.3 Analyze Family Size\n- Loners Survived 30% of times\n- Large familes tend to have least survival (this may be due to a missing family member during the escape)\n    - As everyone say: \"Large families Sink together\""},{"metadata":{"_uuid":"f974ffda4befd52c89f11ba9ceca7dd0bcdae186","trusted":false,"_cell_guid":"7aebe467-36a0-4496-81e6-fa455dd39d83"},"cell_type":"code","source":"# # print and check the influence of Family_Size on survived\ndata[, .(Survival_Proportion = mean(Survived)), Family_Size][order(Family_Size)]\n\n# # plot and check the influence of Family_Size on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Family_Size], \n             aes(x = factor(Family_Size), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    geom_line(data = data[, .(Survival_Proportion = mean(Survived)), Family_Size], \n             aes(x = factor(Family_Size), y = Survival_Proportion), \n             color = 'black', group = 1) +\n    geom_point(data = data[, .(Survival_Proportion = mean(Survived)), Family_Size], \n             aes(x = factor(Family_Size), y = Survival_Proportion), \n             color = 'black', group = 1) +\n    xlab('Family_Size') + ylab(\"Proportion of people Survived\")\np","execution_count":97,"outputs":[]},{"metadata":{"_uuid":"277c517be02f2e057ff13b741d077764cd698696"},"cell_type":"markdown","source":"#### 8.4 Analyze Title\n- Mrs and Miss have highest surival rate (79%, 70%)\n- Master also have decent survival rate (58%) (Master is usually referred to male kids. The rescue rule is Females and Kids first)\n- Mr and Rev have least survival (16%, 0%)"},{"metadata":{"_uuid":"f1213e0dd23ed542b1170fab1cadd902203b5e9b","trusted":false},"cell_type":"code","source":"# # print and check the influence of Title on survived\ndata[, .(Survival_Proportion = mean(Survived)), .(Title, Sex)]\n\n# # plot and check the influence of Title on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Title], \n             aes(x = factor(Title), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Title') + ylab(\"Proportion of people Survived\")\np","execution_count":105,"outputs":[]},{"metadata":{"_uuid":"cfc28bd74a37e012e9c6fd5977c5b6bbdfd618d0"},"cell_type":"markdown","source":"#### 8.5 Analyze Fare Categorical\n- As the fare increases, the surival rate increases !"},{"metadata":{"_uuid":"89267b921d179fa1f413e29df0e43ddebbde1a3b","trusted":false},"cell_type":"code","source":"# # print and check the influence of Fare_Categorical on survived\ndata[, .(Survival_Proportion = mean(Survived)), Fare_Categorical]\n\n# # plot and check the influence of Fare_Categorical on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Fare_Categorical], \n             aes(x = factor(Fare_Categorical), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Fare_Categorical') + ylab(\"Proportion of people Survived\")\np","execution_count":106,"outputs":[]},{"metadata":{"_uuid":"8500d62f55afd93bfd3f3d84d2dab738e9e11c4b"},"cell_type":"markdown","source":"#### 8.6 Analyze Age Categorical\n- Kids tend to have more survival\n- Adults have least survival"},{"metadata":{"_uuid":"ffd1f5a7c62be3537bebbd2edc8e7813c82f7e49","trusted":false},"cell_type":"code","source":"# # print and check the influence of Age_Categorical on survived\ndata[, .(Survival_Proportion = mean(Survived)), Age_Categorical]\n\n# # plot and check the influence of Age_Categorical on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Age_Categorical], \n             aes(x = factor(Age_Categorical), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Age_Categorical') + ylab(\"Proportion of people Survived\")\np","execution_count":107,"outputs":[]},{"metadata":{"_uuid":"516f61a65823e0546af760f18519b69d1822f955"},"cell_type":"markdown","source":"#### 8.7 Analyze Port of Embarkation\n- Order of Embarkation (S => C => Q = New York)\n- Usually as per domain this should not effect the survival\n- But, let us see what the data speaks\n- Passengers who embarked at \"C\" has 55% of survival (**Interesting !!**)"},{"metadata":{"_uuid":"5b905cad4935c4a05249d1e0fcb407849648e488","trusted":false},"cell_type":"code","source":"# # print and check the influence of Embarked on survived\ndata[, .(Survival_Proportion = mean(Survived)), Embarked]\n\n# # plot and check the influence of Embarked on survived\np = ggplot() + \n    geom_bar(data = data[, .(Survival_Proportion = mean(Survived)), Embarked], \n             aes(x = factor(Embarked), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Embarked') + ylab(\"Proportion of people Survived\")\np","execution_count":108,"outputs":[]},{"metadata":{"_uuid":"2728a29206a706deb5bdfde8049e81ae24e5b658"},"cell_type":"markdown","source":"#### 8.8 Analyze Loners\n- Loners have 30% survival\n- Those who have family have better survival (50%)\n- This is because, Mostly the loners are Adult males (**77%** with Average Age = **32**) who were the least priority to enter into life boats"},{"metadata":{"_uuid":"57fc6c2ab7f3139944719d2f84c7519a542b5902","trusted":false},"cell_type":"code","source":"# # print and check the influence of Loner on survived\ndata[, .(Loner = Family_Size == 1, Survived)][, .(Survival_Proportion = mean(Survived)), Loner]\n\n# # plot and check the influence of Loner on survived\np = ggplot() + \n    geom_bar(data = data[, .(Loner = Family_Size == 1, Survived)][, .(Survival_Proportion = mean(Survived)), Loner], \n             aes(x = factor(Loner), y = Survival_Proportion), \n             fill = 'green', color = 'black', alpha = 0.3, stat = 'identity', width = 0.5) +\n    xlab('Loner Flag') + ylab(\"Proportion of people Survived\")\np","execution_count":109,"outputs":[]},{"metadata":{"_uuid":"def2e3ee4ada200f70d1edcabdbe951397fd6673"},"cell_type":"markdown","source":"---\n### 9. Model Data Preparation\n1. Drop the following columns\n    1. PassengerId (Unique. So, not useful)\n    2. Name (We have extracted Title from Name)\n    3. SibSp (As we included Family_Size feature)\n    4. Parch (As we included Family_Size feature)\n    5. Ticket (Doesn't provide much information)\n    6. Fare (As we already have bucketed Fare)\n    7. Age (As we already have bucketed Age)\n2. Convert the character columns into factors\n3. Divide the data into train and validation (70 - 30 Split)"},{"metadata":{"_uuid":"fd81a36099d4c1a9dbdb53ca17972a488c444711"},"cell_type":"markdown","source":"#### 9.1 Dropping the specified columns"},{"metadata":{"collapsed":true,"_uuid":"621e3528d912014f50d2c5cc145d69ed5cb81d4d","trusted":false},"cell_type":"code","source":"# # Get the columns that are to be dropped\ndrop_cols = c(\"PassengerId\", \"Name\", \"SibSp\", \"Parch\", \"Ticket\")#, \"Fare\", \"Age\")\n\n# # Drop the columns in train data\nm_data = data[, !drop_cols, with = FALSE]\n\n# # Drop the columns in test data\nm_test = test[, !drop_cols, with = FALSE]","execution_count":150,"outputs":[]},{"metadata":{"_uuid":"08bb46125764357d44054a67144290df907519c8"},"cell_type":"markdown","source":"#### 9.2 Convert the character columns into factors\n- Sex\n- Embarked\n- Fare_Categorical\n- Age_Categorical"},{"metadata":{"_uuid":"0ecfbca3185c7aa7ba77d0039722b166b837ded9","trusted":false},"cell_type":"code","source":"# # Get the character columns\ncharacter_cols = c(\"Sex\", \"Embarked\", \"Fare_Categorical\", \"Age_Categorical\")\n\n# # convert the character columns into factor in train data\nm_data[, (character_cols) := lapply(.SD, factor), .SDcols = character_cols]\n\n# # convert the character columns into factor in test data\nm_test[, (character_cols) := lapply(.SD, factor), .SDcols = character_cols]","execution_count":151,"outputs":[]},{"metadata":{"_uuid":"e76f3c0ada6bdb464b745171e25bfb91a34c329e"},"cell_type":"markdown","source":"#### 9.3 Divide the data into train and validation (70%: Train, 30%: Validation)"},{"metadata":{"collapsed":true,"_uuid":"b0d94bb1efd916dfc88f592fb2373f5dab95cbb1","trusted":false},"cell_type":"code","source":"# # create train index using createDataPartion function from caret library\nindex = createDataPartition(m_data[, Survived], p = 0.7, list = FALSE)\n\n# # subset train data using the index\ntrain_data = m_data[index]\n\n# # subset validation data with the left over index\nvalidation_data = m_data[-index]","execution_count":152,"outputs":[]},{"metadata":{"_uuid":"d764ac6b78c610a5fd0f2bd0c5da7d03ed48a0cf"},"cell_type":"markdown","source":"---\n### 10. Model Building\n1. Build a random forest\n2. Build an xgboost [**To Do**]\n3. Build an Ensemble (Stacking/Blending) [**To Do**]"},{"metadata":{"_uuid":"8df203faaf5676b4fbab185ca2a62e4d21744c9e"},"cell_type":"markdown","source":"#### 10.1 Build a random forest\n- Build the model on `train_data` using `ranger` function in R and store it in `fit` object\n- Predict using the model on `validation_data`\n- Check the confusion matrix\n- Print Accuracy on `validation_data`\n- Check Variable importances\n- Predict on test data and prepare submission"},{"metadata":{"_uuid":"c8c8f39cfc61e737bfd8689c91b3a45d9ce98219","trusted":false},"cell_type":"code","source":"# # build model on train_data\nfit = ranger(factor(Survived) ~ ., data = train_data, num.trees = 500, importance = 'impurity')\n\n# # predict on validation_data using the fit object\nvalidation_data[, Predicted := predict(fit, validation_data)$predictions]\n\n# # examine the confusion matrix\nvalidation_data[, table(Survived, Predicted)]\n\n# # print the Accuracy achieved on validation_data\nprint(paste0(\"Accuracy % of Random Forest: \", validation_data[, MLmetrics::Accuracy(y_pred = Predicted, y_true = Survived) * 100]))","execution_count":153,"outputs":[]},{"metadata":{"scrolled":true,"trusted":false,"_uuid":"b29393d21fe874be28b0b65fac26b81e77b7088f"},"cell_type":"code","source":"# # Check the importance of features\nvariable_importance = data.frame(Importance = importance(fit))\nvariable_importance$columns = rownames(variable_importance)\nrownames(variable_importance) = 1:nrow(variable_importance)\nsetDT(variable_importance)\nsetorder(variable_importance, - Importance)\n\n# # print variable importance\nvariable_importance\n\n# # plot variable importance\np = ggplot() + \n        geom_bar(data = variable_importance, aes(x = columns, y = Importance), \n            stat = 'identity', fill = 'skyblue', color = 'black', alpha = 0.3) +\n        ggtitle('Variable Importance plot for Random Forest') +\n        xlab('Variables') + ylab('Feature Importance') + \n        theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\np","execution_count":154,"outputs":[]},{"metadata":{"_uuid":"f2a8402dc6692ca66bc433ccff5e340301bd6443","trusted":false},"cell_type":"code","source":"# # predict on test data\ntest[, Survived := predict(fit, m_test)$predictions]\n\n# # prepare submission\nrf_sub1 = test[, .(PassengerId, Survived)]\n\n# # write the submission into csv file\nfwrite(rf_sub1, '../data/rf_sub1.csv')","execution_count":155,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}