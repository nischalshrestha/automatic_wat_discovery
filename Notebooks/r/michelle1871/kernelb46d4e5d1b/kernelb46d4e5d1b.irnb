{"cells":[{"metadata":{"_uuid":"57aa30389d4c787a4da79c01e42d3fea08e475ee"},"cell_type":"markdown","source":""},{"metadata":{"_uuid":"72a9259559c961a9e0a6e2afca440e7cafae439d","_execution_state":"idle","trusted":true},"cell_type":"markdown","source":"\n"},{"metadata":{"trusted":true,"_uuid":"9f2a1a043eaa079a3fada15ef301b3c920a7fde7"},"cell_type":"code","source":"library(readr) # File read / write\nlibrary(ggplot2) # Data visualization\nlibrary(ggthemes) # Data visualization\nlibrary(scales) # Data visualization\nlibrary(plyr)\nlibrary(stringr) # String manipulation\nlibrary(InformationValue) # IV / WOE calculation\nlibrary(MLmetrics) # Mache learning metrics.e.g. Recall, Precision, Accuracy, AUC\nlibrary(rpart) # Decision tree utils\nlibrary(randomForest) # Random Forest\nlibrary(dplyr) # Data manipulation\nlibrary(e1071) # SVM\nlibrary(Amelia) # Missing value utils\nlibrary(party) # Conditional inference trees\nlibrary(gbm) # AdaBoost\nlibrary(class) # KNN\nlibrary(scales)\nlibrary(glmnet)\nlibrary(Hmisc)\nlibrary(caret)\nlibrary(corrplot)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1e18ff636d1167f0bbba269090aaf97ca2182254"},"cell_type":"code","source":"train <- read.csv(\"../input/train.csv\", stringsAsFactors = F, na.strings = c(\"NA\", \"\"))\ntest <- read.csv(\"../input/test.csv\", stringsAsFactors = F, na.strings = c(\"NA\", \"\"))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fe54a74f5b1d27e97b21150037d413fdd9e79fce"},"cell_type":"code","source":"data<-bind_rows(train,test)\ntrain.row <- 1:nrow(train)\ntest.row <- (1 + nrow(train)):(nrow(train) + nrow(test))\nstr(data)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"adbdb91593c75266d4b6bf177be2ab48744dc117"},"cell_type":"code","source":"data$Survived <- factor(data$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":false,"_uuid":"c98d2f61277ebd9fb00d95e7664dbbb1d76bf45b"},"cell_type":"code","source":"ggplot(data = data[1:nrow(train),], mapping = aes(x = Pclass, y = ..count.., fill=Survived)) + \n  geom_bar(stat = \"count\", position='dodge') + \n  xlab('Pclass') + \n  ylab('Count') + \n  ggtitle('How Pclass impact survivor') + \n  scale_fill_manual(values=c(\"#FF0000\", \"#00FF00\")) +\n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5ac54dd1713e681d3bf425487b290a4598ddbd35"},"cell_type":"code","source":"WOETable(X=factor(data$Pclass[1:nrow(train)]), Y=factor(data$Survived[1:nrow(train)]))\n\nIV(X=factor(data$Pclass[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"749dc5f9568c32e726d581dc8bd13ba53ecf0fc6","scrolled":true},"cell_type":"code","source":"data$Title <- sapply(data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})\ndata$Title <- sub(' ', '', data$Title)\ndata$Title[data$Title %in% c('Mme', 'Mlle')] <- 'Mlle'\ndata$Title[data$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'\ndata$Title[data$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\ndata$Title <- factor(data$Title)\nggplot(data = data[1:nrow(train),], mapping = aes(x = Title, y = ..count.., fill=Survived)) + \n  geom_bar(stat = \"count\", position='stack') + \n  xlab('Title') + \n  ylab('Count') + \n  ggtitle('How Title impact survivor') + \n  scale_fill_discrete(name=\"Survived\", breaks=c(0, 1), labels=c(\"Perish\", \"Survived\")) + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_stack(vjust = 0.5)) +\n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"41373de27c9056508d7efd6edb28e3d3e64a5608"},"cell_type":"code","source":"ggplot(data = data[1:nrow(train),], mapping = aes(x = Title, y = ..count.., fill=Survived)) + \n  geom_bar(stat = \"count\", position='stack') + \n  xlab('Title') + \n  ylab('Count') + \n  ggtitle('How Title impact survivor') + \n  scale_fill_discrete(name=\"Survived\", breaks=c(0, 1), labels=c(\"Perish\", \"Survived\")) + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_stack(vjust = 0.5)) +\n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bd3f9d1d2122fa4d527a0956123385d02dcdba0f"},"cell_type":"code","source":"WOETable(X=data$Title[1:nrow(train)], Y=data$Survived[1:nrow(train)])\n\n##IV=1.48,highly predictive\nIV(X=data$Title[1:nrow(train)], Y=data$Survived[1:nrow(train)])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ff424c94a98633de4f36bcc9e63730afb7e9bd48"},"cell_type":"code","source":"## female survives more than male\ndata$Sex <- as.factor(data$Sex)\nggplot(data = data[1:nrow(train),], mapping = aes(x = Sex, y = ..count.., fill=Survived)) + \n  geom_bar(stat = 'count', position='dodge') + \n  xlab('Sex') + \n  ylab('Count') + \n  ggtitle('How Sex impact survivo') + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9f6a34b3c9b045cfd366b0bb07c3635712f75ebd"},"cell_type":"code","source":"\nWOETable(X=data$Sex[1:nrow(train)], Y=data$Survived[1:nrow(train)])\nIV(X=data$Sex[1:nrow(train)], Y=data$Survived[1:nrow(train)])\n## with IV=1.34, sex is also highly predictive\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d1d92bde6c626c14c5ea683ece71d885b2dfac32"},"cell_type":"code","source":"## Age under 18 survives more than age above 18\nggplot(data = data[(!is.na(data$Age)) & row(data[, 'Age']) <= 891, ], aes(x = Age, color=Survived)) + \n  geom_line(aes(label=..count..), stat = 'bin', binwidth=5)  + \n  labs(title = \"How Age impact survivor\", x = \"Age\", y = \"Count\", fill = \"Survived\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4ffd3a66de283f8935a6db1485bf19fc02ab3f56"},"cell_type":"code","source":"## Passengers with moderate SibSp number survives more\nggplot(data = data[1:nrow(train),], mapping = aes(x = SibSp, y = ..count.., fill=Survived)) + \n  geom_bar(stat = 'count', position='dodge') + \n  labs(title = \"How SibSp impact survivor\", x = \"Sibsp\", y = \"Count\", fill = \"Survived\") + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a03c8dc0493c1e208e23099175de2c024b97c587"},"cell_type":"code","source":"## Sibsp=0,survive rate<1/3;SibSp=1or2,rate>50%;SibSp>=3,very low survival rate\nWOETable(X=as.factor(data$SibSp[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$SibSp[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n## SibSp is also highly predictive","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ed4e6a9502af447eb0c3ea7cf8f007253441771d"},"cell_type":"code","source":"## Parch number=1or 3 are easier to survive\nggplot(data = data[1:nrow(train),], mapping = aes(x = Parch, y = ..count.., fill=Survived)) + \n  geom_bar(stat = 'count', position='dodge') + \n  labs(title = \"How Parch impact survivor\", x = \"Parch\", y = \"Count\", fill = \"Survived\") + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f9f1af50f2c914515d39ff17aab163f047f383ba"},"cell_type":"code","source":"WOETable(X=as.factor(data$Parch[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Parch[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n##Parch=0,survival<1/3,parch=1-3,survial>50%,Parch>=4,low survival\n##with IV=0.116666, Parch is also highly predictive","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ceea7204122e40838c11f6f0208e4bed4546cd31"},"cell_type":"code","source":"## FamilySize 2 to 4 has the largest possibility to survive\ndata$FamilySize <- data$SibSp + data$Parch + 1\nggplot(data = data[1:nrow(train),], mapping = aes(x = FamilySize, y = ..count.., fill=Survived)) + \n  geom_bar(stat = 'count', position='dodge') + \n  xlab('FamilySize') + \n  ylab('Count') + \n  ggtitle('How FamilySize impact survivor') + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"29e9c2017ad61b3cb0bebc543db505f95075a900"},"cell_type":"code","source":"WOETable(X=as.factor(data$FamilySize[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n\nIV(X=as.factor(data$FamilySize[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n\n## compute WOE and IV of FamilySize and we can see Family Size has a higher IV than SibSp and Parch.\n## So use FamilySize as variable","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9533f4ff2cfb1e0cdc291fe78a9aaf75ca24e022"},"cell_type":"code","source":"## Passengers with the same ticket number has a higher possibility to survive\n## assuming passengers with same ticket number are family,and they have larger possibility to die or live together\n##group people who has a single ticket number and who shares ticket number with others\nticket.count <- aggregate(data$Ticket, by = list(data$Ticket), function(x) sum(!is.na(x)))\n\ndata$TicketCount <- apply(data, 1, function(x) ticket.count[which(ticket.count[, 1] == x['Ticket']), 2])\ndata$TicketCount <- factor(sapply(data$TicketCount, function(x) ifelse(x > 1, 'Share', 'Unique')))\nggplot(data = data[1:nrow(train),], mapping = aes(x = TicketCount, y = ..count.., fill=Survived)) + \n  geom_bar(stat = 'count', position='dodge') + \n  xlab('TicketCount') + \n  ylab('Count') + \n  ggtitle('How TicketCount impact survivor') + \n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n## From the figure, passengers without shared ticket has a possibility of 130/(130+351)=27% to survive，while passengers with shared tickets have 212/(212+198)=51.7% to survive","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7bb91c7b90f1672ad88b42d8a074684713a29688"},"cell_type":"code","source":"WOETable(X=data$TicketCount[1:nrow(train)], Y=data$Survived[1:nrow(train)])\nIV(X=data$TicketCount[1:nrow(train)], Y=data$Survived[1:nrow(train)])\n\n##TicketCount is very predictive with IV=0.2751882\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"31bb5e50813db22f53929be9e410d187da88fca3"},"cell_type":"code","source":"## Passengers with higher fee has a larger possibility to survive\nggplot(data = data[(!is.na(data$Fare)) & row(data[, 'Fare']) <= 891, ], aes(x = Fare, color=Survived)) + \n  geom_line(aes(label=..count..), stat = 'bin', binwidth=10)  + \n  labs(title = \"How Fare impact survivor\", x = \"Fare\", y = \"Count\", fill = \"Survived\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"83316c5018daf939fa9c82661bdf5ab7bc53e7d1"},"cell_type":"code","source":"## passengers in different cabins have different survibal rate\n##Cabin starts with letter and followed by numbers, the letter could be a region and numbers are orders in the region.\n##Here we extract letter from cabin,and count survival of different cabins.\nggplot(data[1:nrow(train), ], mapping = aes(x = as.factor(sapply(data$Cabin[1:nrow(train)], function(x) str_sub(x, start = 1, end = 1))), y = ..count.., fill = Survived)) +\n  geom_bar(stat = 'count', position='dodge') + \n  xlab('Cabin') +\n  ylab('Count') +\n  ggtitle('How Cabin impact survivor') +\n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n##cabins start with B，C，D，E，F have survival rate>50%，while others are less than 50%\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a72a9c5524b54505096857f05026fbb21a6f3232"},"cell_type":"code","source":"data$Cabin <- sapply(data$Cabin, function(x) str_sub(x, start = 1, end = 1))\nWOETable(X=as.factor(data$Cabin[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Cabin[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n                     \n##Cabin is also very predictive\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c86c157a51925f3ce5e3e9eb8c3b7ccd82ecfe5"},"cell_type":"code","source":"##Passengers embarked from \"S\" have lower chance to survive\nggplot(data[1:nrow(train), ], mapping = aes(x = Embarked, y = ..count.., fill = Survived)) +\n  geom_bar(stat = 'count', position='dodge') + \n  xlab('Embarked') +\n  ylab('Count') +\n  ggtitle('How Embarked impact survivor') +\n  geom_text(stat = \"count\", aes(label = ..count..), position=position_dodge(width=1), , vjust=-0.5) + \n  theme(plot.title = element_text(hjust = 0.5), legend.position=\"bottom\")\n## Passengers embarked from S have a 217/(217+427)=33.7% to survive, while passengers embarked from \n##other places have more than 50% chance to survive.\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7af023fae33249c8b05fd3caa37476397b20d067"},"cell_type":"code","source":"WOETable(X=as.factor(data$Embarked[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$Embarked[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\n\n## Embarked has IV=0.122, it is highly predictive.\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"397a7478838a8a2498e66efcae46f3ed1b0fa0b3"},"cell_type":"code","source":"## check missing values\nattach(data)\n  missing <- list(Pclass=nrow(data[is.na(Pclass), ]))\n  missing$Name <- nrow(data[is.na(Name), ])\n  missing$Sex <- nrow(data[is.na(Sex), ])\n  missing$Age <- nrow(data[is.na(Age), ])\n  missing$SibSp <- nrow(data[is.na(SibSp), ])\n  missing$Parch <- nrow(data[is.na(Parch), ])\n  missing$Ticket <- nrow(data[is.na(Ticket), ])\n  missing$Fare <- nrow(data[is.na(Fare), ])\n  missing$Cabin <- nrow(data[is.na(Cabin), ])\n  missing$Embarked <- nrow(data[is.na(Embarked), ])\n  for (name in names(missing)) {\n    if (missing[[name]][1] > 0) {\n      print(paste('', name, ' miss ', missing[[name]][1], ' values', sep = ''))\n    }\n  }\ndetach(data)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e5c279eb3750fc8086e0e090345324761bb6ac7d"},"cell_type":"code","source":"## use other values to predict age, anova means regression tress\n\nage.model <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=data[!is.na(data$Age), ], method='anova')\ndata$Age[is.na(data$Age)] <- predict(age.model, data[is.na(data$Age), ])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f090ff0481d540191626b5c82c2fdb033cb64ab7"},"cell_type":"code","source":"## use mode to impute Embarked\n##only 2 missing values in Embarked, use \"S\" to impute\ndata$Embarked[is.na(data$Embarked)] <- 'S'\ndata$Embarked <- as.factor(data$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fdc547545ea5f92fb545e9dd5f3852328591c8bc"},"cell_type":"code","source":"## only 1 missing value in Fare, use median to impute\ndata$Fare[is.na(data$Fare)] <- median(data$Fare, na.rm=TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"66d7d52360d3c8a6c458fcfbaa65fa7680934752"},"cell_type":"code","source":"## Processing missing value in  Cabin\n## there are 77% of Cabin missing, so we don't impute Cabin, instead we put missing value in Cabin here as \"U\"\n\ndata$Cabin <- as.factor(sapply(data$Cabin, function(x) ifelse(is.na(x), 'U', str_sub(x, start = 1, end = 1))))\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"01df4ddd78183a2c8cb4232d17333d52b905dc0e"},"cell_type":"code","source":"## Surname , passengers with the same surname are likely to be in the same family, their possiblity to survive or die together are higher\ndata$Surname <- sapply(data$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})\ndata$FamilyID <- paste(as.character(data$FamilySize), data$Surname, sep=\"\")\ndata$FamilyID[data$FamilySize <= 2] <- 'Small'\n# Delete erroneous family IDs\nfamIDs <- data.frame(table(data$FamilyID))\nfamIDs <- famIDs[famIDs$Freq <= 2,]\ndata$FamilyID[data$FamilyID %in% famIDs$Var1] <- 'Small'\n# Convert to a factor\ndata$FamilyID <- factor(data$FamilyID)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"43e9f62b7097bb5526ece4fcaec56b6755ed323c"},"cell_type":"code","source":"WOETable(X=as.factor(data$FamilyID[1:nrow(train)]), Y=data$Survived[1:nrow(train)])\nIV(X=as.factor(data$FamilyID[1:nrow(train)]), Y=data$Survived[1:nrow(train)])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"92351fc957df731e844bdb3d32204f6f55192d2a"},"cell_type":"code","source":"head(data)\nsummary(data)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fc40e4270903e522b0a12f8859318769fe66f016"},"cell_type":"code","source":"## Create new variable FarePerPerson\ndata$FarePP<-data$Fare/data$FamilySize\nggplot(data, aes(x=FarePP)) +\n        geom_histogram(binwidth = 5, fill='blue') \n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ef773431b5ba17a3d4113bd763ee5ce60b216ff5"},"cell_type":"code","source":"## Variable FarePP is very skewed, try to bin FarePp\ndata$FareBins <- cut2(data$FarePP, g=5)\nggplot(data[!is.na(data$Survived),], aes(x=FareBins, fill=Survived))+\n        geom_bar(stat='count') + facet_grid(.~Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9ada1f6d2461d2f24596d3f6e162e8f279e896de"},"cell_type":"code","source":"WOETable(X=data$FareBins[1:nrow(train)], Y=data$Survived[1:nrow(train)])\nIV(X=data$FareBins[1:nrow(train)], Y=data$Survived[1:nrow(train)])\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fca0bafe85648b8fc21c347d204cea40166d1a85"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ce018d32be5e1f43beaf51fb1aa42b5b932af33a"},"cell_type":"code","source":"## Split the data\ntrain1 <- data[1:891,]\ntest1 <- data[892:1309,]\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c1825c2aa4c9cb266ad3f1b00d330502a455ee5"},"cell_type":"code","source":"\nset.seed(415)\nmy_dt3 <- cforest(Survived~ Pclass + Sex + Age + FareBins + Embarked + Title + FamilySize + FamilyID + TicketCount, data=train1, controls=cforest_unbiased(ntree=2000, mtry=3))\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"726edb9871570293a80c859045802880276dcd66"},"cell_type":"code","source":"##SVM\nset.seed(2017)\ncaret_svm <- train(Survived~ Pclass + Sex + Age + FareBins + Embarked + Title + FamilySize + FamilyID + TicketCount, data=train1, method='svmRadial', preProcess= c('center', 'scale'), trControl=trainControl(method=\"cv\", number=5))\ncaret_svm","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"dec43e93f04259b7088aa4d2fad5cc9f3737962f"},"cell_type":"code","source":"caret_svm$results","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4683aa4753e0a1765f031b77ca69e2c108598675"},"cell_type":"code","source":"solution_svm <- predict(caret_svm, test1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":false,"_uuid":"9e1a66b25ffb3df4e8ccbf1e6bd2da6edd32db07"},"cell_type":"code","source":"##Gradient Boosting Machine Model\nset.seed(2017)\ncaret_boost <- train(Survived~ Pclass + Sex + Age + FareBins + Embarked + Title + FamilySize + FamilyID + TicketCount, data=train1, method='gbm', preProcess= c('center', 'scale'), trControl=trainControl(method=\"cv\", number=7), verbose=FALSE)\nprint(caret_boost)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a4fec5dd00c45cbb4380c0f930644908367bf736"},"cell_type":"code","source":"solution_boost <- predict(caret_boost, test1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a74b38fd1ea0fad57aa94c9464eed0ba81c5b0ee"},"cell_type":"code","source":"my_prediction2 <- predict(my_dt3, newdata = test1, OOB=TRUE, type = \"response\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"09b3170a6fcea834609b9098cec14f95ea5de33b"},"cell_type":"code","source":"## combing models,majority votes\ntest1$RF <- as.numeric(my_prediction2)-1\ntest1$SVM <- as.numeric(solution_svm)-1\ntest1$Boost <- as.numeric(solution_boost)-1\ncorrplot.mixed(cor(test1[, c('RF', 'SVM', 'Boost')]), order=\"hclust\", tl.col=\"black\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"012cc05832f626ef5e5d838027f41c553f9dceac"},"cell_type":"code","source":"## voting rules: the majority wins\n##If 0 or 1 model predicts ‘Survived’, the overall prediction will be ‘Died’\n\n##If 2 or 3 models predict ‘Survived’, the overall prediction will be ‘Survived’\n\ntest1$Sum <- test1$RF + test1$SVM + test1$Boost\ntest1$Majority <- ifelse(test1$Sum<=1, 0, 1)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d2111e52c861df7c9b0ee21d1a2c108222785d61"},"cell_type":"code","source":"my_solution2 <- data.frame(PassengerId = test1$PassengerId, Survived = my_prediction2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"44422689f3d8192590291904f0f4131b5a6dec7b"},"cell_type":"code","source":"svm <- data.frame(PassengerId = test1$PassengerId, Survived = solution_svm)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b97c43b26e888b15dc9ead2539be9b7bf48aea4f"},"cell_type":"code","source":"boost<- data.frame(PassengerId = test1$PassengerId, Survived = solution_boost)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6d10e4e321526b7fed0a455ae5f480f54d705107"},"cell_type":"code","source":"voting<-data.frame(PassengerId = test1$PassengerId, Survived =test1$Majority )\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8a1174ffd65f0157630ccc9f91d31f86b3e32d80"},"cell_type":"code","source":"\nnrow(my_solution2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a0d6b7f8a583fe7f8d210954baac2edb3013aa07"},"cell_type":"code","source":"write.csv(my_solution2, file =  \"my_dt4.csv\", row.names = FALSE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a7bf889e94db5e86afcf8cdcf4a9d6b78267efaa"},"cell_type":"code","source":"write.csv(svm, file =  \"solution_svm.csv\", row.names = FALSE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6d51ef899f44d4ff5b0c74449dc29e877ff6fd70"},"cell_type":"code","source":"write.csv(boost, file =  \"solution_boost.csv\", row.names = FALSE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0df65dafeef16158eb03c7c5c45773587ba990c7"},"cell_type":"code","source":"write.csv(voting, file =  \"solution_voting.csv\", row.names = FALSE)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}