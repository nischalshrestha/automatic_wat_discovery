{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "08a2e33f-4425-ea4b-3fd7-ca06f28275be"
      },
      "source": [
        "# Titanic dataset exploration and survival prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c1c1eed9-780a-8862-10b6-3df4d25f99ef"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn import preprocessing, grid_search, metrics, linear_model, neighbors, svm, ensemble\n",
        "import xgboost as xgb"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "18e0eb41-2722-dcd5-66bc-5d13e55e53e6"
      },
      "source": [
        "## Reading data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2498f1a4-8944-8d93-af9a-587c5d61b4bc"
      },
      "outputs": [],
      "source": [
        "data_train = pd.read_csv('../input/train.csv')\n",
        "data_test = pd.read_csv('../input/test.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3fb48412-de0a-021e-aef3-955df10c9e68"
      },
      "outputs": [],
      "source": [
        "data_train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9b341414-515f-8402-6de3-a763124821e0"
      },
      "outputs": [],
      "source": [
        "print(data_train.info())\n",
        "print(data_test.info())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "1f518fb6-122e-8bb3-7210-cf86b98acb32"
      },
      "source": [
        "## Analyzing dataset features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "7a34607c-833d-5a48-60c2-da715c63da2b"
      },
      "source": [
        "The dataset has features that identifies a passenger, these features (PassengerId, Name, Ticket) do not influence the output result. So we can remove them from dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "429d7313-dd91-8804-4688-6b53187c6a40"
      },
      "outputs": [],
      "source": [
        "# save PassengerId from test dataset to put in the results later\n",
        "pass_ids = data_test[['PassengerId']]\n",
        "# remove PassengerId field that unique for every passenger\n",
        "data_train = data_train.drop(['PassengerId', 'Name', 'Ticket'], axis=1)\n",
        "data_test = data_test.drop(['PassengerId', 'Name', 'Ticket'], axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "e36cbe13-e437-f707-b88b-247dd97fcbfa"
      },
      "source": [
        "The dataset has two numerical features (Age and Fare), the rest are categorial features. Let's analyze each feature and it's impact on the result value (Survival)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "b1aba19c-a8e5-acc9-6538-1b1871f011b1"
      },
      "source": [
        "### Survived (data label)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d5ff3436-1e4e-8609-cb3b-459a2ceeb0ad"
      },
      "outputs": [],
      "source": [
        "data_train.Survived.value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "85249747-13b9-6e9d-dcb4-907ae17cea14"
      },
      "source": [
        "### Pclass (passenger class)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5ae1da52-0980-3ee6-8ef3-00ec82ae1e76"
      },
      "outputs": [],
      "source": [
        "# as class is categorical feature we can make its type as string\n",
        "data_train['Pclass'] = data_train['Pclass'].astype(str)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b61690b5-b699-e5bf-9783-3a7f26425d0c"
      },
      "outputs": [],
      "source": [
        "# possible class values\n",
        "print(data_train['Pclass'].value_counts().sort_index())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "de39ed87-c443-2dd5-b342-df3f57923c22"
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(9, 3))\n",
        "\n",
        "subplt = data_train[data_train.Pclass=='1']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[0], color='blue')\n",
        "subplt.set_title('Class 1')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[data_train.Pclass=='2']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[1], color='green')\n",
        "subplt.set_title('Class 2')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[data_train.Pclass=='3']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[2], color='pink')\n",
        "subplt.set_title('Class 3')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "08b508db-b928-af2d-42de-1e4270d3012e"
      },
      "source": [
        "We can see that there's a survival dependency on the passenger class. Passengers of higher class had a higher chance of survival."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "9ab7de64-1bf7-4a83-d516-fcac4f2fd94c"
      },
      "source": [
        "### Sex"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f80af27f-3d24-0a3d-1804-0d041d0ad94e"
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 3))\n",
        "\n",
        "subplt = data_train[data_train.Sex=='male']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[0], color='blue')\n",
        "subplt.set_title('Male')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[data_train.Sex=='female']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[1], color='green')\n",
        "subplt.set_title('Female')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "6fcd975d-4567-bb48-0dea-8d74faf12f1f"
      },
      "source": [
        "Females had a much bigger chance of survival"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "cddf2a8c-89fd-563d-fb2b-fc061b3964b9"
      },
      "source": [
        "### Age"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f309b36f-a4e8-8fdb-4909-5d51c2f1e876"
      },
      "outputs": [],
      "source": [
        "axis = data_train['Age'].dropna().astype(int).plot(kind='hist', bins=80)\n",
        "axis.set_title('Age distribution')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "3f82ecf4-0845-6e2d-6de1-e6d44f059fb8"
      },
      "source": [
        "Let's fill NaN age with random values (normally distributed with mean and standard deviation of the known age distribution) "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c842b8cc-38fb-db7c-8aca-f6ee1d4dc37a"
      },
      "outputs": [],
      "source": [
        "# train data\n",
        "mean_age = data_train['Age'].mean()\n",
        "std_age = data_train['Age'].std()\n",
        "print('Mean: {}, standard deviation: {}'.format(mean_age, std_age))\n",
        "tofillwith = np.floor(np.random.normal(mean_age, std_age, data_train['Age'].isnull().sum()))\n",
        "tofillwith[tofillwith < 0] = 0 # random value can be negative\n",
        "data_train['Age'][pd.isnull(data_train[\"Age\"])] = tofillwith"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9658cff0-7cc1-5f0e-fec7-aa63258a921f"
      },
      "outputs": [],
      "source": [
        "# check new distribution\n",
        "axis = data_train['Age'].astype(int).plot(kind='hist', bins=80)\n",
        "axis.set_title('Age distribution')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2419808d-024f-ebcf-f452-6888bbe76273"
      },
      "outputs": [],
      "source": [
        "# test data\n",
        "mean_age = data_test['Age'].mean()\n",
        "std_age = data_test['Age'].std()\n",
        "print('Mean: {}, standard deviation: {}'.format(mean_age, std_age))\n",
        "tofillwith = np.floor(np.random.normal(mean_age, std_age, data_test['Age'].isnull().sum()))\n",
        "tofillwith[tofillwith < 0] = 0 # random value can be negative\n",
        "data_test['Age'][pd.isnull(data_test[\"Age\"])] = tofillwith"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0eff7b56-15d4-f72a-3772-1281d86dfd4b"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(9,3))\n",
        "data_train[data_train.Survived==1]['Age'].plot(kind='density', label='Survived')\n",
        "data_train[data_train.Survived==0]['Age'].plot(kind='density', label='Died')\n",
        "plt.xlabel('Age')\n",
        "plt.legend()\n",
        "plt.title('Age distribution')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "417a8b04-1c3f-e685-d55b-24e488f2a358"
      },
      "source": [
        "### SibSp"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9959109c-f518-13e6-bd84-b9db381a1262"
      },
      "outputs": [],
      "source": [
        "data_train.SibSp.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "311cd83f-6d90-9d12-e7ab-92d3e3c64fde"
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(9, 3))\n",
        "ax1= sns.countplot(x='SibSp', data=data_train[data_train.Survived==1], ax=axes[0])\n",
        "ax2 = sns.countplot(x='SibSp', data=data_train[data_train.Survived==0], ax=axes[1])\n",
        "ax1.set_title('Survived')\n",
        "ax2.set_title('Died')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "80f213b5-5478-6743-9860-61b024e233e6"
      },
      "source": [
        "### Parch"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2c676832-73cb-49d0-68a9-cf468ac81153"
      },
      "outputs": [],
      "source": [
        "data_train.Parch.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a245ca7b-2d82-8abe-dcf2-85255af83c06"
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 5))\n",
        "ax1= sns.countplot(x='Parch', data=data_train[data_train.Survived==1], ax=axes[0])\n",
        "ax2 = sns.countplot(x='Parch', data=data_train[data_train.Survived==0], ax=axes[1])\n",
        "ax1.set_title('Survived')\n",
        "ax2.set_title('Died')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a079b6c9-25e4-573a-e61c-debcffaf6a76"
      },
      "outputs": [],
      "source": [
        "# Check dependency of SibSp and Parch features\n",
        "plt.scatter(data_train['SibSp'], data_train['Parch'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "2bf5c86c-f3ad-7fdc-2573-c6fb623b3661"
      },
      "source": [
        "It seems that SibSp and Parch features are quite independent"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "394c00d0-6d6a-d2e7-39f4-9afe9af2bcc7"
      },
      "source": [
        "### Fare"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9427ff3e-f7cb-1881-8bf3-e99c9aa35cf0"
      },
      "outputs": [],
      "source": [
        "plt.figure(figsize=(9,3))\n",
        "data_train[data_train.Survived==1]['Fare'].plot(kind='density', label='Survived')\n",
        "data_train[data_train.Survived==0]['Fare'].plot(kind='density', label='Died')\n",
        "plt.xlabel('Fare')\n",
        "plt.legend()\n",
        "plt.title('Fare distribution')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e98c8392-273e-2c9e-62cc-11c29c050ddf"
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9, 9))\n",
        "\n",
        "subplt = data_train[data_train.Fare<=10.]['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[0, 0])\n",
        "subplt.set_title('Fare < 10')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[(data_train.Fare>10.0) & (data_train.Fare<=50.0)]['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[0, 1])\n",
        "subplt.set_title('Fare from 10 to 50')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[(data_train.Fare>50.0) & (data_train.Fare<=100.0)]['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[1, 0])\n",
        "subplt.set_title('Fare from 50 to 100')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[data_train.Fare>100.0]['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[1, 1])\n",
        "subplt.set_title('Fare > 100')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "127aad65-453b-dea8-cd19-30369df7677c"
      },
      "source": [
        "People with low fare had less chances of survival"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "32539f37-bde5-b03a-76c3-71c0a958f27f"
      },
      "source": [
        "We have one NaN value in test data so we can set it to mean (from both train and test datasets)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5ecaac7b-24c6-bbed-245a-92ea0c6707cc"
      },
      "outputs": [],
      "source": [
        "mean_fare = (data_train['Fare'].sum() + data_test['Fare'].sum()) / (data_train['Fare'].count() + data_test['Fare'].count())\n",
        "data_test['Fare'] = data_test['Fare'].fillna(mean_fare)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "d961620a-8619-a825-094f-ec16e521daed"
      },
      "source": [
        "### Cabin"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ac34b501-845b-edf4-18bd-c838d81c6865"
      },
      "outputs": [],
      "source": [
        "print(data_train.Cabin.isnull().sum())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "42cfd744-73f2-6262-5810-50bfa7b5b783"
      },
      "source": [
        "We can remove this column as about querter of objects have NaN values, so it has no influence on result."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "43b06907-aacc-43ab-52d1-c292309fb3bb"
      },
      "outputs": [],
      "source": [
        "data_train.drop(['Cabin'], axis=1, inplace=True)\n",
        "data_test.drop(['Cabin'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "14adda7b-c86b-a02b-c6f5-4cf5d2426d8c"
      },
      "source": [
        "### Embarked"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "706dbf89-91f6-7555-efbd-66033688b3d3"
      },
      "outputs": [],
      "source": [
        "data_train['Embarked'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2485821a-6886-e504-6793-e82b8c9a4df4"
      },
      "outputs": [],
      "source": [
        "fig, axes = plt.subplots(nrows=1, ncols=3, figsize=(9, 2.5))\n",
        "\n",
        "subplt = data_train[data_train.Embarked=='S']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[0], color='blue')\n",
        "subplt.set_title('S')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[data_train.Embarked=='C']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[1], color='green')\n",
        "subplt.set_title('C')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])\n",
        "\n",
        "subplt = data_train[data_train.Embarked=='Q']['Survived'].value_counts().sort_index().plot(kind='bar', ax=axes[2], color='pink')\n",
        "subplt.set_title('Q')\n",
        "subplt.set_ylabel('count')\n",
        "subplt.set_xticklabels(['Died', 'Survived'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "d6fe6e15-2855-7411-546a-87b467f5709e"
      },
      "source": [
        "There are only two NaN values, so leave them as it is. Later they will disappeared after binary encoding "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "01f56774-5609-ab31-3d1e-bc85fb2bdefb"
      },
      "source": [
        "## Preprocess data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "2c040cf2-eef9-13f3-8131-66236e5a153c"
      },
      "source": [
        "### Binary encoding of categorial features"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "cb2f104a-2aab-2e01-2a48-e992ee410778"
      },
      "source": [
        "Let's make binary encoding of categorial features: Sex, Pclass, Embarked"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "4dba7ec6-1f75-d15e-df91-063cb0cd6be3"
      },
      "outputs": [],
      "source": [
        "# encode Sex feature\n",
        "data_train.Sex = np.where(data_train.Sex=='male', 1, 0)\n",
        "data_test.Sex = np.where(data_test.Sex=='male', 1, 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "eb1cd0d7-0774-3870-4c1c-312a4fe576b7"
      },
      "outputs": [],
      "source": [
        "# encode Pclass & Embarked feature\n",
        "data_train = pd.get_dummies(data=data_train, columns=['Pclass', 'Embarked'])\n",
        "data_test = pd.get_dummies(data=data_test, columns=['Pclass', 'Embarked'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ba464825-0f33-511b-c532-97a040aeae15"
      },
      "outputs": [],
      "source": [
        "print(data_train.info())\n",
        "print(data_test.info())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "5aa9adb9-9690-084f-dc5b-0421ccee9891"
      },
      "source": [
        "### Scaling real features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9b9dbdf3-a2af-0a9e-17c4-07b6cca716c8"
      },
      "outputs": [],
      "source": [
        "# Check before scaling\n",
        "pd.tools.plotting.scatter_matrix(data_train[['Age', 'Fare']], alpha=0.5, figsize=(7, 7))\n",
        "plt.suptitle('Age and Fare before scaling')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "796dc91a-a5a4-a33a-13e0-8767b1f5ea3e"
      },
      "source": [
        "We can see that real features, Age and Fare, have different scale."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5018afca-ae9e-3e1f-007d-0e27760c74d3"
      },
      "outputs": [],
      "source": [
        "scaler = preprocessing.StandardScaler()\n",
        "data_train[['Age', 'Fare']] = scaler.fit_transform(data_train[['Age', 'Fare']])\n",
        "data_test[['Age', 'Fare']] = scaler.transform(data_test[['Age', 'Fare']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "912f6833-2921-891c-057e-e4c549f8c9f9"
      },
      "outputs": [],
      "source": [
        "# Check after scaling\n",
        "pd.tools.plotting.scatter_matrix(data_train[['Age', 'Fare']], alpha=0.5, figsize=(7, 7))\n",
        "plt.suptitle('Age and Fare after scaling')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "54a7c2e4-4948-46c7-9e30-12dc4403d130"
      },
      "source": [
        "## Chosing classifier "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9c6ecda8-c6a5-e7ab-9aa7-f2c32eb65465"
      },
      "outputs": [],
      "source": [
        "# Extract features (X) and labels (y) from data\n",
        "X = data_train[data_train.columns[1:]]\n",
        "y = data_train[data_train.columns[0]]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "dff3d593-8202-7def-9db2-c7c506aa4152"
      },
      "source": [
        "### Logistic regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9a65c49c-d98e-bcc7-980d-7a4bbe47f41d"
      },
      "outputs": [],
      "source": [
        "# Finding optimal parameters of the classifier\n",
        "param_grid = {\n",
        "              'C': [0.01, 0.05, 0.1, 0.5, 1],\n",
        "              'penalty': ['l1', 'l2']\n",
        "             }\n",
        "estimator = linear_model.LogisticRegression()\n",
        "lr_gs = grid_search.GridSearchCV(estimator, param_grid, cv=4)\n",
        "lr_gs.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f48a3532-a995-bd97-b5b4-683c91f09ba7"
      },
      "outputs": [],
      "source": [
        "lr_estimator = lr_gs.best_estimator_\n",
        "print(lr_gs.best_params_)\n",
        "print(lr_gs.best_score_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "ba6980f2-41f4-2ea4-1bad-51458446b66f"
      },
      "source": [
        "### K Nearest Neighbors"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "18fc8658-9cac-7b3e-6199-eeee7993f491"
      },
      "outputs": [],
      "source": [
        "# Finding optimal parameters of the classifier\n",
        "param_grid = {\n",
        "              'n_neighbors': [1, 3, 5, 7, 9, 11, 13],\n",
        "              'weights': ['uniform', 'distance'],\n",
        "              'p': [1, 2]\n",
        "             }\n",
        "estimator = neighbors.KNeighborsClassifier()\n",
        "knn_gs = grid_search.GridSearchCV(estimator, param_grid, cv=4)\n",
        "knn_gs.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f30c5450-ce8c-6700-deee-73fcb792c455"
      },
      "outputs": [],
      "source": [
        "knn_estimator = knn_gs.best_estimator_\n",
        "print(knn_gs.best_params_)\n",
        "print(knn_gs.best_score_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "3943fc5e-0257-908e-d44b-0cb50121cf3f"
      },
      "source": [
        "### Support Vector Machine"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0b2941ba-052d-954b-b31d-e5fed7ee9bf3"
      },
      "outputs": [],
      "source": [
        "# Finding optimal parameters of the classifier\n",
        "param_grid = {\n",
        "              'C': [0.5, 1, 2, 4, 10, 20],\n",
        "              'kernel': ['linear', 'poly', 'rbf'],\n",
        "             }\n",
        "estimator = svm.SVC()\n",
        "svc_gs = grid_search.GridSearchCV(estimator, param_grid, cv=4)\n",
        "svc_gs.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2a693528-3078-60f7-b5ec-107fb4e883e5"
      },
      "outputs": [],
      "source": [
        "svc_estimator = svc_gs.best_estimator_\n",
        "print(svc_gs.best_params_)\n",
        "print(svc_gs.best_score_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "5e63b342-7997-8f0e-ab75-d82ba7e08eb7"
      },
      "source": [
        "### Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ee641ecd-249d-b361-9c52-5771df2fb19f"
      },
      "outputs": [],
      "source": [
        "# Finding optimal parameters of the classifier\n",
        "param_grid = {\n",
        "              'n_estimators': [50, 100, 500],\n",
        "              'min_samples_leaf': [1, 3, 5]\n",
        "             }\n",
        "estimator = ensemble.RandomForestClassifier()\n",
        "rf_gs = grid_search.GridSearchCV(estimator, param_grid, cv=4)\n",
        "rf_gs.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "8d365c31-faa2-8c0a-8099-125f326302e1"
      },
      "outputs": [],
      "source": [
        "rf_estimator = rf_gs.best_estimator_\n",
        "print(rf_gs.best_params_)\n",
        "print(rf_gs.best_score_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "07e75c90-6f3a-9133-694f-2740d97ce4dc"
      },
      "outputs": [],
      "source": [
        "# display feature importance\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.barh(np.arange(X.shape[1]), rf_estimator.feature_importances_, align='center')\n",
        "plt.yticks(np.arange(X.shape[1]), X.columns)\n",
        "plt.title('Feature importance')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "34b0d356-8c48-b738-296e-a7e76f8d34c9"
      },
      "source": [
        "### Gradient Boosting (XGBoost)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "42a58267-1f4f-baeb-4989-e4b333a9e8b0"
      },
      "outputs": [],
      "source": [
        "# Finding optimal parameters of the classifier\n",
        "param_grid = {\n",
        "              'n_estimators': [10, 50, 100],\n",
        "              'max_depth': [3, 5, 10],\n",
        "              'learning_rate': [0.1, 0.5]\n",
        "             }\n",
        "estimator = xgb.XGBClassifier()\n",
        "xgb_gs = grid_search.GridSearchCV(estimator, param_grid, cv=4)\n",
        "xgb_gs.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2584bdd8-bb1e-1910-9fea-a4cf5b22a7c1"
      },
      "outputs": [],
      "source": [
        "xgb_estimator = xgb_gs.best_estimator_\n",
        "print(xgb_gs.best_params_)\n",
        "print(xgb_gs.best_score_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "e8f4c584-10e9-25af-a7c7-dc5be66a8578"
      },
      "source": [
        "### Comparing models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5c8c597d-7a1a-f576-87b3-35b814705ead"
      },
      "outputs": [],
      "source": [
        "estimators = [lr_gs, knn_gs, svc_gs, rf_gs, xgb_gs]\n",
        "labels = ['Logistic regression', 'KNN', 'SVC', 'Random Forest', 'XGB']\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.barh(np.arange(5.), list(map(lambda e: e.best_score_, estimators)), align='center')\n",
        "plt.yticks(np.arange(5.), labels)\n",
        "plt.xlim(0.7, 0.9)\n",
        "plt.title('Models comparison')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "d7493831-0d2a-589b-57dd-0ceff6f9da3c"
      },
      "source": [
        "The best classifier is SVC with radial kernel, C = 4."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "524298d7-45ca-e084-5a64-65803e8c36c2"
      },
      "outputs": [],
      "source": [
        "estimator = svc_estimator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "783cc105-0d51-0339-57e6-ae4cabf96901"
      },
      "source": [
        "## Predict and submit"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "201844f9-fb60-a019-9265-72bec0b18cb2"
      },
      "outputs": [],
      "source": [
        "y_test = estimator.predict(data_test)\n",
        "result_df = pd.DataFrame(columns=['PassengerID', 'Survived'])\n",
        "result_df.PassengerID = pass_ids\n",
        "result_df.Survived = y_test\n",
        "result_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2267b3de-872f-f342-f82c-12ddde1cb4c3"
      },
      "outputs": [],
      "source": [
        "result_df.to_csv('titanic_results.csv', index=False)"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}