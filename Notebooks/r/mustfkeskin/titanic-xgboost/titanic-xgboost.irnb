{"nbformat": 4, "metadata": {"language_info": {"codemirror_mode": "r", "version": "3.4.0", "mimetype": "text/x-r-source", "name": "R", "file_extension": ".r", "pygments_lexer": "r"}, "kernelspec": {"name": "ir", "language": "R", "display_name": "R"}}, "cells": [{"execution_count": null, "outputs": [], "cell_type": "markdown", "source": "Titanic XGBoost", "metadata": {"_uuid": "a68b8562d7e3e2cccc5ed404d7f8a3d9751cb56a", "_execution_state": "idle", "_cell_guid": "b14b2003-7e4f-4c38-9b4b-26a82db50e99", "collapsed": false}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": "rm(list = ls())\nlibrary(data.table)\nlibrary(Matrix)\nlibrary(xgboost)\nlibrary(caret)\nlibrary(dplyr)\n\n\ncat(\"Read data\")\n\ndf_train <- fread('../input/train.csv', sep=\",\", na.strings = \"NA\")\ndf_test  <- fread('../input/test.csv' , sep=\",\", na.strings = \"NA\")\n", "metadata": {"_uuid": "4a3b68eafc00f189db0099f36f156c0bc28b9c73", "_cell_guid": "69d4a501-e337-4ca2-8a2c-aaf0819913af", "_execution_state": "idle", "trusted": false, "collapsed": false}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": "df_test %>% summarise_each(funs(sum(is.na(.))))\ndf_train %>% summarise_each(funs(sum(is.na(.))))\ndf_test[is.na(df_test$Age),\"Age\"] <- mean(df_test$Age, na.rm = TRUE)\ndf_train[is.na(df_train$Age),\"Age\"] <- mean(df_train$Age, na.rm = TRUE)\n\n\n\ndata = rbind(df_train,df_test,fill=T)\ndata$Title <- gsub('(.*, )|(\\\\..*)', '', data$Name)\n\nrare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', \n                'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')\n\n# Also reassign mlle, ms, and mme accordingly\ndata$Title[data$Title == 'Mlle']        <- 'Miss' \ndata$Title[data$Title == 'Ms']          <- 'Miss'\ndata$Title[data$Title == 'Mme']         <- 'Mrs' \ndata$Title[data$Title %in% rare_title]  <- 'Rare Title'\n\ndata$Surname <- sapply(data$Name,  \n                       function(x) strsplit(x, split = '[,.]')[[1]][1])\n\n# Create a family size variable including the passenger themselves\ndata$Fsize <- data$SibSp + data$Parch + 1\n\ndata$FsizeD[data$Fsize == 1] <- 'singleton'\ndata$FsizeD[data$Fsize < 5 & data$Fsize > 1] <- 'small'\ndata$FsizeD[data$Fsize > 4] <- 'large'\n\ndata$isAlone <- 0\ndata[data$Fsize == 1,\"isAlone\"] <- 1\n\n\ndata$Deck <- factor(sapply(data$Cabin, function(x) unlist(strsplit(x, NULL)[[1]][1])))\n\ndata <- data[,-c(\"Ticket\",\"Name\",\"Surname\", \"Cabin\", \"Deck\")]\nohe_feats = c('Pclass', \"Sex\",'SibSp' ,'Parch', 'Embarked', 'Title', 'FsizeD', 'isAlone','Fsize')\n\n\nfor (f in ohe_feats){\n    levels = unique(data[[f]])\n    data[[f]] = factor(data[[f]], level = levels)\n}\n\n\n\ntrain = data[data$PassengerId %in% df_train$PassengerId,]\ny_train <- train[!is.na(Survived),Survived]\ntrain = train[,Survived:=NULL]\ntrain = train[,PassengerId:=NULL]\ntrain_sparse <- data.matrix(train)\n\ntest = data[data$PassengerId  %in% df_test$PassengerId,]\ntest_ids <- test[,PassengerId]\ntest[,Survived:=NULL]\ntest[,PassengerId:=NULL]\ntest_sparse <- data.matrix(test)\n\ndtrain <- xgb.DMatrix(data=train_sparse, label=y_train)\ndtest <- xgb.DMatrix(data=test_sparse);", "metadata": {"_uuid": "11d54a8bf55616a44b1446c6a3f3d78c24651434", "_cell_guid": "8c9175b7-3dcb-4669-80c0-3589ddb6a06f", "_execution_state": "idle", "trusted": false, "collapsed": false}}, {"execution_count": null, "outputs": [], "cell_type": "markdown", "source": "# %78.947 accuracy", "metadata": {"_uuid": "798e815c07d6d2c52ba4766d11d7727db2241b8c", "_execution_state": "busy", "_cell_guid": "02ec8054-1e15-4995-8115-6e0a2d8576ae", "collapsed": false}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": "gc()\n\n# Params for xgboost\nparam <- list(booster = \"gbtree\",\n              eval_metric = \"auc\", \n              objective = \"binary:logistic\",\n              eta = .11,\n              gamma = 1,\n              max_depth = 6,\n              min_child_weight = 1,\n              subsample = .7,\n              colsample_bytree = .7)\n\n\nrounds = 72\nmpreds = data.table(id=test_ids)\n\nfor(random.seed.num in 1:10) {\n  print(paste(\"[\", random.seed.num , \"] training xgboost begin \",sep=\"\",\" : \",Sys.time()))\n  set.seed(random.seed.num)\n  xgb_model <- xgb.train(data = dtrain,\n                         params = param,\n                         watchlist = list(train = dtrain),\n                         nrounds = rounds,\n                         verbose = 1,\n                         print_every_n = 5)\n  \n  vpreds = predict(xgb_model,dtest) \n  mpreds = cbind(mpreds, vpreds)    \n  colnames(mpreds)[random.seed.num+1] = paste(\"pred_seed_\", random.seed.num, sep=\"\")\n}\n\nmpreds_2 = mpreds[, id:= NULL]\nmpreds_2 = mpreds_2[, y := rowMeans(.SD)]\n\nmpreds_2[mpreds_2$y <= 0.5,\"x\"] <- 0\nmpreds_2[mpreds_2$y > 0.5,\"x\"] <- 1\n\n\nsubmission = data.table(PassengerId=test_ids, Survived=mpreds_2$x)\nwrite.table(submission, \"titanic_xgboost.csv\", sep=\",\", dec=\".\", quote=FALSE, row.names=FALSE)\n\n", "metadata": {"_uuid": "53110ad732568f9c1743c95061dbf7454203f9db", "_cell_guid": "d7569cc7-a14e-43a4-80ad-48e2c9be7542", "_execution_state": "busy", "trusted": false, "collapsed": false}}, {"execution_count": null, "outputs": [], "cell_type": "code", "source": "", "metadata": {"_uuid": "8a584a540a47c44694a7682f76d20dfee1e49b9d", "_cell_guid": "4b676b6a-6a41-4ac9-99fe-9a65e1c802bd", "_execution_state": "idle", "trusted": false, "collapsed": false}}], "nbformat_minor": 0}