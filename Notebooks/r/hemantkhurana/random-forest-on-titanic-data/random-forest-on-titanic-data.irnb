{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "c52549c0-6a9d-2ace-2872-82c20cbea017"
      },
      "source": [
        "Rendome  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6b007682-0470-9715-6e70-3d0e374dbb98"
      },
      "outputs": [],
      "source": [
        "# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n",
        "# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "# Load packages\n",
        "library('ggplot2') # visualization\n",
        "library('ggthemes') # visualization\n",
        "library('scales') # visualization\n",
        "library('dplyr') # data manipulation\n",
        "library('mice') # imputation\n",
        "library('randomForest') # classification algorithm\n",
        "library(VIM) # for NA\n",
        "library(dummies) #For String Index\n",
        "# For modeling and predictions\n",
        "library(caret)\n",
        "library(glmnet)\n",
        "library(ranger)\n",
        "library(e1071)\n",
        "# Input data files are available in the \"../input/\" directory.\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
        "\n",
        "system(\"ls ../input\")\n",
        "traindata=read.csv(\"../input/train.csv\",header = TRUE, stringsAsFactors  = FALSE,na.strings=c(\"NA\",\"NaN\", \"\",\" \") )\n",
        "\n",
        "testdata=read.csv(\"../input/test.csv\",header = TRUE, stringsAsFactors  = FALSE,na.strings=c(\"NA\",\"NaN\", \"\",\" \"))\n",
        "testdata$Survived=NA\n",
        "fulldata=rbind(traindata,testdata)\n",
        "#Check Null Data\n",
        "aggr_plot <- aggr(fulldata, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(fulldata), cex.axis=.7, gap=3, ylab=c(\"Histogram of missing data\",\"Pattern\"))\n",
        "#Cabin has 80% data missing, Age has 20 % Missing and Embarked and Fare had less then 2%\n",
        "\n",
        "#First Get Last name (family Name ) and Title details from name\n",
        "\n",
        "\n",
        "fulldata$Title=sub(' ','',sapply(fulldata$Name,FUN=function(x){strsplit(x,split='[.,.]')[[1]][2]}))\n",
        "fulldata$Lastname=sub(' ','',sapply(fulldata$Name,FUN=function(x){strsplit(x,split='[.,.]')[[1]][1]}))\n",
        "#List of titles\n",
        "unique(fulldata$Title)\n",
        "table (fulldata$Sex,fulldata$Title)\n",
        "\n",
        "# Map Title to smaller subset\n",
        "\n",
        "map <- new.env(hash=T, parent=emptyenv())\n",
        "key <- c( \"Mr\",\"Mrs\"    ,\"Lady\"  ,\"Mme\" ,\"Ms\" ,\"Miss\" ,\"Mlle\",\"Master\",\"Rev\",\"Don\",\"Sir\",\"Dr\",\"Col\" ,\"Capt\",\"Major\")  \n",
        "keyvalue <- c(\"Mr\",\"Mrs\",\"Mrs\",\"Mrs\",\"Miss\",\"Miss\",\"Miss\",\"Master\",\"Rev\",\"Mr\",\"Sir\",\"Dr\",\"Col\",\"Col\",\"Col\") \n",
        "for(keyv in key)\n",
        "{\n",
        "  map[[keyv]]=(keyvalue[key==keyv])\n",
        "}\n",
        "\n",
        "fulldata$Title=sapply(fulldata$Title,FUN=function(x){map[[x]]})\n",
        "fulldata$Title=as.character(fulldata$Title)\n",
        "fulldata$Title[c(760, 1306)] <- 'Mrs' \n",
        "fulldata$Title[c(823)] <- 'Mr'\n",
        "fulldata$FamilySize=fulldata$SibSp+ fulldata$Parch+1\n",
        "\n",
        "#ppl who were travlling on same ticket group \n",
        "\n",
        "fulldata$Groupticket=NA\n",
        "fulldata <- (transform(fulldata, Groupticket = match(Ticket, unique(Ticket))))\n",
        "\n",
        "#ppl sharing same family name\n",
        "\n",
        "fulldata$Samesurname=NA\n",
        "fulldata <- (transform(fulldata, Samesurname = match(Lastname, unique(Lastname))))\n",
        "fulldata$Groupticket <- as.factor(fulldata$Groupticket)\n",
        "fulldata$Samesurname <- as.factor(fulldata$Samesurname)\n",
        "\n",
        "\n",
        "fulldata <- fulldata %>% \n",
        "  group_by(Groupticket) %>% \n",
        "  mutate(TicketGroupSize = n()) %>%\n",
        "  ungroup()\n",
        "\n",
        "fulldata <- fulldata %>% \n",
        "  group_by(Samesurname) %>% \n",
        "  mutate(FamilynameSize = n()) %>%\n",
        "  ungroup()\n",
        "\n",
        " fulldata$Deck=sub(' ','',sapply(fulldata$Cabin,FUN=function(x){substring(x,0,1)}))\n",
        "\n",
        "\n",
        "#Check Null Records\n",
        "\n",
        "#Check Embarked\n",
        "\n",
        "fulldata[(which(is.na(fulldata$Embarked))) ,c(1,3,6,10,20) ]\n",
        "\n",
        "\n",
        "embark_fare <- fulldata %>%\n",
        "  filter(PassengerId != 62 & PassengerId != 830)\n",
        "\n",
        "# Use ggplot2 to visualize embarkment, passenger class, & median fare\n",
        "ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n",
        "  geom_boxplot() +\n",
        "  geom_hline(aes(yintercept=80), \n",
        "             colour='red', linetype='dashed', lwd=2) +\n",
        "  scale_y_continuous(labels=dollar_format()) +\n",
        "  theme_few()\n",
        "fulldata$Embarked[c(62, 830)] <- 'C'\n",
        "\n",
        "#Check Fare\n",
        "\n",
        "fulldata[(which(is.na(fulldata$Fare) | fulldata$Fare==0)) ,c(1,3,6,10,20) ]\n",
        "\n",
        "#find value for Fare 0 also\n",
        "\n",
        "fulldata$Fare[fulldata$Fare==0]=NA\n",
        "str(fulldata)\n",
        "\n",
        "\n",
        "#replace fare with Mean values     \n",
        "         \n",
        "fulldata[, names(fulldata) %in% c('Pclass','Deck','Embarked','Fare')]=  fulldata[, names(fulldata) %in% c('Pclass','Deck','Embarked','Fare')] %>%\n",
        "  group_by(Pclass,Deck,Embarked) %>% \n",
        "  mutate_each(funs(replace(Fare, which(is.na(Fare)),\n",
        "                           mean(Fare,na.rm = TRUE))))\n",
        "\n",
        "\n",
        "\n",
        "# convert Values into factor\n",
        "\n",
        "str(fulldata)\n",
        "\n",
        "\n",
        "factor_vars <- c('Pclass','Sex','Embarked','Title','Survived')\n",
        "\n",
        "fulldata[factor_vars] <- lapply(fulldata[factor_vars], function(x) as.factor(x))\n",
        "\n",
        "\n",
        "#pridict Age based on Mice\n",
        "\n",
        "\n",
        "mice_mod <- mice(fulldata[, names(fulldata) %in% c('Pclass','Sex','SibSp','Parch','Fare','Embarked','FamilySize','FamilynameSize','TicketGroupSize','Age')], method='rf') \n",
        "predicted_output <- complete(mice_mod)\n",
        "#Check Age distribution \n",
        "par(mfrow=c(1,2))\n",
        "hist(fulldata$Age, freq=F, main='Age: Original Data', \n",
        "     col='darkgreen', ylim=c(0,0.04))\n",
        "hist(predicted_output$Age, freq=F, main='Age: MICE Output', \n",
        "     col='lightgreen', ylim=c(0,0.04))\n",
        "\n",
        "\n",
        "fulldata$Age[is.na(fulldata$Age)] <- predicted_output$Age[is.na(fulldata$Age)]\n",
        "\n",
        "\n",
        "#Predict Traveller Deck based on Fare \n",
        "\n",
        "\n",
        "\n",
        "predicted_deck <- train(\n",
        "  Deck ~ Pclass +  Fare + Embarked ,\n",
        "  tuneGrid = data.frame(mtry = c(2, 3, 7)),\n",
        "  data = fulldata[!is.na(fulldata$Deck), ],\n",
        "  method = \"ranger\",\n",
        "  trControl = trainControl(\n",
        "    method = \"cv\", number = 10,\n",
        "    repeats = 10, verboseIter = TRUE),\n",
        "  importance = 'impurity'\n",
        ")\n",
        "\n",
        "fulldata$Deck=as.factor(fulldata$Deck)\n",
        "fulldata$Deck[is.na(fulldata$Deck)] <- predict(predicted_deck, fulldata[is.na(fulldata$Deck),])\n",
        "\n",
        "\n",
        "ggplot(fulldata, aes(x = Deck, y = Fare, fill = factor(Pclass))) +\n",
        "  geom_boxplot() +\n",
        "  geom_hline(aes(yintercept=80), \n",
        "             colour='red', linetype='dashed', lwd=2) +\n",
        "  scale_y_continuous(labels=dollar_format()) +\n",
        "  theme_few()\n",
        "\n",
        "\n",
        "\n",
        "#Check Female and kids\n",
        "\n",
        "\n",
        "fulldata$isFemale=0\n",
        "\n",
        "fulldata$isFemale[fulldata$Sex == 'female' & (fulldata$Parch > 0 | fulldata$TicketGroupSize>1 | fulldata$FamilynameSize>1) & fulldata$Age > 18 & fulldata$Title != 'Miss'] <- 1\n",
        "\n",
        "fulldata$isKids=0\n",
        "\n",
        "fulldata$isKids[fulldata$Age <=18  & (fulldata$Parch > 0 | fulldata$TicketGroupSize>1 | fulldata$FamilynameSize>1)  & fulldata$Title != 'Mrs'] <- 1\n",
        "\n",
        "# Apply Predition\n",
        "\n",
        "train <- fulldata[1:891,]\n",
        "test <- fulldata[892:1309,]\n",
        "myControl <- trainControl(\n",
        "  method = \"cv\", \n",
        "  number = 10,\n",
        "  repeats = 30, \n",
        "  verboseIter = TRUE\n",
        ")\n",
        "#Use RF Model\n",
        "rf_model <- train(\n",
        "  Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize +Groupticket+ \n",
        "    Samesurname + TicketGroupSize+FamilynameSize+isFemale+Deck+isKids,\n",
        "  tuneGrid = data.frame(mtry = c(2, 5, 8, 10, 15)),\n",
        "  data = train, \n",
        "  method = \"ranger\", \n",
        "  trControl = myControl,\n",
        "  importance = 'impurity'\n",
        ")\n",
        "test <- test %>%\n",
        "  arrange(PassengerId)\n",
        "my_prediction <- predict(rf_model, test)\n",
        "\n",
        "output <- data.frame(PassengerID = test$PassengerId, Survived = my_prediction)\n",
        "\n",
        "# Write the solution to a csv file \n",
        "write.csv(output, file = \"titanic_summission.csv\", row.names = FALSE)    \n",
        "    \n",
        "# Any results you write to the current directory are saved as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6ae2d15f-5283-a0aa-75ed-c4bc7c6f786e"
      },
      "outputs": [],
      "source": ""
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "be8fa019-8b06-e474-618e-308e2e7affda"
      },
      "outputs": [],
      "source": ""
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}