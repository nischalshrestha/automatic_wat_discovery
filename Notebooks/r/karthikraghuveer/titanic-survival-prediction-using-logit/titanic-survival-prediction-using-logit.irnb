{"cells":[{"metadata":{"_uuid":"39546edbb19e639ada1c0bf5ad1902a1eef28eaf","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\nlibrary(VIM)\nlibrary(data.table)\nlibrary(tidyr)\nlibrary(readr)\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.\n\n\n\n\n\n\n#####Read data from the files#######\n\nTraining_data<-read.csv('../input/train.csv',na.strings =c(\"\",\"na\") )\nTest_data<-read.csv('../input/test.csv',na.strings=c(\"\",'na'))\ngender<-read.csv('../input/gender_submission.csv')\n\n###Getting insight into the datatype####\nstr(Training_data)\n\n\n######Informing the model about factors######\nTraining_data$Pclass<-factor(Training_data$Pclass)\nTraining_data$Survived<-factor(Training_data$Survived)\nTraining_data$Embarked<-factor(Training_data$Embarked)\n\n\n\nTest_data$Pclass<-factor(Test_data$Pclass)\n\n\n\n\n#######Summary of Training data#####\nsummary(Training_data)\n\n\n######This line of code helps us identify the count NA values in differnet columns##\nNA_value_Train<-sapply(Training_data,function(x) sum(is.na(x)))\nNA_value_Test<-sapply(Test_data,function(x) sum(is.na(x)))\n\n#### We observe that Cabin has highest NA values ######\nTraining_data$Cabin<-NULL  ####Removing the cabin column \nTest_data$Cain<-NULL\n\n#####Handling the Missing data using KNN Imputation technique#####\nimputed_Training_data<-kNN(Training_data,variable ='Age')\nimputed_test_data<-kNN(Test_data,variable=c('Age','Fare'))\n\n#####Removing the logical variable added due to imputation####\nimputed_Training_data$Age_imp<-NULL\nimputed_test_data$Age_imp<-NULL\nimputed_test_data$Fare_imp<-NULL\n####Applying the logistic regression model on the train data######\n\nsurvive_model<-glm(Survived ~Age+Sex+Pclass+SibSp+Fare+Embarked+Parch, data =imputed_Training_data,family ='binomial')\n\n#####Prediciting the test data######\n\nsurvival_test<-predict(survive_model,newdata=imputed_test_data,type = 'response')\n\n\n######Checking accuracy through confusion matrix ######\npred=rep(0,nrow(imputed_test_data))\npred[survival_test >0.56]=1\n\ntable(pred,gender$Survived,dnn =c('Predicted','Actual'))\n\n\n\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}