{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "4929b25f-1a30-5de9-f650-6e2ee5f7fffe"
      },
      "outputs": [],
      "source": [
        "---\n",
        "title: \"Titanic: Machine Learning from Disaster\"\n",
        "author: Matthias Westhues\n",
        "date: \"`r format(Sys.time(), '%d %B, %Y')`\"\n",
        "output:\n",
        "  html_notebook:\n",
        "    number_sections: true\n",
        "    toc: true\n",
        "    fig_width: 7\n",
        "    fig_height: 4.5\n",
        "    theme: readable\n",
        "    highlight: tango\n",
        "---\n",
        "\n",
        "# Competition Description\n",
        "> The sinking of the RMS Titanic is one of the most infamous shipwrecks in \n",
        "> history.\n",
        "> On April 15, 1912, during her maiden voyage, the Titanic sank after colliding \n",
        "> with an iceberg, killing 1502 out of 2224 passengers and crew.\n",
        "> This sensational tragedy shocked the international community and led to better \n",
        "> safety regulations for ships.\n",
        "\n",
        "> One of the reasons that the shipwreck led to such loss of life was that there \n",
        "> were not enough lifeboats for the passengers and crew.\n",
        "> Although there was some element of luck involved in surviving the sinking,\n",
        "> some groups of people were more likely to survive than others, such as women,\n",
        "> children, and the upper-class.\n",
        "\n",
        "> In this challenge, we ask you to complete the analysis of what sorts of people \n",
        "> were likely to survive. In particular, we ask you to apply the tools of machine \n",
        "> learning to predict which passengers survived the tragedy.\n",
        "\n",
        "[Source](https://www.kaggle.com/c/titanic)\n",
        "\n",
        "\n",
        "## Data Dictionary\n",
        "| Variable | Description                                |\n",
        "| -------- | -----------                                |\n",
        "| survival | Survival  (0 = No, 1 = Yes)                |\n",
        "| pclass   | Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd)   |\n",
        "| sex      | Sex                                        |\n",
        "| Age      | Age in years                               |\n",
        "| sibsp    | # of siblings / spouses aboard the titanic | \n",
        "| parch    | # of parents / children aboard the titanic |\n",
        "| ticket   | Ticket number                              |\n",
        "| fare     | Passenger fare                             |\n",
        "| embarked | Port of Embarkation                        |\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Load and check data\n",
        "```{r Load_Data, message = FALSE}\n",
        "# Load packages\n",
        "if (!require(\"pacman\")) install.packages(\"pacman\")\n",
        "## Package overview\n",
        "# dplyr: data manipulation\n",
        "# purrr: functional programming\n",
        "# readr: read data\n",
        "# stringr: string manipulation\n",
        "# ggplot2: visualizations\n",
        "# tibble: alternative data frames\n",
        "# forcats: factor manipulation\n",
        "# mice: chained missing value imputation\n",
        "# tidyr: data reshaping/tidying\n",
        "# caret: machine learning wrapper\n",
        "# DMwR: SMOTE subsampling during resampling\n",
        "# kernlab: Support Vector Machines\n",
        "# pamr: Nearest Shrunken Centroids\n",
        "# nnet: Neural Networks\n",
        "# xgboost: Extreme Gradient Boosting\n",
        "\n",
        "# Install a 'dplyr' version that is more recent than 0.50 because the function\n",
        "# case_when() did not comply with mutate() in this and earlier versions.\n",
        "pacman::p_load_gh(\"tidyverse/dplyr\")\n",
        "pacman::p_load(\n",
        "  \"purrr\", \"readr\", \"stringr\", \"ggplot2\", \"tibble\", \"forcats\", \"mice\", \"tidyr\", \n",
        "  \"caret\", \"DMwR\", \"kernlab\", \"pamr\", \"nnet\", \"xgboost\"\n",
        ")\n",
        "\n",
        "# Training data\n",
        "train_dat <- \"../input/train.csv\" %>% \n",
        "  read_csv()\n",
        "# Test data\n",
        "test_dat <- \"../input/test.csv\" %>% \n",
        "  read_csv()\n",
        "# For feature pre-processing, merge the training and the test data sets.\n",
        "full <- list(\n",
        "  Training = train_dat,\n",
        "  Test = test_dat\n",
        "  ) %>% \n",
        "  bind_rows(.id = \"Data_Set\")\n",
        "```\n",
        "\n",
        "\n",
        "First, we'll have a look at the structure of the data.\n",
        "```{r}\n",
        "full %>% \n",
        "  summary()\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Names and titles\n",
        "The 'Name' variable contains not only the names of passengers, but also their\n",
        "respective titles.\n",
        "This might provide useful information on top of knowing the passengers' gender\n",
        "and their ticket price.\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  select(Name) %>% \n",
        "  flatten_chr() %>% \n",
        "  head(n = 10L)\n",
        "```\n",
        "\n",
        "Let's extract these titles.\n",
        "Here, it seems as if the last name is separated from the title by a `,`, which\n",
        "is in turn succeded by a `.`.\n",
        "\n",
        "```{r}\n",
        "# Function for extracting the title from the 'Name' variable.\n",
        "extract_title <- function(x) {\n",
        "  passenger_pos <- regexpr(\n",
        "    \"(?<=,\\\\s)[[:word:]]+(?=\\\\.)\", text = x, perl = TRUE\n",
        "  )\n",
        "  titles <- substring(\n",
        "    x, \n",
        "    first = passenger_pos,\n",
        "    last = passenger_pos + attr(passenger_pos, \"match.length\") - 1\n",
        "  )\n",
        "  titles\n",
        "}\n",
        "\n",
        "# Extract the title.\n",
        "full <- full %>% \n",
        "  mutate(Title = extract_title(Name))\n",
        "\n",
        "# Look at the unique titles.\n",
        "full %>% \n",
        "  select(Title) %>% \n",
        "  unique() %>% \n",
        "  flatten_chr()\n",
        "```\n",
        "\n",
        "At least one person doesn't have a title.\n",
        "Let's see what's going on there.\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  filter(nchar(Title) == 0) %>% \n",
        "  select(Name) %>% \n",
        "  flatten_chr()\n",
        "```\n",
        "\n",
        "Ok, so this passenger actually has a title, which was not captured by the \n",
        "regular expression.\n",
        "Let's just record her as \"Countess\" manually, here.\n",
        "\n",
        "```{r}\n",
        "full <- full %>% \n",
        "  mutate(Title = if_else(\n",
        "    nchar(Title) == 0,\n",
        "    true = \"Countess\", \n",
        "    false = Title\n",
        "  ))\n",
        "\n",
        "full %>% \n",
        "  select(Title) %>% \n",
        "  flatten_chr() %>% \n",
        "  unique()\n",
        "```\n",
        "\n",
        "\n",
        "Let's see, if the titles also have some information on the age of the passengers.\n",
        "```{r}\n",
        "full %>% \n",
        "  ggplot(aes(x = Title, y = Age)) +\n",
        "  geom_boxplot() +\n",
        "  facet_wrap(~ Sex, scales = \"free\") +\n",
        "  theme(\n",
        "    axis.text.x = element_text(angle = 45, hjust = 1)\n",
        "  )\n",
        "```\n",
        "\n",
        "It looks like all male children were titled 'Master'. \n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  filter(Title == \"Master\") %>% \n",
        "  select(Age) %>% \n",
        "  flatten_dbl() %>% \n",
        "  summary()\n",
        "```\n",
        "\n",
        "I'll impute the age of the `r full %>% filter(Title == \"Master\") %>% select(Age) %>% flatten_dbl() %>% is.na() %>% sum()` NAs of passengers with the title 'Master' as \n",
        "the arithmetic mean of this group.\n",
        "```{r}\n",
        "impute_age_as_average <- function(x) {\n",
        "  x %>% \n",
        "   mutate(Age = if_else(\n",
        "     is.na(Age),\n",
        "     true = mean(Age, na.rm = TRUE),\n",
        "     false = Age\n",
        "   ))\n",
        "}\n",
        "\n",
        "full <- full %>% \n",
        "  split(.$Title) %>% \n",
        "  map_at(\"Master\", .f = ~impute_age_as_average(.)) %>% \n",
        "  bind_rows()\n",
        "```\n",
        "\n",
        "\n",
        "Some of the titles have the same meaning, such as \"Miss\" and \"Ms\", however, \n",
        "titles such as \"Lady\" might hint at their social status.\n",
        "Here, we'll aggregate some titles.\n",
        "```{r}\n",
        "full <- full %>% \n",
        "  mutate(Title = fct_collapse(Title,\n",
        "    Mrs = c(\"Mrs\", \"Mme\"),\n",
        "    Miss = c(\"Miss\", \"Ms\"),\n",
        "    Upperclass = c(\n",
        "      \"Don\", \"Dona\", \"Rev\", \"Dr\", \"Major\", \"Lady\", \"Sir\", \"Mlle\", \"Col\", \n",
        "      \"Capt\", \"Countess\", \"Jonkheer\"\n",
        "      ),\n",
        "    Clerical = \"Rev\"\n",
        "  ))\n",
        "```\n",
        "\n",
        "\n",
        "Some of the passengers had the title \"Rev\", hence I've caterogized them as 'Clerical'.\n",
        "Were members of the clerus more likely to help other's and refrain from taking a spot in any of the life boats?\n",
        "```{r}\n",
        "full %>% \n",
        "  filter(Title == \"Clerical\") %>% \n",
        "  select(Survived) %>% \n",
        "  flatten_int() %>% \n",
        "  summary()\n",
        "```\n",
        "\n",
        "Indeed, none of the reverends survived.\n",
        "\n",
        "\n",
        "\n",
        "# Fare\n",
        "Is the fare different for children and for adults?\n",
        "```{r}\n",
        "categorize_age <- Vectorize(\n",
        "  function(x) {\n",
        "    if (x <= 6) {\n",
        "      \"Young_Child\"\n",
        "    } else if (6 < x && x <= 16) {\n",
        "      \"Kid\"\n",
        "    }\n",
        "  }\n",
        ")\n",
        "full %>% \n",
        "  mutate(Age_Category = case_when(\n",
        "    .$Age <= 6 ~ \"Young_Child\",\n",
        "    .$Age <= 16 ~ \"Kid\",\n",
        "    .$Age > 16 ~ \"Adult\",\n",
        "    is.na(.$Age) ~ \"Missing\"\n",
        "  )) %>% \n",
        "  ggplot(aes(x = Age_Category, y = Fare)) +\n",
        "  geom_boxplot() +\n",
        "  facet_wrap(~ Pclass)\n",
        "```\n",
        "\n",
        "Surprisingly, the ticket fares for children were not lower; actually they were\n",
        "rather higher than for adults.\n",
        "Hence, we should not use information on the ticket price for imputing the age\n",
        "of other passengers.\n",
        "\n",
        "\n",
        "\n",
        "# Families\n",
        "We would like to know whether single passengers have a higher chance of \n",
        "surviving than families.\n",
        "```{r}\n",
        "# Assign passengers to either \"Single\" (i.e., travelling by themselves),\n",
        "# \"Small\" families or \"Large\" families.\n",
        "full <- full %>% \n",
        "  mutate(\n",
        "    Surname = gsub(\",.*$\", replacement = \"\", x = Name),\n",
        "    Family_Size = SibSp + Parch + 1\n",
        "  ) %>% \n",
        "  mutate(FamSizeD = case_when(\n",
        "    .$Family_Size > 4 ~ \"Large\",\n",
        "    .$Family_Size == 1 ~ \"Single\",\n",
        "    .$Family_Size <= 4 ~ \"Small\"\n",
        "  ))\n",
        "\n",
        "full %>% \n",
        "  filter(Data_Set == \"Training\") %>% \n",
        "  mutate(Survived = Survived %>% as.character()) %>% \n",
        "  rename(`Discrete Family Size` = FamSizeD) %>% \n",
        "  ggplot(aes(x = `Discrete Family Size`, fill = Survived)) +\n",
        "  geom_bar(position = \"fill\")\n",
        "```\n",
        "\n",
        "Members of large families had the lowest survival rate, followed by singles\n",
        "and members of small families, which had the highest chance of surviving the \n",
        "disaster.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Embarkation\n",
        "Did the location of embarkation have an influence on the chance for survival?\n",
        "```{r}\n",
        "full %>% \n",
        "  filter(Data_Set == \"Training\") %>% \n",
        "  mutate(Survived = Survived %>% as.character()) %>% \n",
        "  ggplot(aes(x = Embarked, fill = Survived)) +\n",
        "  geom_bar(position = \"fill\")\n",
        "```\n",
        "\n",
        "It looks as if passengers from Cherbourg had a higher chance of survival.\n",
        "But why should the point of their embarkation in itself have any influence on \n",
        "survival?\n",
        "Perhaps, the fraction of 1st class passengers among people who embarked in\n",
        "Cherbourg is higher compared to passengers from the other two cities.\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  mutate(Pclass = Pclass %>% as.character()) %>% \n",
        "  ggplot(aes(x = Embarked, fill = Pclass)) +\n",
        "  geom_bar(position = \"fill\")\n",
        "```\n",
        "\n",
        "Indeed, the fraction of first class passengers is highest among people who \n",
        "embarked the Titanic in Cherbourg.\n",
        "Our null hypothesis is that the location of embarkation and the passenger class\n",
        "are independent variables.\n",
        "We'll test this assumption with a $\\chi^{2}$-test.\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  select(Embarked, Pclass) %>% \n",
        "  table() %>% \n",
        "  chisq.test()\n",
        "```\n",
        "\n",
        "The $\\chi^{2}$-test confirms what was indicated by the bar plot: The location\n",
        "of embarkation and the passenger class do not seem to be independent variables.\n",
        "We can probably omit the `Embarked` variable from the prediction models.\n",
        "\n",
        "\n",
        "\n",
        "# Cabins/Decks\n",
        "Further, we would like to know whether there is any pattern in the cabin IDs.\n",
        "After all, a lower-deck cabin should be more likely to have people in a sinking \n",
        "ship trapped.\n",
        "\n",
        "```{r}\n",
        "# Get a glimpse of the general pattern of cabin names.\n",
        "full %>% \n",
        "  select(Cabin) %>% \n",
        "  flatten_chr() %>% \n",
        "  discard(is.na(.)) %>% \n",
        "  head(n = 10L)\n",
        "```\n",
        "\n",
        "So every cabin is initiated by a single letter, which might be indicative for\n",
        "the level of the cabin inside the ship.\n",
        "Let's extract this letter.\n",
        "```{r}\n",
        "extract_letter <- function(x) {\n",
        "  x %>% \n",
        "    stringr::str_match(., pattern = \"[A-Z]\") %>% \n",
        "    c()\n",
        "}\n",
        "\n",
        "full <- full %>% \n",
        "  mutate(CabinD = if_else(\n",
        "    !is.na(Cabin),\n",
        "    true = extract_letter(Cabin),\n",
        "    false = Cabin\n",
        "  ))\n",
        "\n",
        "full %>% \n",
        "  ggplot(aes(x = Pclass, fill = CabinD)) +\n",
        "  geom_bar(position = \"stack\")\n",
        "```\n",
        "\n",
        "Interesting; the majority of passengers from the first class has been assigned\n",
        "to cabins with valid numbers, whereas most passengers from the second and the\n",
        "third class do not have a record of their cabin.\n",
        "\n",
        "Let's further summarize by only looking at the distribution of existing\n",
        "cabins among passenger classes.\n",
        "```{r}\n",
        "full %>% \n",
        "  filter(!is.na(Cabin)) %>% \n",
        "  ggplot(aes(x = Pclass, fill = CabinD)) +\n",
        "  geom_bar(position = \"stack\")\n",
        "```\n",
        "\n",
        "Cabins with the letters A to C seem to have belonged almost exclusively to\n",
        "first class passengers.\n",
        "At this point, my hypothesis would be that these classes comprised the three \n",
        "uppermost levels of the Titanic, which should boost the passengers' chance of \n",
        "survival.\n",
        "So we should definitely model this variable!\n",
        "We should also have a look at the number of passengers in any cabin category\n",
        "and ensure that any category does not comprise a very low number of passengers,\n",
        "which would be useless for our predictions.\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  select(CabinD, Title) %>% \n",
        "  table() %>% \n",
        "  addmargins()\n",
        "```\n",
        "\n",
        "Clearly, categories \"G\" and \"T\", with 5 and 1 passenger, respectively, contain\n",
        "far too little information to be useful later on.\n",
        "Based on the previous plot and frequency table, we could see that the majority\n",
        "of identified cabins were taken by first class passengers.\n",
        "This can be further corroborated by looking at the following frequency table\n",
        "for the variables `CabinD` and `Pclass`:\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  select(CabinD, Pclass) %>% \n",
        "  table() %>% \n",
        "  addmargins()\n",
        "```\n",
        "\n",
        "Obviously, `CabinD` is only useful for assisting the prediction of survival for\n",
        "passengers of the first class.\n",
        "Therefore, I will assign all passengers from the second and the third class, as \n",
        "well as the single member of cabin category \"T\" to a new cabin class \"unknown\".\n",
        "\n",
        "```{r}\n",
        "full <- full %>% \n",
        "  mutate(CabinD = case_when(\n",
        "    CabinD == \"T\" ~ \"unknown\",\n",
        "    Pclass %in% c(2, 3) ~ \"unknown\",\n",
        "    is.na(CabinD) ~ \"unknown\",\n",
        "    Pclass == 1 ~ CabinD\n",
        "  ))\n",
        "\n",
        "# Check out the new levels.\n",
        "full %>% \n",
        "  select(CabinD, Pclass) %>% \n",
        "  table(useNA = \"ifany\") %>% \n",
        "  addmargins()\n",
        "```\n",
        "\n",
        "\n",
        "We could further have a look at the range of ticket prices for each cabin \n",
        "category:\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  ggplot(aes(x = CabinD, y = Fare, fill = CabinD)) +\n",
        "  geom_boxplot()\n",
        "```\n",
        "\n",
        "The ticket prices for cabin category \"A\" somewhat defy my hypothesis.\n",
        "This might be a special case, though.\n",
        "However, the prices in categories \"B\" and \"C\", which are made up largely by \n",
        "first class passengers, are in agreement with my hunch and we also see \n",
        "that prices decrease from category \"C\" onwards.\n",
        "The ticket prices for unclassified cabins are also considerably lower than \n",
        "most other categories.\n",
        "However, the fares for some unclassified cabins were fairly high, which \n",
        "suggests that something simply went wrong when recording the passengers.\n",
        "\n",
        "\n",
        "## Tickets\n",
        "Now, let's have a look at the tickets, which might add information on the \n",
        "cabin.\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  select(Ticket) %>% \n",
        "  flatten_chr() %>% \n",
        "  head(n = 10L)\n",
        "```\n",
        "\n",
        "Some tickets are only comprised of digits whereas some tickets are a combination\n",
        "of digits and letters.\n",
        "Maybe this is informative of something more.\n",
        "\n",
        "```{r}\n",
        "not_na <- compose(`!`, is.na)\n",
        "full <- full %>% \n",
        "  mutate(Ticket = if_else(\n",
        "    Ticket %>% extract_letter() %>% not_na(),\n",
        "    true = \"Alphanumeric\",\n",
        "    false = \"Numeric\"\n",
        "  ))\n",
        "```\n",
        "\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  ggplot(aes(x = CabinD, fill = Ticket)) +\n",
        "  geom_bar(position = \"fill\")\n",
        "```\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  ggplot(aes(x = Pclass, fill = Ticket)) +\n",
        "  geom_bar(position = \"fill\")\n",
        "```\n",
        "\n",
        "There does not seem to be an obvious association between what's printed on \n",
        "the ticket and in which cabin category or passenger class a person traveled.\n",
        "Perhaps though, there is an underlying pattern so let's keep the recoded\n",
        "'Ticket' variable.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Fare adjustment\n",
        "```{r}\n",
        "# Look at Tukey's five nubmer summary of the ticket prices.\n",
        "full %>% \n",
        "  select(Fare) %>% \n",
        "  flatten_dbl() %>% \n",
        "  fivenum()\n",
        "```\n",
        "\n",
        "This looks as if some people were free-riding the Titanic.\n",
        "Perhaps, some guests were invited to ride along with other passengers.\n",
        "The largest ticket price is `r train_dat %>% select(Fare) %>% flatten_dbl() %>% max()`.\n",
        "This looks plausible.\n",
        "The most expensive cabins, given that there were probably very few extremely\n",
        "luxurious suites.\n",
        "Next, let's check the distribution of ticket fares:\n",
        "\n",
        "```{r}\n",
        "full %>% \n",
        "  ggplot(aes(x = Fare)) +\n",
        "  geom_histogram()\n",
        "```\n",
        "\n",
        "This looks like a power distribution, indicating that the majority of passengers \n",
        "paid a (relatively) small amount of money for tickets, whereas a few passengers \n",
        "paid a rather large sum.\n",
        "Apply a BoxCox transformation to the `Fare` variable to normalize the \n",
        "distribution.\n",
        "\n",
        "```{r}\n",
        "transform_boxcox <- function(x) {\n",
        "  x %>% \n",
        "    BoxCoxTrans() %>% \n",
        "    predict(., x)\n",
        "}\n",
        "\n",
        "# Prior to the BoxCox-transformation, ensure that all values are striclty \n",
        "# positive.\n",
        "full <- full %>% \n",
        "  mutate(Pos_Fare = if_else(\n",
        "    Fare <= 0 | is.na(Fare),\n",
        "    true = 1,\n",
        "    false = Fare\n",
        "  )) %>% \n",
        "  mutate(BoxCoxFare = transform_boxcox(Pos_Fare))\n",
        "\n",
        "full %>% \n",
        "  ggplot(aes(x = BoxCoxFare)) +\n",
        "  geom_density() +\n",
        "  ylab(\"Density\")\n",
        "```\n",
        "\n",
        "This looks a bit better and will (hopefully) suffice for modeling.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Develop a treatment plan\n",
        "For our predictions, we need to ensure that our predictors do not contain \n",
        "missing values.\n",
        "Hence, we need to impute them in a meaningful way.\n",
        "\n",
        "```{r}\n",
        "# Compute the average level of missing data for each predictor.\n",
        "compute_na_fraction <- compose(mean, is.na)\n",
        "full %>% \n",
        "  select(one_of(c(\n",
        "    \"Pclass\", \"BoxCoxFare\", \"Title\", \"Age\", \"FamSizeD\", \"CabinD\", \"Ticket\"\n",
        "  ))) %>% \n",
        "  summarize_all(.funs = funs(compute_na_fraction))\n",
        "```\n",
        "\n",
        "We have a very large number of missing values in the predictor `Age`, which \n",
        "might be informative for survival because i) children might have had priority\n",
        "for lifeboat spots and ii) older people could be more frail/less agile.\n",
        "escaping their rooms and to search for a lifeboat.\n",
        "Hence, we should try to impute this variable, but also add a new variable, which\n",
        "indicates which values were imputed so that this information is also available\n",
        "to the prediction model.\n",
        "\n",
        "```{r}\n",
        "# Add a new variable `AgeIsBad`, which indicates whether, for a particular \n",
        "# passenger, the `Age` variable is uninformative (\"yes\") or informative \"no\").\n",
        "full <- full %>% \n",
        "  mutate(AgeIsBad = if_else(\n",
        "    is.na(Age),\n",
        "    true = \"yes\",\n",
        "    false = \"no\"\n",
        "  )) %>% \n",
        "  mutate(AgeIsBad = AgeIsBad %>% as.factor())\n",
        "\n",
        "var_names <- c(\n",
        "  \"Pclass\", \"BoxCoxFare\", \"Title\", \"Age\", \"Sex\", \"FamSizeD\", \"CabinD\", \n",
        "  \"Ticket\", \"AgeIsBad\"\n",
        ")\n",
        "\n",
        "# Impute the missing age values using Bayesian linear regression \n",
        "# (method = \"norm\") and 100 rounds of multiple imputations.\n",
        "mice_age <- full %>% \n",
        "  select(one_of(var_names)) %>% \n",
        "  mice(., method = \"norm\", m = 100, print = FALSE) %>% \n",
        "  mice::complete() %>% \n",
        "  select(Age) %>% \n",
        "  flatten_dbl()\n",
        "\n",
        "# Convert these variables to factors.\n",
        "factor_vars <- c(\n",
        "  \"Survived\", \"Pclass\", \"Ticket\", \"FamSizeD\", \"CabinD\"\n",
        ")\n",
        "\n",
        "# Chained function for save conversion from any format to factors.\n",
        "convert_to_factor <- compose(as.factor, as.character)\n",
        "\n",
        "# Add the imputed ages to the data frame.\n",
        "full <- full %>% \n",
        "  mutate(Imputed_Age = mice_age) %>% \n",
        "  mutate_at(.vars = factor_vars, .funs = convert_to_factor)\n",
        "\n",
        "# Check whether the imputation of the `Age` variable produced sensible results.\n",
        "full %>%\n",
        "  select(Age, Imputed_Age, PassengerId) %>% \n",
        "  gather(key = State, value = Age, -PassengerId) %>% \n",
        "  mutate(State = State %>% as.factor()) %>% \n",
        "  mutate(State = fct_recode(State,\n",
        "    Original = \"Age\",\n",
        "    Imputed = \"Imputed_Age\"\n",
        "    )) %>% \n",
        "  ggplot(aes(x = Age)) +\n",
        "  geom_histogram() +\n",
        "  facet_wrap(~ State)\n",
        "```\n",
        "\n",
        "It looks as if the \"mice\" function did a good job on the imputation of missing \n",
        "\"Age\" values when comparing the distribution of the \"Imputed\" values with the \n",
        "distribution of the \"Original\" values.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Final fixes\n",
        "Prior to modeling the data, we need to convert any factors, that are encoded\n",
        "by digits, to strings.\n",
        "Moreover, scale and center the `Imputed_Age` variable.\n",
        "```{r}\n",
        "full <- full %>% \n",
        "  mutate(\n",
        "    Survived = fct_recode(\n",
        "      Survived,\n",
        "      yes = \"1\",\n",
        "      no = \"0\"\n",
        "    ),\n",
        "    Pclass = fct_recode(\n",
        "      Pclass,\n",
        "      First = \"1\",\n",
        "      Second = \"2\",\n",
        "      Third = \"3\"\n",
        "    ),\n",
        "    Imputed_Age = scale(Imputed_Age, center = TRUE, scale = TRUE),\n",
        "    Survived = Survived %>% factor(., levels = c(\"yes\", \"no\"))\n",
        "  )\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Cross-validation\n",
        "Next in line is cross-validation on the training set to minimize differences in\n",
        "model performance between training and test sets.\n",
        "First, we'll recover the training set data:\n",
        "```{r}\n",
        "# Use only the following variables in the prediction models.\n",
        "pred_vars <- c(\n",
        "  \"Survived\", \"Pclass\", \"Imputed_Age\", \"Ticket\", \"Title\", \"FamSizeD\", \"CabinD\",\n",
        "  \"BoxCoxFare\", \"AgeIsBad\"\n",
        ")\n",
        "# Extract the training data after the previous feature engineering.\n",
        "eng_train <- full %>%\n",
        "  filter(Data_Set == \"Training\") %>% \n",
        "  select(one_of(pred_vars))\n",
        "```\n",
        "\n",
        "\n",
        "## Logistic regression\n",
        "```{r Logistic_Regression, cache = TRUE}\n",
        "# Next, we'll create balanced splits of the data based on the outcome.\n",
        "train_control <- trainControl(\n",
        "  method = \"repeatedcv\",\n",
        "  number = 10,\n",
        "  repeats = 5,\n",
        "  classProbs = TRUE,\n",
        "  sampling = \"smote\",\n",
        "  summaryFunction = twoClassSummary\n",
        ")\n",
        "\n",
        "set.seed(340934)\n",
        "log_res <- train(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  method = \"glm\",\n",
        "  metric = \"ROC\",\n",
        "  trControl = train_control,\n",
        "  trace = FALSE\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Support Vector Machines\n",
        "```{r SVM, cache = TRUE}\n",
        "# Hyper parameter estimation for the Gaussian Radial Basis Kernel\n",
        "# Note that 'frac' denotes the fraction of data to be used for estimation.\n",
        "# Here, we set it to a value of '1' because were are working on the training\n",
        "set.seed(340934)\n",
        "sig_dist <- sigest(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  frac = 1\n",
        ")\n",
        "svm_tune_grid <- data.frame(\n",
        "  sigma = as.vector(sig_dist)[1],\n",
        "  C = 2^(-2:7)\n",
        ")\n",
        "\n",
        "set.seed(340934)\n",
        "svm_res <- train(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  method = \"svmRadial\",\n",
        "  tuneGrid = svm_tune_grid,\n",
        "  metric = \"ROC\",\n",
        "  trControl = train_control,\n",
        "  trace = FALSE\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Nearest Shrunken Centroids\n",
        "```{r NSC, cache=TRUE}\n",
        "nsc_grid <- data.frame(.threshold = seq(from = 0, to = 25, by = 1))\n",
        "set.seed(340934)\n",
        "nsc_res <- train(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  method = \"pam\",\n",
        "  tuneGrid = nsc_grid,\n",
        "  metric = \"ROC\",\n",
        "  trControl = train_control\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Neural Networks\n",
        "```{r NN, cache = TRUE}\n",
        "nnet_grid <- expand.grid(\n",
        "  .size = seq_len(10),\n",
        "  .decay = c(0, 0.1, 1, 2)\n",
        ")\n",
        "max_size <- max(nnet_grid$.size)\n",
        "num_wts <- 1 * (max_size * (nrow(eng_train) + 1) + max_size + 1)\n",
        "set.seed(340934)\n",
        "nnet_res <- train(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  method = \"nnet\",\n",
        "  metric = \"ROC\",\n",
        "  tuneGrid = nnet_grid,\n",
        "  maxit = 2000,\n",
        "  MaxNWts = num_wts,\n",
        "  trControl = train_control,\n",
        "  trace = FALSE\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## K-Nearest Neighbors\n",
        "```{r KNN, cache = TRUE}\n",
        "knn_grid <- data.frame(\n",
        "  .k = c(4 * (0:5) + 1,\n",
        "         20 * (1:5) + 1,\n",
        "         50 * (2:9) + 1)\n",
        ")\n",
        "set.seed(340934)\n",
        "knn_res <- train(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  method = \"knn\",\n",
        "  metric = \"ROC\",\n",
        "  tuneGrid = knn_grid,\n",
        "  trControl = train_control\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Extreme Gradient Boosting\n",
        "```{r XGBoost, cache = TRUE}\n",
        "# Set up the cross-validated hyper-parameter search\n",
        "# grid parameters taken from http://stats.stackexchange.com/a/263649\n",
        "xgb_grid <- expand.grid(\n",
        "  nrounds = 1e3,\n",
        "  eta = 0.05,\n",
        "  max_depth = c(2L, 10L),\n",
        "  gamma = c(0, 10),\n",
        "  colsample_bytree = c(0.1, 0.4),\n",
        "  min_child_weight = c(1L, 10L),\n",
        "  subsample = c(0.5, 1)\n",
        ")\n",
        "set.seed(340934)\n",
        "xgb_res <- train(\n",
        "  Survived ~ .,\n",
        "  data = eng_train,\n",
        "  method = \"xgbTree\",\n",
        "  metric = \"ROC\",\n",
        "  tuneGrid = xgb_grid,\n",
        "  trControl = train_control,\n",
        "  trace = FALSE\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "# Model comparisons\n",
        "```{r Model_Comparison, cache = TRUE}\n",
        "resampled_res <- list(\n",
        "  Logistic = log_res,\n",
        "  SVM = svm_res,\n",
        "  NSC = nsc_res,\n",
        "  NeuralNet = nnet_res,\n",
        "  KNN = knn_res,\n",
        "  XGBoost = xgb_res\n",
        ") %>% \n",
        "  resamples() %>% \n",
        "  .[[\"values\"]] %>% \n",
        "  as_data_frame()\n",
        "\n",
        "# Function for transforming untidy model output from caret's train() and\n",
        "# resamples() functions into the tidy long format.\n",
        "tidy_predictions <- function(x) {\n",
        "  # Extract model names\n",
        "  algos <- x %>% \n",
        "    select(-matches(\"Resample\")) %>% \n",
        "    colnames() %>% \n",
        "    str_extract(pattern = \"[^~]+\") %>% \n",
        "    unique()\n",
        "  \n",
        "  # Function to transform results for a single algorithm from wide to long\n",
        "  # format.\n",
        "  tidy_single_model <- function(algo, x) {\n",
        "    algo_resample <- paste(algo, \"Resample\", sep = \"|\")\n",
        "    x %>% \n",
        "      select(matches(algo_resample)) %>% \n",
        "      setNames(gsub(\n",
        "        pattern = \"[[:word:]]+~\",\n",
        "        replacement = \"\",\n",
        "        perl = TRUE,\n",
        "        x = names(.)\n",
        "      )) %>% \n",
        "      gather(key = Statistic, value = Value, -Resample) %>% \n",
        "      mutate(Algorithm = algo)\n",
        "  }\n",
        "  \n",
        "  # Transform results from each algorithm from wide to long format and \n",
        "  # aggregate all model outputs in a single data frame.\n",
        "  algos %>% \n",
        "    as.list() %>% \n",
        "    map(., .f = tidy_single_model, x = x) %>% \n",
        "    bind_rows()\n",
        "}\n",
        "\n",
        "\n",
        "resampled_res %>% \n",
        "  tidy_predictions() %>% \n",
        "  mutate(\n",
        "    Algorithm = Algorithm %>% as.factor()\n",
        "  ) %>% \n",
        "  ggplot(aes(\n",
        "    x = fct_reorder(f = Algorithm, x = Value, fun = median),\n",
        "    fill = Algorithm, y = Value\n",
        "  )) +\n",
        "  geom_boxplot() +\n",
        "  facet_wrap(~ Statistic, scales = \"free_y\") +\n",
        "  theme(\n",
        "    axis.text.x = element_text(angle = 45, hjust = 1),\n",
        "    axis.title.x = element_blank(),\n",
        "    legend.position = \"top\"\n",
        "  )\n",
        "```\n",
        "\n",
        "We can see that extreme gradient boosting \"XGBoost\" is the clear winner in \n",
        "terms of predicting the chance of survival.\n",
        "\n",
        "What is the importance of the variables that we provided to the extreme \n",
        "gradient boosting algorithm?\n",
        "```{r}\n",
        "xgb_res %>% \n",
        "  varImp(scale = TRUE) %>% \n",
        "  .[[\"importance\"]]\n",
        "```\n",
        "\n",
        "If your title was \"Mr\" you had a particular high chance **not** to survive the \n",
        "sinking of the Titanic.\n",
        "The same is true for passengers without a known cabin.\n",
        "Females and passengers from the upper levels (cabins E, D and C) had a high chance\n",
        "of survival and most children made it.\n",
        "\n",
        "\n",
        "\n",
        "# Prediction\n",
        "Now, we will apply this algorithm to the test data.\n",
        "```{r}\n",
        "# Extract the test set after featuer engineering.\n",
        "eng_test <- full %>% \n",
        "  filter(Data_Set == \"Test\") %>% \n",
        "  select(one_of(c(pred_vars, \"PassengerId\")))\n",
        "\n",
        "# Predict using the test set.\n",
        "# Convert factors back to integer for compliance with the original data.\n",
        "#prediction <- \n",
        "prediction <- predict(object = xgb_res, eng_test) %>% \n",
        "  fct_recode(., \"0\" = \"no\", \"1\" = \"yes\") %>% \n",
        "  as.character() %>% \n",
        "  as.integer()\n",
        "\n",
        "# Save the solution to a data frame with two columns: PassengerId and Survived.\n",
        "solution <- data.frame(\n",
        "  PassengerId = eng_test %>% select(PassengerId) %>% flatten_int(),\n",
        "  Survived = prediction\n",
        ")\n",
        "\n",
        "# Write the solution to a file.\n",
        "write_csv(solution, path = \"titanic_xgb_mod_solution.csv\")\n",
        "```\n",
        "\n",
        "\n",
        "# Acknowledgments\n",
        "Many thanks to [Megan L. Risdal](https://www.kaggle.com/mrisdal) for inspiring \n",
        "a couple of aspects in this analysis, particularly with respect to missing \n",
        "value imputation using the `mice` package.\n",
        "You should definitely check out her very popular [kernel](https://www.kaggle.com/mrisdal/titanic/exploring-survival-on-the-titanic/notebook)."
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}