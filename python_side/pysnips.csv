snippets
"df.loc[df.index,['TitleCat','Title','Sex','SibSpCat','ParchCat']]"
"df['Title'].isin(['Col','Don','Dr','Rev','Sir','Jonkheer','Major']),"
"df.sort_values(by='Parch').describe(percentiles=[0.75,0.8])"
df['isAlone']
"df.describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0])"
"df.drop(outliers_list,inplace=True)"
"df[(df.Pclass==3)&(df.Embarked=='S')&(df.SibSp==0)&(df.Parch==
0)&(df.Sex=='male')&(df.Age>50.0)]"
"df.iloc[(women_died_ids),:]"
+0.3*df['Survived']
"df.drop(columns=['Name'],inplace=True)"
"df[-1],"
df['Title']=='Jonkheer'
"df[['PassengerId','Survived']].head(500)"
"df['Sex'],"
"df.drop(['Class_3'],axis=1,inplace=True)"
"df.sort_values(['importance'],ascending=False)"
"df.loc[Outliers_to_drop,num_features]"
df['SurnameMembers_Simple']==0
"df.drop('FareCategorical',1,inplace=True)"
df['PassengerId'].describe()
"df.sort_values('LRCoef',ascending=False,inplace=True)"
"df.drop(['Fare'],axis=1,inplace=True)"
"df[['SibSp','Parch','isalone','Age','ischild']].head(10)"
df['Cabin'].head(5)
df.loc[[0]]
df['PassengerId']
"df.drop('Sex_nan',axis=1,inplace=True)"
df['female']
df[df.Sex.isnull()]
"df.drop(labels=['Cabin'],axis=1,inplace=True)"
df.FamilySizeGroup.describe()
df['Title'].head()
df.loc['a']
"df.drop(['Cabin'],1,inplace=True)"
df.head(1)
df.title.head()
"df.drop(['Age','SibSp','Parch','Deck_Missing'],axis=1,inplace=True)"
df.head
"df.loc[df['Age']>64,'Age']"
"df.iloc[(boys_survived_ids),:]"
df[df['Embarked'].isnull()==True]
"df.drop(['Cabin','Name','Fare'],axis=1,inplace=True)"
"df[['Age','TicketFare']].describe()"
df[df['Age']<2]
"df.loc[index,'linear_reg'],"
"df.sort_values(by=['importance'],ascending=True,inplace=True)"
df.shape[0]
"df[['Age','Fare']].describe()"
"df.drop(labels=['Ticket','Cabin','Embarked'],axis=1,inplace=True)"
x_test.loc[x_test['Fare'].isnull()]['Pclass']
"df.sort_values(['PassengerId'],inplace=True)"
"df.drop(drop_cols,inplace=True,axis=1)"
df[df['Fare'].isnull()]
data.loc[data['Title'].isin(['theCountess'])]['Age']
"df.iloc[0,0]"
df[df['Surname']=='Crosby']
df.loc[(df.Age<16)&(df.Parch==0)]
df[df.Embarked.isnull()==True]
"df.drop([variable],axis=1,inplace=True)"
"df.drop('family_size',inplace=True,axis=1)"
"df.loc[df['age'],['age','Survived']]"
df[df['IsAlone']==True].sort_values(['Age']).head()
"df.drop(['Name','SibSp','Parch','Ticket','Cabin','Fare'],axis=1,
inplace=True)"
"df.drop('FamilyCategory',axis=1,inplace=True)"
"df.drop(['FamilySize'],axis=1,inplace=True)"
"df.drop(labels=['Ticket_group'],inplace=True,axis=1)"
"df.drop(labels=['Cabin','Ticket'],axis=1,inplace=True)"
"df.drop(['Survived','PassengerId','Ticket'],axis=1,inplace=True)"
df.drop(columns=train_bfe.columns[index_deleted]).head(3)
"df.drop(list_category_features,axis=1,inplace=True)"
df[df.isnull(df['Embarked'])]
"df.iloc[0:3,([1,3,6])]"
"df.drop(['Pclass','Embarked','Sex','Name','Ticket','Title'],axis=1,
inplace=True)"
"df[['Sex','Survived']]"
df[df.surname=='Brown']
df.loc[df['Age']>64]
df['norm_fare'].describe()
df[:2]
"df[df[f]],"
"df.sort_values('val_score',ascending=False,inplace=True)"
df[df['Age'].notnull()].head()
"df.sort_values('PassengerId',inplace=True)"
df.loc[df['Age'].isnull()]
pd.read_csv('../input/train.csv').head()
"df.iloc[:,0:3]"
"df.drop(['Name','Ticket','PassengerId'],axis=1,inplace=True)"
df['Fare'].describe()
"df.drop('Age_Band',axis=1,inplace=True)"
"df[(df.Pclass==3)&(df.Sex=='male')&(df.Age>45)&(df.Embarked=='S')
]"
"[df.drop(columns=['Ticket'],inplace=True)fordfin[titanic_df,test_df]]"
"df.drop('Age',axis=1)"
"df.drop(['SibSp','ParchBinary','Parch','MasterMiss','FamilySize',
'SmallFamily','S','C','Fc','Alone'],axis=1,inplace=True)"
"df.drop('Sex_male',axis=1,inplace=True)"
"df.drop(['Embarked'],axis=1,inplace=True)"
df['ValidationScore']
df['passengerid'].shape
"df.loc[df.Fare.isnull()&(df.Pclass==3),'Fare']"
"df.drop(['Ticket','FamilySize','TicketSize','PassengerId'],axis=1,
inplace=True)"
"df[df.family_size_level==1].shape,df[df.title_level==3].shape,df[df.
age_level==3].shape"
df[df['Ticket']=='1601']
df[df.TPP==4]
"df.drop('Sex_female',axis=1,inplace=True)"
"df.drop('Sex',inplace=True,axis=1)"
df[df.Title.isnull()]
df.PassengerId.shape
"df[['Age','AgeGroup']].head()"
"df.drop('index',inplace=True,axis=1)"
"df.drop(labels=['Parch','SibSp','Fsize'],axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Sex','SibSp','Parch','Ticket','Cabin',
'Embarked','Alone','person','Pclass','WithoutFamily','male',
'class_3'],axis=1,inplace=True)"
df.loc[out2]
"df.drop(['Sex','Embarked','Name','Ticket','Pclass','Cabin'],axis=1,
inplace=True)"
df[df['Title']=='Ms']
"df.loc[df['Age'].isnull(),'Age']"
"df.drop(['Sex'],inplace=True,axis=1)"
"df.drop(labels=['Cabin1'],axis=1,inplace=True)"
df[df['Age']==-1].shape
"df.drop('Surname',axis=1,inplace=True,errors='ignore')"
"df.drop(cat,axis=1,inplace=True)"
df.iloc[3]
"df['Survived'],"
df[(df.SibSp==0)&(df.Parch==0)&(df.Sex=='female')].head()
"df.drop(labels=['SibSp','Parch','Ticket','Fare','Age','PassengerId',
'Cabin'],axis=1,inplace=True)"
"df.drop(['Name','Embarked','Pclass','Ticket'],axis=1,inplace=True)"
"df[['Age','Fare']]"
"df.drop('Name',axis=1,inplace=True,errors='ignore')"
df.loc[df.Title=='the']
df[df.Fare!=512.3292]
"df[data.Ticket=='364498'][['Ticket','Name','Age','Parch','SibSp']]"
df.head(14)
"df.drop(['Age','Fare','Name','SibSp','Parch'],axis=1,inplace=True)"
"df[df['Age'].isnull()][['Age','Pclass','age_fill','Name','Sex',
'gender_num']].head(10)"
"df[['Age','Survived','Embarked']][0:15]"
"df.sort_values(by='EntityEmbeddingScore',ascending=False)"
"df.drop(columns=['SibSp','Parch'],axis=1,inplace=True)"
df.Name.head(5)
df['Name'].describe()
"df.drop('Title',axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Ticket','Cabin','Embarked'],axis=1,
inplace=True)"
df.loc['Golf']
df.iloc[[0]]
"df.drop(columns=['Ticket'],inplace=True)"
"df.iloc[3:5,:]"
"test_df.sort_values('Y_scores',ascending=True)[:5]"
df[titanic_df['Pclass']==2]['Age'].describe()
"df.drop(columns=['Name','Cabin','Ticket'],inplace=True)"
data.head()['Embarked']
df[df['Embarked']=='S'].shape[1]
"df.drop(['Cabin','Ticket','Name','SibSp','Parch','PassengerId'],axis=
1,inplace=True)"
df[df['is_estimated_Age']==True]
"df.drop(['PassengerId','Name','Cabin','Embarked','Ticket','Fare'],
axis=1,inplace=True)"
"assertdf.shape==(1,df.shape[1])"
"df.drop(['Name','Ticket','Cabin','PassengerId','Embarked'],axis=1,
inplace=True)"
"df.iloc[[0,1,3,9]]"
df[df.Survived==0].Age.head()
"df.drop(['Sex','SibSp','Parch'],axis=1,inplace=True)"
df.loc[df.Age>70]
df['Survived'].head()
"df.drop(index=df.loc[df['Embarked'].isnull()].index,inplace=True)"
"df.sort_values(by='Age').describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,
0.7,0.8,0.9,0.99])"
df.head(n=5)
df[df.Cabin=='C'].head()
df.loc[152]
"df.drop(['Female'],axis=1,inplace=True)"
df.describe(exclude='number')
"df.sort_values(by='Accuracy',ascending=False)"
df.loc['Store1']
"df.drop(labels='Name',axis='columns',inplace=True)"
"df.drop(['NameLen'],axis=1,inplace=True)"
df.describe(include='O')
"df.drop(['Name','Ticket','Cabin','SibSp','Parch','FirstName'],axis=1,
inplace=True)"
df[df['Deck']=='F']
"df.drop(['PassengerId','Ticket','Fare','Cabin'],axis=1,inplace=True)"
"df.drop(labels=['PassengerId','IsTrain'],axis=1,inplace=True)"
train_data.head()['Embarked']
"df['Age']>15,"
df[df.Ticket=='CA.2343']
"df['X_test'],"
"df.drop(labels=['PassengerId','Sex','Name','Title','Embarked'],axis=1,
inplace=True)"
"df.drop(['PersonClass'],axis=1,inplace=True)"
"df.drop(['SibSp','Parch','Family'],1,inplace=True)"
"df.loc[(df['Parch']>4)&(df['Parch']>4),'Parch']"
df[df.isnull(df.Fare)]
df[df['isOutlier']==-1]
"df.shape[0],"
"df.drop(['PassengerId','Name','Ticket','Embarked'],axis=1,inplace=True)"
"df.drop(columns=['Name','Ticket'],axis=1,inplace=True)"
"df.drop(['Age','Cabin'],axis=1,inplace=True)"
df.train.head()
"[df.drop(columns=['Ticket'],inplace=True)fordfin[train,validation]]"
df.loc[df.index.values]
"df.drop(columns=['Ticket','Cabin','Name'],inplace=True)"
"df.loc[df['Age'].notnull(),['Sex','Pclass','Age']]"
"df[['EmbarkedFill','Port']].head(10)"
"df.drop(['Alone'],axis=1,inplace=True)"
"df.drop(droppings,1,inplace=True)"
"df.drop(['PassengerId','Ticket'],axis=1,inplace=True)"
"df.drop(columns='Fare',inplace=True)"
df[df.TicketButLast=='310129']
df.Cabin.head(5)
"df[df.TwoLetters.isin(['ic','ff'])&(df.Sex=='female')]"
"df[submission.Ticket_numerical_temp.isnull()][['Ticket_numerical',
'Ticket_numerical_temp']]"
"df.sort_values(by=['val_score','std_test_score'],ascending=[False,True],
inplace=True)"
"df[[df.Embarked,'Embarked_C','Embarked_Q','Embarked_S']].head()"
df['FamilySize'].describe()
df[df['Foreign']].head(10)
df[df.isnull(titanic['Embarked'])]
df.iloc[ix]
"df.drop(['Title'],axis=1,inplace=True)"
"df.drop('Pclass_3',axis=1,inplace=True)"
"df.drop(['Name','Cabin','Ticket','Name','Parch','SibSp','Embarked',
'Pclass'],axis=1,inplace=True)"
"df.drop(['Age_age'],axis=1,inplace=True)"
df[missing_embarked]
"df.drop(0,axis=1,inplace=True)"
df[numerical_data].describe()
"df.drop('AgeGroup',axis=1,inplace=True)"
"df.shape,df.shape,df.columns.values"
"df.drop(['SibSp','Parch','Familysize'],axis=1,inplace=True)"
df[df.Emb.isnull()]
df[:50]
"df.drop('Ticket_'+extra,inplace=True,axis=1)"
"df.sort_values(by=['Model_Mean'],ascending=False)"
"df.drop(['Sex','Age'],axis=1,inplace=True)"
"df.sort_values('CVS_Mean',ascending=False,na_position='last',inplace=True)"
"df.sort_values('Accuracy',ascending=False)"
df[titanic_df['Pclass']==3]['Age'].describe()
df[features].head()
"df[row,col]"
"df.drop(['Cabin','Ticket','Name'],axis=1,inplace=True)"
"df.sort_values(ascending=False,by='importance')"
"df.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range',
'PassengerId'],axis=1,inplace=True)"
"df['importance_normalized'].head(15),"
df.loc[1043]
df[full.Title=='Master']['Age'].describe()
"df.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)"
"df.drop('Fareband',axis=1,inplace=True)"
"df['filled_ages'],df['Age']"
"df.drop([0.42,0.67,0.83,0.92],inplace=True)"
"df['Age'][df['Survived']==1],"
df[df['Title'].isnull()]
df.head(6)
"df.drop(['Sex','Embarked','Name','SibSp','Parch','FamilySize'],axis=1,
inplace=True)"
df[df['Fare']>70.0]
"df.drop(['Embarked_S','title_rare'],inplace=True,axis=1)"
"df.drop(['Age','Age_cat_2'],axis=1,inplace=True)"
"df.sort_values(by=['TestAccuracy'],ascending=False,inplace=True)"
"df.loc[:,(['Age*Class','Age','Pclass'])].head(10)"
df.drop(columns=test_bfe.columns[index_deleted]).head(3)
df['Fare']>=275
df['Fam']
df[df['Ticket']=='113572']
df.drop('Store1')
"df[(df['Cabin']=='T')|(df['Cabin']=='B51B53B55')|(df['Cabin']==
'FE69')|(df['Cabin']=='FG73')]"
df[df.Ticket=='3101295']
"df.drop(['Ticket','Cabin','Name','Embarked'],axis=1,inplace=True)"
"df[['Embarked','Embarked_C','Embarked_S','Embarked_Q']].head()"
"df.describe().T.sort_values(by='50%',axis=0,ascending=False)"
df.head(40)
"df.drop(['Cabin','Cabin_number'],inplace=True,axis=1)"
"df.drop(['Embarked','Cabin','Pclass','Embarked','Title'],inplace=True,
axis=1)"
"df.drop('embarked_Q',axis=1,inplace=True)"
"df.drop('Survived',axis=1).head()"
df[combine['Embarked']=='C'][['Name']].head(10)
df[9:12]['Name']
df.shape[:]
df.drop
"df.iloc[(0),3:6]"
df[df['Age']>=80]
"df.sort_values(by='Survived').describe(percentiles=[0.61,0.62,0.63])"
df.iloc[1043]
"df.drop(labels=['PassengerId','Name','Embarked'],axis=1,inplace=True)"
"df[['Name','Age']]"
"df.drop(['Age'],axis=1,inplace=True)"
"df.drop(labels=['AgeBin','FamilySize','FareBin'],axis=1,inplace=True)"
"df.drop(['Name','Ticket','Embarked','Cabin'],axis=1,inplace=True)"
"df.drop('Cabin',axis=1,inplace=True,errors='ignore')"
"df.iloc[:,12:17]"
"df.drop(['Embarked','Sex'],axis=1,inplace=True)"
df['AverageFareperPerson'].head()
"df.drop(['PassengerId','Name','Ticket','Cabin','title','title_age'],
axis=1,inplace=True)"
"df[['Pclass','Sex','Cabin']][0:3]"
"df.drop(['Parch','SibSp','FamilySize'],axis=1,inplace=True)"
df['Ticket_Lett']
df.sort_values(ascending=False)
"df.drop(labels=['Name','Title'],axis=1,inplace=True)"
"df['Pclass'],"
"df.drop(['PassengerId','Name','Ticket','Cabin','Age_bin','Fare_bin'],
axis=1,inplace=True)"
"df.drop(['FareBand'],axis=1,inplace=True)"
"df.iloc[:2,]"
"df.iloc[0:10,:]"
df[combine['Embarked'].isnull()][['Name']]
"df.loc[:,(['Acceleration','Aggression','Agility','Balance',
'Ballcontrol'])]"
"df.drop(['Embarked','Age','Sex','Name','Fare'],axis=1,inplace=True)"
"df.drop(labels='Name',inplace=True,axis=1)"
df['age_quantile'].describe()
"df.drop('AgeCategorical',1,inplace=True)"
"df.drop(['Name','Cabin','Embarked','Ticket','Fare'],axis=1,inplace=True)"
"df.drop(['Age_Cat'],axis=1,inplace=True)"
"df.head(10)[['Fare','bin_fare','Age','bin_age']]"
"df.drop(['PassengerId','Name','Ticket','Fare','Cabin'],axis=1,inplace
=True)"
"df.drop(['Ticket','Name'],inplace=True,axis=1)"
"[df.drop(columns=['Cabin','SibSp','Parch'],inplace=True)fordfin[
train,validation]]"
df['ticket_number'].head(10)
df[df.Pclass.isnull()]
df.query('Fare>300')
"df[['Age','Age_bin']].head(20)"
"df.drop(['Age','Fare'],axis=1,inplace=True)"
"df.drop(columns=['PassengerId','Ticket','Cabin','Name'],inplace=True)"
"df.loc[index,'Title']inmale_title"
"df[df['Age']>60][['Sex','Pclass','Age','Survived']]"
df['Age_bin'].head()
"df.drop(['Group_Ticket'],axis=1,inplace=True)"
df[df['FamilySize']<df['TicketSize']].sort_values('Ticket').head(9)
train[train.Cabin.notnull()]['Cabin'][:10]
df[(df.Age<1.0)&(df.Survived==1)]
"df.sort_values(by=['name_count','name_last','pclass','embarked','age',
'group_id'],ascending=False,inplace=True)"
data.loc[data['Title'].isin(['Lady'])]['Age']
"df[['Name','Master']].head(10)"
df.loc[(df.Pclass==3)&(df['Fare']>30)]
"df.drop(columns=['Age','Name','Ticket','Cabin'],inplace=True)"
df.describe
df['MJBahmani']
df[roc_values<=0.5]
"df.drop(['Age','Fare'],inplace=True,axis=1)"
df['logistic_regression_second_level']
df[df.Ticket=='1601']
df['Name_title_Miss']==1.0
df.shape()
df[(df['Pclass']==1)&(df['Fare']>70)&(df['Fare']<90)]
"df.drop(labels=['Age'],axis=1,inplace=True)"
df.loc[df['Cabin_letter']=='T']
"df.drop('FamilySize',axis=1,inplace=True)"
"df.drop(axis=1,inplace=True,columns='cabin')"
test.loc[test['Pclass']==3]['Deck'].describe()
df[where_age_is_null].head()
"df.drop('PassengerId',inplace=True,axis=1)"
"df.sort_values('ImpVal',inplace=True,ascending=False)"
"df.drop(['Survived','Name','Ticket','PassengerId'],inplace=True,axis=1)"
"df.drop(['Cabin'],inplace=True,axis=1)"
"df[[df.Pclass,'Pclass_1','Pclass_2','Pclass_3']].head()"
df['test_score']
df[df.Fare>300]
df.loc[Outliers_to_drop]
"df.drop(['TicketGroupSize','s_with_tgs','s_wo_tgs'],axis=1,inplace=True)"
"df.loc[df['Pclass']==3,'Fare'].describe()"
df.shape(X_scale_test)
"df.loc[df['PassengerId'].isin(raw_train_df[raw_train_df['Age'].isnull()][
'PassengerId'])]"
"df.loc[[0,2]]"
df['title'].head()
"df.drop(col,inplace=True,axis=1)"
"df.sort_values('Correlation',ascending=False)"
"df.drop(['Cabin','Name','Parch','PassengerId','SibSp','Ticket'],axis=
1,inplace=True)"
"df.drop(labels=['Sex','Embarked'],axis='columns',inplace=True)"
"df.loc[(152),:]"
df.head(11)
"df.drop(['Total'],axis=1,inplace=True)"
df[55]
"df.loc[:,(['Sex','Embarked'])].head()"
df[-1]
df['Fare']>30
"df.drop(['Sex'],axis=1,inplace=True)"
df.shape(X_scale_train)
df[3:]
df[df['Age']<1]
df.sort_values(by='Survived').describe()
"df.drop('TravelBuds',axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Ticket','Cabin','Embarked','SibSp',
'Parch'],axis=1,inplace=True)"
"df.drop(labels=['Survived'],axis=1,inplace=True)"
"df.drop('Fare',1,inplace=True)"
"df[['Survived','Sex']]"
"df.sort_values(by='FamilySize',axis=0,inplace=True)"
df.PassengerId.describe()
df[(df.Title=='Dr')&(df.Sex=='female')]
"df[['Age','Age_bin']].head(10)"
"f""""""FemaleSurvivalPercentage:{df.iloc[0,3]}%
"""""""
"df[df['Ticket']=='347082'].drop('logFare',axis=1)"
df.head(15)
df[df['surname']=='Sage']
"df.train[['Name','Title']].head()"
df.notnull()
"df.sort_values(by='DeathPremium',ascending=True)"
df[df['Pclass']==3]['Fare'].describe()
df['Title']
df.drop_duplicates()
"df.drop(['surname_Exclude'],axis=1,inplace=True)"
"df.drop(['PassengerId','SibSp','Name','Ticket','Survived','Parch',
'Cabin','Embarked'],axis=1,inplace=True)"
"df.drop(['Name','Sex','Ticket','Embarked'],axis=1,inplace=True)"
"df.drop(drop_cols,axis=1,inplace=True)"
"df.loc[1:5,(['Name','Age','Sex'])]"
"df[['sibsp','parch','familysize','isalone']].head()"
df[cols]
"df.drop('PassengerId',axis=1,inplace=True,errors='ignore')"
df[df.Embarked.isnull()]
"df.loc[[62,830]]"
df[titanic_df['Pclass']==1]['Age'].describe()
df[df.TwoLetters=='ic']
"df.loc[(df['Embarked'].isnull()),:]"
df[numerical].head()
df[df['Fare']>=250].sort_values('Fare')
"df.drop(['PassengerId','Ticket','Cabin'],1,inplace=True)"
"df.drop(labels=['SibSp','Parch'],axis=1,inplace=True)"
df[(df['Age']>62)&(df['Sex']=='male')]
df[df.surname=='Hoyt']
"df.drop(['Survived'],inplace=True,axis=1)"
"df.drop(columns=['PassengerId'],inplace=True)"
"df.drop(columns=['Cabin'],axis=1,inplace=True)"
df.shape(X)
df['Fare'][q]
"df.drop(columns=['SibSp','Parch'])"
"df.drop(columns={'RGroup','Survived'},inplace=True)"
"df.train[['Ticket','Ticket_density']].head()"
df.sort_values(by='Score')
"df.drop(labels=['Ticket_numerical_temp'],inplace=True,axis=1)"
df.head(13)
"df[df['type']=='aggregation'].head(primitives[primitives['type']==
'aggregation'].shape[0])"
"df['Age'][indices_of_outliers],"
df[:15]
df[passenger]
"df.drop(['Fare_Range'],axis=1,inplace=True)"
"df.drop(['Child'],axis=1,inplace=True)"
"df.drop(to_drop,axis=1,inplace=True)"
"df.drop(index=idx,inplace=True)"
"df[['Fare','Fare_bin']].head(10)"
"df.iloc[(759),:]"
df['Age'].isnull()
df[df[i]]
"df.loc[df['PassengerId'].isin([62,830])]"
"df.sort_values(by='valid_score',ascending=False)"
"df.drop(['Survived_C','Cabin'],axis=1,inplace=True)"
"df.drop(['PassengerId','Pclass','Name','Sex','Age','Fare','Cabin',
'Embarked','Ticket'],axis=1,inplace=True)"
df.head(30)
df.Pclass.head()
"df.drop('Ticket',inplace=True,axis=1)"
"df.loc[df['Age']>65,'Age']"
"df.loc[(df['Deck']=='T'),:]"
df[(df.Age>75.0)&(df.Survived==0)]
"df.drop(['girl1','girl2','3rdGirls','BoyClass'],axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Age','SibSp','Parch','Ticket','Fare',
'Cabin','FamilyCount'],axis=1,inplace=True)"
df['Embarked']
"df.drop(labels='Name',axis=1,inplace=True)"
"df.drop(['Name','TkDup','Ticket'],axis=1,inplace=True)"
"df.drop(columns=['PassengerId','Ticket','Cabin'],inplace=True)"
df['Name']
"df.drop(labels='Survived',axis=1,inplace=True)"
"df.drop(labels='PassengerId',axis=1,inplace=True)"
df.loc[(df['Title']=='Dr')&(df['Sex']=='female')]
"df.loc[(row_null_age),:].head()"
"df.iloc[:10,:]"
"df[0].shape,df[1].shape"
"df.drop(['Name','Title','Ticket','Parch','SibSp','Age','Fare'],axis=
1,inplace=True)"
"df.drop(['Name','SibSp','Parch','Age','Fare','Title'],axis=1,inplace
=True)"
"df.sort_values('RfCoef',ascending=False,inplace=True)"
"df.drop('Class3',axis=1,inplace=True)"
df['NumberofTicketUses'].head()
"df.drop(['Age_group'],inplace=True,axis=1)"
df[:20]
"df.drop(['PassengerId','Ticket','Name','Age','SibSp','Parch','Fare'],
axis=1,inplace=True)"
"df[cond_notnull&cond_f]['Age'],"
"df.drop('Name_title',axis=1,inplace=True)"
df.shape(train)
"df.drop(['Embarked','Title'],axis=1,inplace=True)"
"df.drop(['Name','Ticket','Cabin','Survived'],axis=1,inplace=True)"
"df.drop(['Name','SibSp','Parch','Ticket'],axis=1,inplace=True)"
df[SURV:SURV+11:3]
"df.drop(['Name','PassengerId','Ticket'],axis=1)"
df[:1]
"df.sort_values(by=['Fare'],ascending=False)"
"df.loc[:,(['Gender','Sex'])].head()"
df[df.Age>45]
"df.drop(cols_drop,axis=1,inplace=True)"
df.query('Fare!=Fare')
"df.drop('Pclass',inplace=True,axis=1)"
"df.drop(columns=featureName,inplace=True)"
df['Survived'].shape
df[categorical_columns].describe()
"df.drop(df[df['Embarked'].isnull()].index,inplace=True)"
"df.sort_values(by='Fare',ascending=False)"
df['majority_voting_all_models']
df[(df.Survived==1)&df.Cabin]
df[df.Age<45]
test.head()['Cabin']
df.head(n=10)
df.name.head()
df['Alone']
"df[1]['best_score'],"
"df[train_df['Age'].isnull()][['Gender','Pclass','Age','AgeFill']].head(10)"
"df.drop(['SibSp','Parch','Family'],inplace=True,axis=1)"
"df.drop('Ticket_First',axis=1,inplace=True,errors='ignore')"
df[:7]
"df.sort_values(by=['feature_Temp'],ascending=True,inplace=True)"
df[test_nan_pct>0]
"df.drop('Embarked',axis=1,inplace=True,errors='ignore')"
df[(df.Sex=='female')&(df.Pclass==2)&(df.Survived==1)].head()
"df.drop(['PassengerId','Survived','index'],inplace=True,axis=1)"
df['majority_voting_selected_cols']
df[(df['Age']>8.0)&(df['Age']<=10.0)].sort_values('Age')
df.head(80)
"df.drop(['Pclass','Title','Cabin','Deck','Name','Ticket','Parch',
'SibSp','Embarked','Age_Cat'],axis=1,inplace=True)"
"df.drop(drop_features,axis=1,inplace=True)"
df[idx_nan].drop('Survived').sort_values()
df['Alone']==X.iloc[i]['Alone']
"df.drop(['SibSp','Parch','title','FamilySize'],axis=1,inplace=True)"
df[:5]
df[df['TicketNumber'].isnull()]
"df.drop(['Name','Sex','Age','Embarked','Male','Parch','SibSp',
'ParchBinary','SibSpBinary','Pclass','Class1','Class2','Class3',
'ClassSex','Female','MasterMiss','S','1male','2male','3male',
'Boy'],axis=1,inplace=True)"
"df.drop(titanic.columns[[3,8,10]],axis=1,inplace=True)"
"df.drop(columns=['SibSp','Parch'],inplace=True)"
df[df_results.Survived==0]['PredProba']
"df['Title']==title,"
"df[test_df['Age'].isnull()][['Gender','Pclass','Age','AgeFill']].head(10)"
"df.drop(['SibSp','Parch','Ticket','Embarked','Name','Cabin',
'PassengerId','Fare','Age'],inplace=True,axis=1)"
"df.drop(columns=['Sex','Pclass','Embarked','Name','PassengerId',
'Ticket','Group_Size'],axis=1,inplace=True)"
"df['Title'].isin(['Countess','Lady','Dr','Dona','Mrs','Miss','Mme',
'Mlle']),"
"df.iloc[:,(1)],"
"df.drop(['Name','Fare','Ticket','Cabin'],axis=1).head()"
df.Fare.isnull().sort_values(ascending=False)
df['age'].describe()
"df.loc[22:29,(['PassengerId','Name','Age'])]"
"df.drop(['Name','Cabin','Ticket','Embarked'],axis=1,inplace=True)"
"df.drop(ignore_flds,axis=1,inplace=True)"
df[predictor_columns_hot].head()
"df.sort_values(by=['Feature_Importance'],ascending=False,inplace=True)"
df['Cost']
"df.drop(['Name','Sex','Age','Embarked','Male','Survived','Parch',
'SibSp','ParchBinary','SibSpBinary','Pclass','Class1','Class2',
'Class3','ClassSex','Female','MasterMiss','S','1male','2male',
'3male','Boy'],axis=1,inplace=True)"
"df.drop(columns=['Ticket','Name','Cabin'],inplace=True)"
"df[(df['Sex']=='female')&(df['Fare']<=10)&(df['Age']>26)&(df[
'Embarked']=='S')&(df['Name_title_Miss']==1.0)]"
"df.sort_values('Scores',ascending=False,inplace=True)"
"df.sort_values('Acc_Score',ascending=False)"
df.loc[3]
df.sort_values('Values')
"df.sort_values('RFECVAccuracyrank',inplace=True)"
"df.iloc[:,(2)],"
"df.drop(columns=to_drop,inplace=True,axis=1)"
df.Ticket_clf.drop_duplicates()
df['Name_Len']
"df.train[['Age','Age_density']].head()"
"df.sort_values(by='CorrelationCoeff',ascending=False)"
"df.drop(['FareBin'],1,inplace=True)"
df.feature.drop(['Cabin'])
"df.drop(columns=['Ticket','Name','Cabin','PassengerId'],inplace=True)"
"df.drop(drop1,axis=1,inplace=True)"
"df[['Family','SibSp','Parch']].head()"
"df.drop(['PassengerId','SibSp'],axis=1,inplace=True)"
"df.sort_values(by='Totalmissing',ascending=False).head()"
"df[['Sex','Sex_encode']].head()"
"df.drop(['PassengerId','Name','Ticket','Cabin','Age','Fare_bin'],axis
=1,inplace=True)"
df.query('CabinCount>1')
"df.sort_values(by=['ValidationAccuracy'],ascending=False,inplace=True)"
df[df['deck'].notnull()].head(5)
"df.loc[:,(features2)],"
df.loc[df['Fare']>300]
"df.drop(drop_column,axis=1,inplace=True)"
"df.drop('FareCategory',axis=1)"
"df.drop(labels=['PassengerId','Pclass','SibSp','Parch','Ticket',
'Title','Embarked','Sex'],axis=1,inplace=True)"
df['FareBin']
"df[['Name','Ticket','Cabin']].head(15)"
df[df.Title=='Capt']
"df.drop(['Pclass_2','Sex_male','Embarked_Q','Embarked_C',
'Age_bin_Children','Age_bin_Teenage','SibSp_bin_None',
'SibSp_bin_Small','SibSp_bin_Large','Parch_bin_Large','Title_Mr',
'Title_Rare','FamilySize_bin_Single'],axis=1,inplace=True)"
df[0:20]
df.loc[outliers_to_drop]
df.iloc[0:10]
"df.shape,df.shape,df.shape,df.shape"
"df.drop(columns=['Ticket'],axis=1,inplace=True)"
df.T.loc['Cost']
"df[['Name','Sex']].head()"
test_data.head()['Embarked']
"df[cleaned_df['Age']>60][['Age','Sex','Pclass','Survived']].describe()"
df[X_test]
"df.drop('Survived',axis=1),df['Survived']"
df.head(500)
"df.loc[df['SharedTicket']==1,'Ticket'].sort_values()"
"df.drop(labels=['Ticket','Cabin'],axis=1,inplace=True)"
"df.drop(columns=['Name','Age','Fare'],inplace=True,axis=1)"
df['age_quantile']
data.loc[data['Title'].isin(['Jonkheer'])]['Age']
"df[['Name','Cabin']].head(10)"
"df.drop(columns=['Name','PassengerId'],inplace=True)"
df[df.FamilyName=='Peacock']
"df.drop('index',1,inplace=True)"
"df['SharedFeatures']==1,"
df.sort_values(by=['PassengerId'])
df[df['Pclass']==3].sort_values(by='Age')
"df.drop('SibSp',inplace=True,axis=1)"
df.Ticket_Count.head()
"df.drop(labels=['Cabin','Ticket'],inplace=True,axis=1)"
"df.drop(['Embarked','Sex','Ticket','Cabin','Name','PassengerId'],
inplace=True,axis=1)"
train.head()['Embarked']
"output.sort_values(by='Score',ascending=False)[:5]"
"df.drop(['Fare','Q','Class2','Class1','C','S','Class3','Parch'],
axis=1,inplace=True)"
"df.drop('Age',1,inplace=True)"
"df.drop(['PassengerId','Name','Sex','Ticket','Cabin','Embarked'],
inplace=True,axis=1)"
df.sort_values('Ticket').head(10)
df[df['Age']%1==0.5]
"df.drop(labels=['Ticket_Cat'],axis=1,inplace=True)"
df.head()
"df.loc[0,'Name']"
"df.feature.drop(['Parch','SibSp'])"
df['Cabin'][df['Cabin'].notnull()].head(100)
df[colum]
"df.shape,df.shape,df[0].shape,df.shape,df.T.shape"
df['Fare'].describe(include=all)
"df.drop(['Ticket','Name','family_size','Fare','name_length'],axis=1,
inplace=True)"
df.loc[df['Fare'].isnull()|(df['Fare']==0)]
"df.sort_values('score',ascending=False)"
"df[0]['best_model'],"
"df.drop(labels='Age',axis='columns',inplace=True)"
"df.drop(usecol,axis=1,inplace=True)"
df['Ticket'].head(30)
df.head(20)
"df.sort_values(by='Survived',ascending=False)"
df['TicketClean'].head()
df.iloc[outlier_indices]
"df.drop(rest,inplace=True,axis=1)"
"df.Fare.describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9])"
df.stats.describe(X[0])
"df.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin',
'Title'],axis=1,inplace=True)"
"df['Fare']>300,"
df.drop_duplicates(inplace=True)
df[train_features].head()
df['Fare_log'].describe()
"df.iloc[:5,],df.iloc[:5,]"
df[selectColumns].head()
df[0:5]
df['Sex'].describe()
"df.drop(['Alone','person','Pclass','WithoutFamily','male','class_3'],
axis=1,inplace=True)"
"df[dftrain.FamilyName=='Panula'][['Survived','Pclass','Name','Ticket',
'Fare','FareCorrect']]"
df[df.Age.isnull()].head()
"df.drop(['Sex_male','Embarked_S'],axis=1,inplace=True)"
"df.drop(['SibSp'],axis=1,inplace=True)"
"df.drop(['PassengerId'],axis=1)"
"df[(df['NoPerTicket']==1)&(df['Age'].isnull()==False)&((df['Parch']>
0)|(df['SibSp']>0))]"
"df.sort_values(by=['MLATestAccuracy'],ascending=False,inplace=True)"
"df.drop('Survived_fam',axis=1,inplace=True)"
"df.drop(['PassengerId','Name'],axis=1,inplace=True)"
"df.drop(['Name','Ticket'],axis=1,inplace=True)"
df[df.Ticket=='3701']
"df.loc[(df.Name=='Storey,Mr.Thomas'),:]"
df[1043:1044]
"df[['Survived-SVM','Survived-RF','Survived-RFC','Survived-XGB','Survived']]"
"df.drop(labels=label_drop,inplace=True,axis=1)"
df['SibSp'].describe()
"df.drop(['Pclass'],inplace=True,axis=1)"
"df.drop(['PassengerId','Cabin','Name','Sex','Ticket','Embarked','Age'
],axis=1,inplace=True)"
"df.drop('Survived',inplace=True,axis=1)"
"df.drop('Ticket_number',axis=1,inplace=True)"
df[3]
"df.drop(['Name','Parch','SibSp'],axis=1,inplace=True)"
df[df.isnull(titanic_df['Age'])]
df.head(3)
"df.drop(['Ticket','PassengerId'],axis=1,inplace=True)"
"df[(df['Sex']=='female')&(df['Fare']<=10)&(df['Age']>28)&(df[
'Name_title_Miss']==1.0)]"
"df.drop(labels=['source'],axis=1,inplace=True)"
"df.drop('Name',1,inplace=True)"
df['Survived'].describe()
df[df['Cabin'].isnull()]
df[(df['Survived']==0)&(df['Sex']=='female')]
"df.drop(['PassengerId','Cabin','Cabin','Embarked','Name','Ticket'],
axis=1,inplace=True)"
"yielddf[ii:ii+batch_size],df[ii:ii+batch_size]"
df.loc[df['Title']=='the']
"df.drop(drop_columns_test,axis=1,inplace=True)"
"ifdf.loc[pid,'Age_cat']!='NA':
continue"
df.query('Fare==0').head()
df['Cabin_Letter']
"df.drop(['PassengerId','istrain','Age'],axis=1,inplace=True)"
"df.drop(columns=bad_title,inplace=True)"
df['Sex']
"df.loc[(single_poor_wmn),:]"
df['Ticket'].head(40)
"df.drop('Embarked',1,inplace=True)"
"df.drop(columns=cat_vars,inplace=True)"
"df.drop(['male'],axis=1)"
df.loc[df['deck']=='T']
"df.drop(labels=['Age','SibSp','Parch','Title','FamilySize'],axis=1,
inplace=True)"
"df.drop(['Name','PassengerId','SibSp','Parch','Ticket'],axis=1,
inplace=True)"
"df.drop(['Name_len_Class2','Name_len_Class'],axis=1,inplace=True,errors
='ignore')"
"df.drop('Alone',1,inplace=True)"
"df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)"
"df.loc[5:10,]"
"df.drop(columns=c,inplace=True)"
"df.drop(drop_elements,axis=1,inplace=True)"
pd.read_csv('titanic-test-results.csv')
"df['group_id']==df.loc[pid,'group_id']"
"df.head(),df.head()"
"df.sort_values(by='KFoldScore',ascending=False)"
"df.drop(['Name','PassengerId','Cabin','Ticket','Fare'],axis=1,inplace
=True)"
df.iloc[0:5]
"df.describe().T.sort_values(by='mean',ascending=False)"
"df.loc[:,('Name')]"
"df.sort_values(by='Rate',inplace=True,ascending=False)"
df[numerical_variables].head()
"df.sort_values(by='acc',ascending=False,inplace=True)"
df[df['Title'].isin(titles)&df['Age'].isnull()]
df['Title_Code'].head()
"df.drop(feature,axis=1,inplace=True)"
df.head(0)
"df.drop(columns=['Survived'],axis=1,inplace=True)"
df[df.isnull(titanic_df['Embarked'])]
"df.drop(['Age','Fare','PassengerId','Name','SibSp','Parch'],axis=1,
inplace=True)"
df[df['Survived']==0]
"df.drop(['Parch','SibSp'],inplace=True,axis=1)"
df['Ticket'].head()
df.describe(include='all')
df.loc[df.index.isin(false_predictions)].loc[df.Sex=='male'].head(1)
"dftrain[dftrain.TwoLetters=='ic'].sort_values('Ticket')[['PassengerId',
'Survived','Pclass','Name','Ticket']]"
"df.drop(['AgeBand'],axis=1)"
"[df[(df['Survived_ind']==1)&(df['Train']==1)]['Fare_ind'],df[(df[
'Survived_ind']==0)&(df['Train']==1)]['Fare_ind']],"
df[df.SibSp==8]
"df.drop(['PassengerId','Name','Sex','Age','SibSp','Parch','Ticket',
'Cabin','Embarked'],axis=1,inplace=True)"
"df.loc[df['SharedTicket']==1,['Ticket','Name']].sort_values('Ticket').head(
20)"
"df.loc[[69,184]]"
df[['Age']].describe()
"df.drop('Ageband',axis=1,inplace=True)"
df[df['Age']>=60]
df.iloc[0:418]
df[df['Fare']>=300]
"df.drop(to_drop,inplace=True,axis=1)"
subdf.loc[subdf['pred_1']>=0.5][:5]
"(df['Embarked']=='S')&(df['Fare']>8),"
"df.loc[:,(['Age*Class','Age','Pclass'])].head()"
df['Cabin'][27:32]
"df.drop(['Cabin','Embarked','Name','Ticket','Title','old_age'],axis=1,
inplace=True)"
df.loc[df['Survived']==1]
df['Name'][0:5]
"df.loc[1:10,'Age':'Name']"
"df.loc[[0,5,10,20,50]]"
"df.drop(['PassengerId','Cabin','Sex','Embarked','Name','Ticket'],axis
=1,inplace=True)"
"df.drop(['Name','Ticket','PassengerId','Embarked','Cabin'],inplace=
True,axis=1)"
df.Deck.head(10)
"df['Age'],"
"df.drop(['Q'],axis=1,inplace=True)"
"df.drop(['train',target,'Pclass'],axis=1,inplace=True)"
"df.drop(['Name','Ticket','PassengerId'],inplace=True,axis=1)"
(df['SharedTicket']==1)&(df['SharedName']==0)
"df['target'],"
"df.drop(labels=['SibSp','Parch'],axis='columns',inplace=True)"
"df.drop('Ticket_char',axis=1,inplace=True)"
df['TravelingAlone'].describe()
df[df.Age<age_cutoff].head()
df['Ticket'].head(10)
df.head(2)
"df.drop(train[drop_features],axis=1,inplace=True)"
"df.drop('Embarked',axis=1,inplace=True)"
"df.drop('Deck',axis=1,inplace=True)"
df[features_rfe].head()
df.Cabin.head(10)
"df.loc[('2016-01-04'),:]"
df.Survived.head(10)
test.head()['Name']
"df.sort_values('Accuracy',ascending=False,inplace=True)"
df[obj_to_cat].head()
"df[df['Age'].isnull()][['Sex','Pclass','Age']]"
"df.sort_values(by=['Means'],ascending=False)"
df[col_text].describe()
df[(df.Cabin=='B28')|(df.Ticket=='113572')]
df[numerical_data].head(3)
"df.drop(['SibSp','Parch'],1,inplace=True)"
df[df['Pclass']==1]
"df.drop(skip_flds,axis=1,inplace=True)"
df.Sex.describe()
df.feature.drop(['Name'])
"df[df['Pclass']==3].sort_values('Fare',ascending=False).head(5)"
df[df.isnull(df_test['Fare'])]
"df.drop(v,axis=1,inplace=True)"
df[df.Fare.isnull()==True]
df.Ticket.head(5)
"df.drop(['PassengerId','Cabin'],axis=1,inplace=True)"
"df.drop(['Fare_Bin','Age_Bin'],axis=1,inplace=True)"
"df[['Sex','Pclass','Age']]"
"df.drop(['PassengerId'],inplace=True,axis=1)"
df['Pclass'].sort_values(ascending=False)
df['Fare']
"df.drop(['Pclass','Sex','Ticket','Title'],axis=1,inplace=True)"
"df[['sibsp','parch','familysize']].head()"
"df.drop(columns=['PassengerId','Name','Ticket'],inplace=True)"
"df.drop(columns=['PassengerId','Name','SibSp','Parch','Ticket'],
inplace=True)"
"df[['Age*Class','Age','Pclass']].head(10)"
df[(df['SibSp']==5)|(df['SibSp']==8)]
"df.drop(['Pclass','Sex','PassengerId','Name','Ticket'],axis=1,inplace
=True)"
df['Survived']>0
"df.drop('Fare',axis=1,inplace=True)"
"df[(df.Fare==1)&(df.Pclass==2)].shape[0]/(1.0*df[df.Fare==1].
shape[0]),"
"df[['Age','Survived']][df['Age']>65]"
"df[2,2]"
"df.drop([col],inplace=True,axis=1)"
"df.drop(['Name','Ticket','Cabin','Age','Fare'],inplace=True,axis=1)"
"df['X_train'],y_train"
"df.drop(['Name','Ticket'],axis=1)"
df[(df.Sex=='female')&(df.Pclass==1)&(df.Survived==1)].head(20)
df.loc[829]
df['Ticket'].head(100)
"df.drop(test[drop_features],axis=1,inplace=True)"
combined_data.iloc[:891]['Age']
"df.drop(['class3'],axis=1,inplace=True)"
"df.drop(['FamilyName'],axis=1,inplace=True)"
df['Fare'].sort_values(ascending=False)
df.Ticket.head()
"df.drop(['title'],axis=1,inplace=True)"
df['Ticket'].head(n=10)
df['Age']<=16
df[df.Missing>0]
df['Isalone'].loc[df['FamilyMembers']>1]
"df.loc[(df['Age']>80)&(df['Fare']>513),'Age']"
"df.drop(cols_to_drop,inplace=True,axis=1)"
df.shape
train.head()['Cabin']
"df.drop(['SibSp','Parch'],axis=1,inplace=1)"
"df[['ticket','ticket_prefix','ticket_nr']].head()"
"df.drop('Name',axis=1,inplace=True)"
"df['Build_time_'+df[i]],"
"df.drop(labels=['PassengerId','Name','Cabin','Ticket'],inplace=True,axis=1
)"
"df.drop(columns='PassengerId',inplace=True)"
df[data['Survived']==0]['Title_Officer']
"df.drop(labels=['Ticket'],axis=1,inplace=True)"
df.sort_values('Surname').head(20)
"df.loc[index,'knn'],"
"df.loc['Store1','Cost']"
"df.drop(testset.columns[[0,2,7,9,10]],axis=1,inplace=True)"
"('PassengerId',df['PassengerId']),"
df[titanic_data['Parch']!=0][:5]
data[data.Ticket.isin(t_p_alone)].sort_values('Ticket')[96:]
df.shape(X_NumPy_Mat)
"df.drop('Embarked_Missing',axis=1,inplace=True)"
df.isnull()
"df.iloc[:,([0,1,3,4,5,6])].head()"
df.Name[df.Age.isnull()].head(3)
df[~((df.Embarked=='S')|(df.Embarked=='C')|(df.Embarked=='Q'))]
"df.drop(['Name','Title'],axis=1,inplace=True)"
"df.sort_values(by='cross-accuracy',ascending=False)"
df[df.isnull(all_data['Embarked'])]
df[(df.Title=='Master')&(df.Survived==0)]
df[one_hot_columns].shape
"df.drop(['PassengerId','Name','Sex','Age','SibSp','Parch','Ticket',
'Fare','Cabin','Embarked','AgeBins','Deck','FareBins'],inplace=
True,axis=1)"
df[mask_noembarked]
"df[['FamilySize','FamilyType']].head()"
df[P_Ti_vs_Ti].head()
"df.drop(['Embarked','Name'],axis=1,inplace=True)"
df[df['Ticket']=='113505']
"df.iloc[[0,2,4],[1,3,6]]"
"df.drop(['parent_of_child'],axis=1,inplace=True)"
"df['Title'],"
df.sort_values(by='Pclass')
"(df['SharedTicket']==0)&(df['SharedName']==1)&(df['FamilySize']==1),"
df[df.Embarked=='Q'][df.Survived==1].shape[0]
"df.sort_values(by='score',inplace=True)"
df['FareBin_Code']
"df.drop('AgeBand',axis=1,inplace=True)"
"df.drop(columns=['Survived'],axis=1),"
df.name_len.head()
"df.drop(['PassengerId','Name','Sex','SibSp','Parch','Ticket',
'Embarked'],axis=1,inplace=True)"
df.SibSp.describe()
df[df['PassengerId']==62]
df[-5::-2]
df.loc[df.isnull(train_data['Embarked'])]
df[df.Cabin=='C49']
"df[columns].describe(include='all',percentiles=[])"
"df.loc[0:11,'Name':'Ticket']"
df[df['total']>0]
"df.drop(['C','Embarked','MasterMiss','Parch','ParchBinary'],axis=1,
inplace=True)"
"df[imp_features],"
df.describe(include='number')
"df['Deck'],"
df.Parch.describe()
df.Embarked.shape
df[df.Sex=='male']
"df[fulldata.Fare.isnull()][['Fare','Pclass','Embarked']]"
"df['CVScore'],"
"df.drop(['Age','Cabin','Embarked','Fare','Name','Parch','PassengerId',
'SibSp','Ticket','title','Last_Name','FareBin','AgeBin'],axis=1,
inplace=True)"
df.shape[0]==ntrain+ntest
"df.drop(['Age_2'],axis=1,inplace=True)"
df[:training_data_length].head(2)
"df[DataSetTrain['Survived']==1][['Name','Sex','Age','Pclass','Cabin']]"
df.head(4)
"df['train-logloss'][0],"
df[df['Title'].isin(['Rev'])]
"df.drop(['Pclass','Name','Sex','Ticket','Cabin','Embarked'],axis=1,
inplace=True)"
df.query('Age<1')
"df.drop(['Survived','ages'],axis=1,inplace=True)"
"df.drop(['Cabin','Name','Parch','SibSp','Ticket','Sex'],axis=1,
inplace=True)"
"df['SibSp'],"
"df.drop(labels=['PassengerId'],axis=1,inplace=True)"
"df.drop(['Cabin','Name','Ticket','Parch','SibSp','Sex'],axis=1,
inplace=True)"
"df[['Fare','Age']].describe()"
df['PassengerId'].head(20)
df['Name'].head(10)
df.Cabin.describe()
"df['KNCSFMRS,ETCN,GBCSFMN,RFCSFMRS'][scoring_refit]"
df['Family']
"df.drop(columns={'count','sum'},inplace=True)"
"df.sort_values('Score',ascending=False)"
"df.sort_values(by='Importance',ascending=False,inplace=True)"
df[(df['Embarked']=='C')&(df.Fare>200)].head()
"df.drop('age_pred',axis=1,inplace=True)"
"df['Sex']==sex,"
df['Fare'][152]
df[dataset['Mrs']==1]['Age'].describe()
df[(df['Sex']=='male')&(df['Fare']>500)].sort_values(by=['Fare'])
"df['Fare'],"
df.loc[df.index].describe()
df['Surname'].head()
df[61:62]
"df[1]['best_model'],"
"df.sort_values(['Fare'],ascending=[True])"
"df[['Pclass','Sex','Cabin','Embarked']]"
df['Pclass'][df['Fare'].isnull()==True]
"df.drop(['Sex','Age','SibSp','Parch','Fare','Embarked','family_size'],
axis=1,inplace=True)"
df.sort_values(inplace=True)
df.loc[mask_zerofare]
"df.drop(['Person','Embarked'],axis=1,inplace=True)"
"df.drop(['Cabin','Name','PassengerId','Ticket'],axis=1,inplace=True)"
"df.drop(['Name','Sex','Ticket','Cabin','Embarked','Cabin_I'],axis=1,
inplace=True)"
df.values.shape
"df.iloc[0:3,3:6]"
df.head(n=20)
"df.loc[:,(['pclass','age','age*class'])].head(10)"
"df.drop(['Cabin_numeric_range_NoCabin','Cabin_deck_No'],inplace=True,axis=1
)"
"df.sort_values(by=['F1Score'],ascending=False,inplace=True)"
df.iloc[152]
"df.drop('FamilyId_x',axis=1,inplace=True)"
"df['CabinCount'],"
"df.drop('Ticket',axis=1,inplace=True,errors='ignore')"
df.Title.head()
"df.loc[5:10,'Age':'Pclass']"
"df.drop(['Name','Ticket','Embarked','Cabin'],inplace=True,axis=1)"
"df.drop(['Parch','SibSp','Name','Ticket'],inplace=True,axis=1)"
"df.sort_values(by='accuracy',ascending=False)"
"df.drop(['PassengerId','Ticket','Cabin'],axis=1,inplace=True)"
"df.sort_values('Fare',ascending=False)"
"df.drop(['Sex','Embarked','Pclass','Name','Ticket','Cabin'],axis=1,
inplace=True)"
df.iloc[0:11]
df.feature.drop(['Ticket'])
df.Survived.describe()
df[:12]
df[train['Deck'].isnull()]['Pclass'].describe()
df.columns.shape
"df.drop(labels=['PassengerId','Name'],axis=1,inplace=True)"
train.loc[train['Pclass']==3]['Deck'].describe()
"df['train-error'][0],"
"df.drop(['index','PassengerId'],inplace=True,axis=1)"
"train.loc[train['Sex']=='male'].drop(male_children.index).sort_values(by=
'Age')[:5]"
"df.sort_values(ascending=False,inplace=True)"
df.head(50)
"df['Value(M)'],"
df[age_set['Mrs']==1]['Age'].describe()
df.shape[0]+df.shape[0]
df[cols].head()
df.sort_values()
"df.drop(['PassengerId','Name','Ticket','Cabin','SibSp','Parch'],axis=
1,inplace=True)"
"df.drop(['Person'],axis=1,inplace=True)"
"df.drop(['Age','Name','Cabin'],axis=1,inplace=True)"
df['Parch'].describe()
combined_data.iloc[891:]['Age'].describe()
"df.loc[(df.Embarked.isnull()),:]"
"'After',df.shape,df.shape,df[0].shape,df[1].shape"
df[df.Ticket=='CA2144']
"df.drop(['Title_Rev','age_group_old','age_group_teenager',
'age_group_senior_citizen','Embarked_Q'],axis=1,inplace=True)"
df['Cabin'].head(10)
"df.drop('Age',axis=1,inplace=True)"
df.drop(columns=['AgeBand'])
"df.drop(['Name','Cabin','Ticket','Fare'],axis=1,inplace=True)"
df[df.Title=='Dr']
"df.drop(['SibSp','Parch'],axis=1)"
"df.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'],axis=
1,inplace=True)"
df[df['Survived']==1].shape[0]/df.shape[0]*100
"df.sort_values(by=['best_score'],ascending=False)"
"df[train.Embarked.isnull()][['Fare','Pclass','Embarked']]"
df[-4:-2]
"df.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin',
'Embarked','Age','Fare'],axis=1,inplace=True)"
"ifdrop:
df.drop(fldname,axis=1,inplace=True)"
"df.sort_values(by='SibSp').describe(percentiles=[0.68,0.69])"
df['Age_cat'].head()
"data.head()[['Pclass','Age','SibSp','Parch','Ticket','Cabin','Embarked']]"
"df.drop(columns=['Title_Rev','FamilySize_3','Cabin_U','Age_0'],inplace=True
)"
df[df['Ticket']==111361]
"df.drop(['Survived'],1,inplace=True)"
"df.drop(['Name','Age','SibSp','Parch','Ticket','Fare','Cabin'],axis=
1,inplace=True)"
df[df.Survived==1]
df[top]
"df['Title'].isin(male_title),"
"df.sort_values(by='Rate',ascending=False,inplace=True)"
"df.loc[df['Age'].notnull(),['Sex','Pclass','Age']],"
"df.drop(columns=col_to_drop,axis=1,inplace=True)"
"df.drop(['Name','Cabin','Ticket'],axis=1,inplace=True)"
+0.25*df['Survived']
df[0:10]
"df.drop(['CabinNumber'],axis=1,inplace=True)"
df[df.isnull(all_data['Fare'])]
df['logistic_regression_second_level_selected_cols']
"df.drop(['Survived','Pclass','Name','Sex','SibSp','Parch','Ticket',
'Cabin','Embarked','PassengerId'],axis=1,inplace=True)"
"df.drop('Alone',axis=1,inplace=True)"
"df.drop(['Embarked'],1,inplace=True)"
"df.drop(columns=['Name','Embarked','Sex'])"
df[test['Deck'].isnull()]['Pclass'].describe()
"df.drop('Parch',inplace=True,axis=1)"
df[(df.Age<1.0)&(df.Survived==0)]
"df[['Parch','SibSp']].describe()"
df[df['Parch']==9].head()
df[df.Fare==0]
"df.drop(labels=['Name','PassengerId'],axis=1,inplace=True)"
"df.sort_values(by=['Test_Score'],ascending=False,inplace=True)"
"df.drop(['Name','Ticket'],inplace=True,axis=1)"
"df.drop(['Name','Ticket','PassengerId','Sex_female'],inplace=True,axis=1)"
"df.drop(columns=columns,axis=1,inplace=True)"
df[df['Embarked'].isnull()]
"df.sort_values(by='importance',ascending=True,inplace=True)"
df[1:5]
"df['Train_acc_'+df[i]],"
"df.drop(Columns_to_drop,axis=1,inplace=True)"
"df.drop(categorical_cols,axis=1,inplace=True,errors=False)"
"df.drop('Ticket',1,inplace=True)"
"df.drop(labels=['PassengerId','Name','Names','Cabin','Ticket','Age',
'Fare'],axis=1,inplace=True)"
df[df.Man==0].loc[df.Woman==0].loc[df.Child==0]
"df.drop(labels='Ticket',inplace=True,axis=1)"
"df.drop(columns=drop_col,axis=1,inplace=True)"
"df[(df['Sex']=='male')&(df['Fare']>200)&(df['Fare']<500)
].sort_values(by=['Fare'])"
"df.sort_values(by='acc',axis=0,ascending=False).iloc[20:,:]"
"df.drop(var_to_drop,axis=1,inplace=True)"
df.FamilySize.head(10)
df[df['title']=='Master']
"df.drop(['SibSp','Parch','Name'],axis=1,inplace=True)"
df['Cabin_num'].head()
df.shape(X_scale)
"df.loc[nullFares,'Fare']"
"df[mark],"
"df.drop('Survived',axis=1,inplace=True,errors='ignore')"
df[(df.Sex=='female')&(df.Pclass==3)&(df.Survived==1)].head(20)
df[a>0]
"df.sort_values(by=['MLAScore'],ascending=False,inplace=True)"
df[df.Age.isnull()]
"df.drop('Sex',axis=1,inplace=True)"
df[df.Fare!=df.Fare]
df[(df['Age']>5.0)&(df['Age']<7.0)]
"df.loc[:,(['Name','Cost'])]"
"df['TicketPrefix'],"
"df.drop(['PassengerId','Sex','Embarked','Name','Ticket','Title',
'Cabin','Pclass'],axis=1,inplace=True)"
"df.drop(labels=['PassengerId','IsTrain'],axis=0,inplace=True)"
df.Name.head(10)
df[2]['best_model']
"df.loc[(df.Sex=='female')&((df.Pclass==1)|(df.Pclass==2)|(df.
Age>=50)&(df.Age<70))]"
"df.sort_values('Median',ascending=False)"
df[df['Fare']==0]
"[df.drop(columns=['Name'],inplace=True)fordfin[train,validation]]"
"df[['Survived','Sex','Embarked','Fare','Pclass','Age','Parch','SibSp']]"
df.loc[df.Embarked.isnull()]
"df.drop(index=78,inplace=True)"
"df.drop(['PassengerId','Cabin','Name','Ticket'],axis=1,inplace=True)"
"df.drop(['PassengerCount','PassengersSurvived','Ticket'],axis=1,inplace
=True)"
df['Pclass'].describe()
"df.drop([i],axis=1)"
"df[DataSetTrain['Survived']==0][['Name','Sex','Age','Pclass','Cabin']]"
"df.drop(['Embarked','PassengerId','CabinCode','Survived'],axis=1,
inplace=True)"
"df.drop('TitleDon.',axis=1,inplace=True)"
"df.sort_values(by='importance',ascending=False)"
df.shape(X_train)
"(df['Age'][sel_age_fin],train['Age'][sel_age_fin][sel_age_male],train[
'Age'][sel_age_fin][sel_age_female]),"
"df.drop(drop_cols+['Cabin_l'],1,inplace=True)"
"df[['Family_S_C','Simple_S_C']]"
df[df['Title']=='Dona']
"df.drop(['PassengerId','Survived','Name','Ticket','Cabin'],axis=1,
inplace=True)"
"df.sort_values(by=['Accuracy'],ascending=False)"
"df.drop(['Ticket','Fare','Cabin','Name','PassengerId'],axis=1,inplace
=True)"
"df.drop('PassengerId',axis=1,inplace=True)"
"df.drop('Training_set',axis=1)"
df.head(100)
"df['Parch'],"
"df.drop(['AdultF','AdultM','Girl','ChildSex'],axis=1,inplace=True)"
df[(df.Sex=='female')&(df.Pclass==1)&(df.Survived==0)]
"df['Fare'][df['Survived']==1],"
"df.drop(['Cabin','PassengerId','Name','Ticket','Sex_female','Parch',
'SibSp'],axis=1,inplace=True)"
df['Title'].describe()
"df.drop(columns='Survived',inplace=True)"
"df.drop(labels=['Name','Names','Cabin','Ticket','Age','Fare'],axis=1,
inplace=True)"
"df.drop(['PassengerId','Embarked','Sex','Ticket','Name'],axis=1,
inplace=True)"
"df.sort_values(by=['score'],inplace=True)"
df.loc[df.Fare.isnull()]
df.describe(include=[np.number])
df.shape[1]
"df.drop(columns='Embarked',inplace=True)"
df.loc[(df['Survived']==1)&(df['Sex']=='female')&df['Age']]
"df.drop(labels=['Ticket','Fare','Cabin'],axis=1,inplace=True)"
df.iloc[0]
df[full.Title=='Miss']['Age'].describe()
df[df['Pclass']==1].sort_values('Fare').head()
"df.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)"
"[df.drop(columns=['Name'],inplace=True)fordfin[titanic_df,test_df]]"
"df.sort_values(by='Correlation',ascending=False)"
"df.sort_values(by='Importance',axis=0,inplace=True,ascending=False)"
df[s].describe(include='all')
"df.drop(['Cabin_T'],axis=1,inplace=True)"
"df.drop(['PassengerId'],axis=1).describe()"
df.loc[df['Embarked']=='Unknown']
"df.drop(categorical_columns,axis=1).describe(include=[np.number])"
"df[['Age','Age_0','Age_1','Age_2','Age_3','Age_4','Age_5','Age_6']
].head(10)"
df.loc[[152]]
"df.drop(['C3'],axis=1,inplace=True)"
df[(df.Sex=='female')&(df.Pclass==2)&(df.Survived==0)]
"df.drop(['SibSp','Parch','Name','Ticket'],inplace=True,axis=1)"
"df['Age']>35,"
traindf.describe()['Fare']
df['Pclass'].head(20)
df[-5:]
"df.sort_values('mean_test_score',ascending=False,inplace=True)"
df.loc[df['SibSp']==8]
"df.drop('Training_set',axis=1,inplace=True)"
df.loc[0:11]
"df.drop(labels=column_drop,axis=1,inplace=True)"
df['Golf']
"df.drop(['PassengerId'],1,inplace=True)"
df.loc['Andersson']
"df.sort_values(by=['importance'],ascending=False,inplace=True)"
df.describe(include=[np.object])
df[['Age']]
"df[fulldata.Embarked.isnull()][['Fare','Pclass','Embarked']]"
"df.sort_values(by=0,ascending=False).head(10)"
df[b>0]
"df.drop(columns=['Name','Ticket','Cabin'],inplace=True)"
df[0]
"df.drop(['SibSp','Embarked_Q','TitleMaster.','Parch'],axis=1,inplace=True)"
"df.sort_values(by='accuracy',ascending=False,inplace=True)"
"df.drop(['Age'],1,inplace=True)"
df[(df.Cabin=='C49')|(df.Cabin=='C22C26')]
"df.drop(['PassengerId','Survived','Pclass'],axis=1).describe()"
df[df['Fare']<3].head()
"df.drop(df[df['Fare']>100].index,inplace=True)"
"df.iloc[[5,17]]"
"df.drop(['Male'],axis=1,inplace=True)"
"df.drop(['SibSp','Parch','Family'],axis=1,inplace=True)"
df['FarePerPerson'].head()
"df[(df['Gen_Clas']=='Other')&(df['Pclass']==3)][['Age','Pclass',
'Gen_Clas']].head(10)"
df.probability.describe()
"df.drop(columns=['Name','Sex','Ticket','Fare','Cabin','Embarked',
'Title','Age'],inplace=True)"
"df.sort_values(by='corrSurvived',ascending=False)"
"df.iloc[5:10,3:8]"
assertdf.shape==df.shape
df[640:645]
"df.drop(dropping,axis=1,inplace=True)"
df[df.Fare.isnull()].head()
df[df['Ticket']=='7534']
titanic_df.head()['Name']
"df['test-logloss'][0],"
df.loc[df['Ticket']=='LINE']
"df.drop('Age_cat',axis=1,inplace=True)"
"df.loc[0,['Name','Sex','Ticket']]"
df[['Pclass']].loc[df['Fare'].isnull()]
"df[['Pclass','Sex','Fare']].describe(include='all')"
df.loc[df['Fare']>500]
"df.drop(['PassengerId','Name','LastName','SibSp','Parch','Ticket'],
axis=1,inplace=True)"
df[Titanic_Master.Fare<=53]['Fare'].describe()
df['Name'].head(50)
df.shape(X_features_train)
"df.drop(['male'],axis=1,inplace=True)"
df.Embarked.head(20)
"df.drop(['Train','Ticket','Name','Fare_fam','per_capita'],axis=1,
inplace=True)"
"df.drop(labels=['Parch','SibSp'],axis=1,inplace=True)"
df[df['Cabin_Data']]
"df.loc[df.Fare==0,['Survived','Fare']]"
"df.drop('Cabin',axis=1,inplace=True)"
df[df.Ticket=='113760']
df[1].head()
df['Ticket'].describe()
"df.drop(drop,axis=1,inplace=True)"
df['Sex'].head()
"df[['TicketCounts','Ticket','SibSp','Parch']][:20]"
"df.loc[df.Pclass==3,'Fare']"
df[0].head()
"df.drop('Sex',axis=1,inplace=True,errors='ignore')"
df['Pclass']==j+1
"df.sort_values(['Survived'],ascending=False,inplace=True)"
"df.drop('Title',axis=1,inplace=True,errors='ignore')"
"df.drop(['PassengerId','Ticket','Cabin','Name','Embarked'],axis=1,
inplace=True)"
"df.drop(['Survived','PassengerId'],axis=1,inplace=True)"
data.head()['Cabin']
df.loc[df['Embarked'].isnull()]
"df.drop('PassengerId',axis=1)"
"df.drop(['PassengerId','Ticket','Name'],axis=1,inplace=True)"
"df[df['Age'].isnull()][['Gender','Pclass','Age','AgeFill']].head(10)"
df[(df['Pclass']==3)&(df['Embarked']=='S')].head()
"df.drop(['PassengerId','Ticket','Name','Cabin','SibSp','Parch'],axis=
1,inplace=True)"
df.describe(include=['object'])
"df.describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.68,
0.69,0.75,0.99],include=[np.number])"
"df.drop(axis=1,columns='ticket',inplace=True)"
"df[['Name','Ticket','Pclass','Cabin']].head()"
df[data_numbers].describe()
df[(df['Survived']>0)&(df['Survived']==0)]
df['SibSp']+df['Parch']
"df.drop(['Sex','SibSp','Parch','Embarked'],axis=1,inplace=True)"
"df.drop(['PassengerId','SibSp','Name','Ticket','Parch','Cabin',
'Embarked'],axis=1,inplace=True)"
"df.loc[[28,76,89,129]]"
df.Age.head(20)
"df.loc[(df['Fare']>500),:]"
"df.drop(labels=columns_to_drop,axis=1,inplace=True)"
"df.drop(['Name','Sex','Ticket','Cabin','Embarked','Age','MMs','Ms',
'm','Pch','Pc','p','SbS','Sb','s','Fem','F','Male',
'YourCoin5','Survived'],axis=1,inplace=True)"
"df[test.Fare.isnull()][['Pclass','Fare','Embarked']]"
"df.drop(['PassengerId','Name','Sex','Ticket','Embarked'],axis=1,
inplace=True)"
df.head(418)
df.loc[df['Title']=='Dr']
"df.drop(['PassengerId','Sex','Embarked','Name','Ticket','Cabin','Age',
'Fare'],axis=1,inplace=True)"
"df.drop(Field2Drop,axis=1,inplace=True)"
"df.drop(['Title','Title_Code'],axis=1,inplace=True)"
"df.drop(columns=['Name','Age','Fare','Parch','SibSp','Ticket'],
inplace=True)"
"df.drop(['Age','SibSp','Parch'],axis=1,inplace=True)"
df.loc[[1044]]
"df.drop(labels=['Name','Ticket'],axis=1,inplace=True)"
"df[0:train_size],"
df[df['PassengerId']==1044]
df[df.Fare>280]
"df.drop('Ticket',axis=1,inplace=True)"
"df.drop(['Ticket','Surname','FamCode'],axis=1,inplace=True)"
"df.drop(['Name','PassengerId','Embarked','Sex','Title','Fare_Category',
'Family_Size_Category','Age_Category','First_Name','Last_Name',
'Original_Name','Name_Length_Category'],axis=1,inplace=True)"
df['Salutation']
df[k:k+mini_batch_size]
"df.drop('Survived',axis=1)"
df[df['Ticket']=='3701']
"df.drop(['index','PassengerId'],axis=1,inplace=True)"
df.query('CabinCount>1').head()
"df.drop('New_Age',axis=1,inplace=True)"
"df.drop(columns=['Name'],inplace=True,axis=1)"
"df.sort_values(by=['MLATestAccuracyMean'],ascending=False,inplace=True)"
"df.drop(columns=list_drop_features,inplace=True)"
"df.describe
df.describe(include='all')"
"df.loc[indices,'pca-2'],"
"df.drop(labels=['Ticket','Sex_male'],axis=1,inplace=True)"
df.Age.head()
"assertdf.shape[1]==df.shape[1],'NotEqual'"
"df.drop(k,axis=1,inplace=True)"
"df.drop(['S','Q'],axis=1,inplace=True)"
df[df['Title']=='Capt']
"df.drop(['Cabin','Age'],inplace=True,axis=1)"
"df[df['Name']=='Kelly,Mr.James']"
df.loc[df['Fare']==0]
"df.drop(['PassengerId','Pclass','Name','Sex','Ticket','Cabin',
'Embarked'],axis=1,inplace=True)"
df['CabinLetter'][27:32]
"df.drop(['Pclass','Name','Sex','SibSp','Parch','Ticket','Cabin',
'Embarked','PassengerId','Parch_9'],axis=1,inplace=True)"
"df.drop(['SibSp','RelationsOnBoard'],axis=1,inplace=True)"
"df.drop(columns={'Ticket','Last_Name','Name','SibSp','Parch',
'total_related'})"
df[df['surname']=='Panula']
"df.drop('Cabin_T',inplace=True,axis=1)"
"df.drop('AgeCategory',axis=1,inplace=True)"
"df.drop('SibSp',axis=1,inplace=True)"
df.head(12)
"df.drop(labels=['Name'],axis=1,inplace=True)"
"df['X_train'],"
"df.drop(['PassengerId','Ticket','Cabin','Embarked','Name'],axis=1,
inplace=True)"
df['Title1'].head(3)
df.T.shape
"df['Fare'][df['Survived']==0],"
"df.drop(columns=['sibling_count','parent_child_count'])"
"df.drop(delete_columns,axis=1,inplace=True)"
df.Ticket.head(20)
"df.loc[(df.fare==0),:]"
df.train.describe()
"df.sort_values(by='Coefficients',ascending=False)"
"df.drop(['Cabin','Name','Ticket','PassengerId'],axis=1,inplace=True)"
"df.drop(['Cabin_T','family_size','Ticket','Name','Fare','name_length'],
axis=1,inplace=True)"
"df[features['Age']==22][['Title.SUM(combine.Age)','Age','Title']].head()"
"df.drop('Age_x',axis=1,inplace=True)"
df['Name'].head(20)
df[categorical].head()
df[df['Ticket']=='113803']
"df.sort_values('importance',ascending=False)"
"df[cols].describe(include='all',percentiles=[])"
"df.drop(labels='Title',axis='columns',inplace=True)"
df.iloc[55]
"df.loc[df['Fare'],['Fare','Survived']]"
df.head(10)
"df.drop('Embarked_Q',axis=1,inplace=True)"
"df.drop(['FareBin'],axis=1,inplace=True)"
"df.drop(train_df[['Name','Ticket']],axis=1,inplace=True)"
"[df.drop(columns=['Cabin','SibSp','Parch'],inplace=True)fordfin[
titanic_df,test_df]]"
df[numeric_variables].head()
"df.drop(labels=['PassengerId','Ticket','Cabin'],axis=1,inplace=True)"
"df.drop(['Name','Sex','Ticket','Pclass'],axis=1,inplace=True)"
df[2]['best_score']
df[df['Sex']=='male']
"df.shape,df.shape,df.shape,df.shape,df.shape"
df[df.Embarked!=df.Embarked]
"df.loc[:,('GenderId','Sex','EmbarkedId','Embarked')].head(20)"
"df.drop(['age','sex','childness'],axis=1,inplace=True)"
df.loc[df.Cabin=='T']
df.head(200)
traindf.describe()['Age']
"df.sort_values('acc_score',ascending=False,inplace=True)"
"df.drop(['Sex','Embarked','Name','Ticket','Pclass','PassengerId',
'Cabin'],axis=1,inplace=True)"
"df[indices],"
"df.drop(['Age','Cabin'],inplace=True,axis=1)"
df.ix[whole_index].head()
"df.drop(['Title','DatingRank','SureName'],axis=1,inplace=True)"
df[cond_notnull&cond_m]['Age']
"df.drop(columns={'Name','Cabin','Ticket','PassengerId'},inplace=True)"
"df.drop(['Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin',
'Embarked','Deck','FareBins'],inplace=True,axis=1)"
df[df.Name_len>50]
"df.drop('Age',inplace=True,axis=1)"
"df.drop(['Name','Surname'],axis=1,inplace=True)"
"df.drop('title_extracted',axis=1,inplace=True)"
df[df['Age'].isnull()]
"df.loc[0:5,(['PassengerId','Name'])]"
df[df['pclass']==3]
"df.sort_values(by='CVScore',ascending=False)"
"df.drop(['Pclass','Sex','Embarked'],axis=1,inplace=True)"
df[r>30]
"df[['Ticket','Ticket_numerical','Ticket_categorical']].head()"
"ifdf['Deck']==df['Deck']:
continue"
"df.drop('Q',axis=1,inplace=True)"
"df.drop(columns=['Cabin','PassengerId','Name','Ticket'],inplace=True)"
df[df['Fare']>500]
df.head(9)
df.shape(test)
df['Gender']
df.describe()
"df.loc[('count'),:]"
"df.drop(testY.columns[[0]],axis=1,inplace=True)"
"df.drop(['Sex','Person'],inplace=True,axis=1)"
"df.shape,df.shape,df.shape"
"df[df['Cabin'].isin(['C123','D17'])]"
"df.describe('Age'[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99])"
df.sort_values(['Embarked'])
df.Family_Survival.describe()
"df.drop('Family',axis=1,inplace=True)"
df[categorical_data].head(10)
df['Ticket'].head(5)
df.isnull().head()
"df.drop(labels=['Sex','Embarked','Pclass'],axis=1,inplace=True)"
"df.drop(['Ticket','Cabin','Embarked','Name'],axis=1,inplace=True)"
"df.drop(['IsTrain','PassengerId'],axis=1,inplace=True)"
"df[0],df[4],df[-1]"
"df['AgeGroup'].head(20),agebins"
df[target].sort_values(ascending=False)
df[mask]
df.query('Embarked!=Embarked')
"df.drop(['person'],axis=1,inplace=True)"
"df.drop(columns=['AgeBin_Code'],axis=1,inplace=True)"
"df[df['Embarked'].isnull()].drop('Embarked',axis=1)"
df.describe(include=['O'])
"df.drop(['Cabin','Ticket'],axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Ticket','Cabin','Fare'],axis=1,inplace
=True)"
"df.drop(['Family'],inplace=True,axis=1)"
df[:11]
df[numeric_variables].head(3)
"df.drop(columns=['PassengerId','Cabin','Name','Ticket'],inplace=True)"
df[df.TwoLetters=='ff']
df[888:894]
"df.drop(columns=['PassengerId','Ticket','Cabin'],axis=1,inplace=True)"
"df[['CabinYN','Cabin_ord']].head(6)"
"df.loc[df['Age']>58,'Age']"
df.loc['Store2']
df[df['Title']=='Rev']
"df.sort_values(by=0,axis=1)"
"df.drop(['Embarked','Pclass','Sex'],axis=1,inplace=True)"
"df[df_train['Age'].isnull()][['Sex','Pclass','Age']].head()"
"df[['Ticket_code','Ticket_count','Group_code','Group_count']],"
"df[['Name','Survived']].head()"
"df.drop(['CategoricalFare'],axis=1,inplace=True)"
df['family_size'].head()
"df.iloc[:n],df[:n],df[:n],df[:n]"
"df['Fare'].describe(percentiles=[0.15,0.3,0.45,0.6,0.75,0.9])"
df[df['age']!=df['age']]
"df.drop(drop_columns,axis=1,inplace=True)"
"df.drop('Person',axis=1,inplace=True)"
df[df['Survived']==1]
df[df['SibSp']==8]
df.Title.head(10)
"df.drop('CabinLetter',axis=1,inplace=True)"
"full[full['Cabin'].isnull()][['Cabin','CabinType','_CabinType',
'CabinType2','_CabinType2']][:20]"
df.Embarked.describe(include=['O'])
"df.drop(prop,axis=1,inplace=True)"
df[1]
df['Pclass']==df['Pclass']
"df.drop(['Ticket','Survived','PassengerId'],axis=1,inplace=True)"
"df.describe(include=[np.object,'category'])"
df[(df['Survived']==1)&(df['Sex']=='male')]
"df[['Name','Title']].head()"
"df.drop(['Age','calculated_fare'],axis=1,inplace=True)"
"df.drop(['Name','SibSp','Parch','Ticket','Cabin'],axis=1,inplace=True)"
df[['Name']].head(20)
df['Cabin'].head()
df[df.isnull(all_data['Age'])]
"df.drop(drop_columns_train,axis=1,inplace=True)"
"df[(df['Age']<=18)&(df['Age']>=8)&(df['Sex']=='male')].sort_values(by
=['Fare']).drop(columns=['Embarked','PassengerId','Name'])"
df[1042:1044]
df[df.Sex=='female'][df.Survived==1].shape[0]
"df['Age'][df['Survived']==0],"
df.iloc[-10:]
"df.drop(['Pclass','SibSp','Parch','Age','Fare'],axis=1,inplace=True)"
"df.sort_values(by=['Values'],ascending=True,inplace=True)"
"df.drop(['Name','Ticket','Cabin','PassengerId','Age_cats'],1,inplace=True
)"
"df.drop(['Name','Sex'],1,inplace=True)"
"df.drop(columns='Sex',inplace=True)"
df['Name'].head()
"df.drop(['Q','S'],axis=1,inplace=True)"
df[df.Ticket=='113781']
"df.drop(columns={'Name','Fare_Group','Name_key','Ticket','PassengerId'},
inplace=True)"
"df.drop('index',axis=1,inplace=True)"
df.columns.drop('Age')
df['Survived']
"df.describe().T.sort_values(by='50%',ascending=False)"
"df.drop('Deck',axis=1,inplace=True,errors='ignore')"
"df[['Title','TitleBand']].head(10)"
"df.drop(drop_rows,inplace=True)"
"df.drop(['Ticket'],axis=1,inplace=True)"
df[numeric_features].head()
df.loc[0]
"df.sort_values(['Fare','PassengerId'],ascending=[0,1]).head()"
df.Ticket.head(10)
"df.drop(numerical_columns,axis=1).describe()"
"df.loc[(row_null_age),:].head(10)"
"df.drop(columns=['PassengerId'],axis=1,inplace=True)"
df.loc[nullFares]
"df.sort_values(by='score',ascending=False)"
df.describe(include=['number'])
"df.loc[(df['Age']==2.0)&(df['Sex']=='female')&(df['FamilySize']==
1)&(df['Pclass']==1)&(df['CabinAssigned']==1)&(df['Fare']>=
75)&(df['Fare']<=85)]"
"df.drop(['Sex','Embarked','Name','Ticket','PassengerId'],axis=1,
inplace=True)"
"df.sort_values(by='Score',ascending=False)"
"df.drop(columns=['Name','Sex','Cabin','Embarked','Pclass'],inplace=True)"
"df[i],"
"df.drop(['Ticket','Cabin','Embarked','PassengerId'],axis=1,inplace=True)"
"df.drop(['Sex','Embarked','Name','Ticket','Pclass'],axis=1,inplace=True)"
"df.loc[((df.Fare==80)&(df.Pclass==1)),:]"
df.loc['2014']
df[['FamilySize']].head()
"df.drop(columns=['Ticket','Cabin'],axis=1,inplace=True)"
"df.sort_values(by='Model_scores',ascending=True)"
df.Name.head()
"('GB',df['GB']['best_clf']),"
"df.sort_values(by='Levels',inplace=True)"
df[SURV:899:2]
"df.drop(['Name','Cabin','Ticket','SibSp','Parch','IsAlone','Title',
'Embarked','Age'],axis=1,inplace=True)"
df.loc['Store1']['Cost']
"df.drop(['PassengerId','Ticket','Survived'],inplace=True,axis=1)"
df['Cabin'].describe()
"df.drop(['top_cabin'],axis=1,inplace=True)"
"df.shape,df.shape"
test.head()['Embarked']
df['Family_Size'][0:15]
df.Ticket.head(40)
"df.drop(['Pclass'],axis=1,inplace=True)"
"df[train_size:train_size+dev_size],"
df[:1000]
"df.drop(['PassengerId','Name','Ticket'],axis=1,inplace=True)"
"df.loc[(df.Fare.isnull()),:]"
df['Name_Title'].head()
"df.drop(labels=['PassengerId','Name','Cabin','Survived','Ticket',
'Fare'],axis=1,inplace=True)"
"df['SharedFeatures']==0,"
df['Cabin'][df['Cabin'].notnull()].head()
"df.drop(['PassengerId','Name','Ticket'],axis=1)"
"df.iloc[1:5,2:6]"
"df.drop('Embarked',inplace=True,axis=1)"
"df.drop(['SibSp','Parch','PassengerId','Name','Ticket','Embarked'],
axis=1,inplace=True)"
df[features_to_model].head()
df['Fare'].head()
"df.loc[:,(['Age*Class','Age','Pclass'])]"
"df.drop('Cabin_T',axis=1,inplace=True)"
"df[(df['Fare']>79.5)&(df['Fare']<80.5)&(df['Pclass']==1)&df[
'Cabin'].notnull()]"
"df.drop(columns=['Name','SibSp','Parch','Ticket'],inplace=True)"
"df.sort_values(by='Fare').describe(percentiles=[0.1,0.2,0.3,0.4,0.5,
0.6,0.7,0.8,0.9,0.99])"
df.FamilySize.describe()
"df.drop('Cabin',inplace=True,axis=1)"
df['Age'].head(20)
"df.drop(columns=['Survived'],inplace=True)"
"df['Fare']>100,"
"df[target],"
df[(df['PassengerId']==62)|(df['PassengerId']==830)]
"df['FamilySize'],"
"df.drop(columns=['Cabin','PassengerId','Name','Ticket','LastName',
'FirstName'],inplace=True)"
df[df['TicketType']=='FCC']
"(df['Embarked']=='C')&(df['Fare']>8)&(df['Fare']<15),"
df['Age_0'].head(10)
"df.sort_values(by='Test',axis=0,inplace=True)"
df[df['Ticket']=='CA.2343']
df.loc['2014-10']
"df.drop(['Sex_female','Embarked_C','Title_Dr','Deck_X'],axis=1,inplace
=True)"
"df.drop('Name',inplace=True,axis=1)"
"df[['Name','Parch']]"
"df.drop(['Cabin','Cabin_Data'],axis=1,inplace=True,errors='ignore')"
"df.drop(columns='Cabin',inplace=True)"
df.loc['Cricket']
"df[['Ticket','Fare','Name']].sort_values(by='Ticket',axis=0).head(5)"
"df.sort_values(by='FarePP',ascending=False).head(10)"
"df.loc[5:10,(['Survived','Fare','Embarked'])]"
df['Name'].iloc[0]
"df.drop(labels='tmpt_AgeBand',inplace=True,axis=1)"
df.loc[(df['Embarked']=='Q')&(df['Sex']=='male')&(df['Pclass']!=3)]
"df.drop(['Name','SibSp','Parch','Ageband','Family','Fareband'],axis=1,
inplace=True)"
df[df['Age']>60]
pd.read_csv(csv.sample)
"df[['Pclass','Sex','Parch','Fare','SibSp','Age','Cabin_available']].head(
)"
"df.drop(labels='Cabin',axis=1,inplace=True)"
df[df.isnull(train_set['Embarked'])]
"df[['Age','Fare']].describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,
0.8,0.9,0.99])"
df.query('Age!=Age').head()
df.describe(include=['0'])
"df.sort_values('correlation',ascending=False)"
"df.sort_values(['CoefficientEstimate'],ascending=[0])"
"df.loc[3:5,:]"
df[df['Surname']=='Icard']
df[one_hot_columns].head(5)
df[dataset['IsMother']==1]['Age'].describe()
"df[['Sex','Pclass','Cabin']][0:3]"
"df.sort_values('Pval',ascending=True,inplace=True)"
df['Cabin_type'].head()
df['Embarked'][829]
"df.drop(columns={'Cabin','Cabin_prefix'},inplace=True)"
"df.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)"
"df[['Q','S','C']].head()"
df[df.Fare.isnull()]
df.head(n=7)
df[df.Sex=='female']
"df.drop(['Sex_male','SibSp','Parch','Em_Q','Em_S','Fare'],axis=1,
inplace=True)"
"assertdf.shape==(2,2
),'Confusionmatrixshouldbefrombinaryclassificationonly.'"
df[df['Age'].isnull()].head()
tmp_train[idx]['Ticket'][~idx2]
df['ticket_owners'].describe()
df.iloc[1305]
df.loc[df['PassengerId']==1116]
df[df['Cabin'].isnull()==True].shape[0]
"df.sort_values(by='importance',inplace=True)"
df[train_nan_pct>0]
"df.loc[:,(['Age*Class','Age','Pclass'])].head(5)"
"full[full['Age'].isnull()][['Age','_AgeImputer','_AgeLinear']][:20]"
"df.drop(['Survived'],axis=1,inplace=True)"
"df.drop('Fare',inplace=True,axis=1)"
df[(df['Pclass']==1)&(df['Fare_eff']>0)&(df['Fare_eff']<10)]
df[df.Age>=age_cutoff].head()
"df.drop(data_to_drop,axis=1,inplace=True)"
"df[df.Age.notnull()].query(""Title=='MASTER'andAge>=10"")"
"df.drop(['Parch','SibSp'],axis=1,inplace=True)"
df.loc[df['Fare'].isnull()]
"df[predictors],"
df.head(n=3)
"df.drop(col_delete,axis=1,inplace=True)"
df.isnull(df_titanic)
"df.drop(['Ticket','Cabin'],axis=1,inplace=True)"
"df.drop(['Embarked','Ticket','Name','Sex'],axis=1,inplace=True)"
df[(df['Ticket']>'113500')&(df['Ticket']<'113600')]
"df.drop('Cabin',axis=1)"
"df.head(),df.columns.values"
"df.drop(columns_to_drop,axis=1,inplace=True)"
df[df.Cabin=='C123']
"df.loc[(df['PassengerId']==1044),:]"
"df.drop(columns=['PassengerId','Name','SibSp','Parch','Ticket','Cabin'])"
"df.drop(labels='Fare',axis='columns',inplace=True)"
"df.drop(labels='tmpFareBand',axis=1,inplace=True)"
"df.drop(columns=['Name','Sex','Title'],inplace=True)"
"df.drop(['Ticket','Name','Cabin'],axis=1,inplace=True)"
df[df['title']=='notable']
"df.drop(['Age_was_missing'],axis=1,inplace=True)"
df[df.predicted!=df.Survived]
"df.drop(c,axis=1,inplace=True)"
"df.drop(['Cabin','Name','Ticket'],axis=1,inplace=True)"
"df.iloc[150:155,:]"
df[numeric_variables_test].head()
data.head()['SibSp']
"df['Val_acc_'+df[i]],"
"df.sort_values('Chi2Pval',ascending=True,inplace=True)"
"df.drop(['AgeBin'],axis=1,inplace=True)"
"(modelResults.loc[4]['Model_Name'],modelResults.loc[4]['Model']),"
"df.drop('Sharedticket2',1,inplace=True)"
df[(df['Pclass']==1)&(df['Fare']>0)].sort_values('Fare').head()
"df.drop(['Name','Ticket','Cabin'],inplace=True,axis=1)"
df['Age']
"df.drop(columns=['Name','Age','Fare'],axis=1,inplace=True)"
"df.sort_values(by='Survived',inplace=True)"
"df.drop('male',axis=1,inplace=True)"
"[df[df['Train']==0]['Fare_ind']],"
df[(df.Parch>1)&(df.Pclass==1)]
"df.drop(labels='Ticket',axis=1,inplace=True)"
"df.drop('Fare_Band',axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Ticket','Cabin'],inplace=True,axis=1)"
test_data.head()['Cabin']
"df.drop(['Ticket'],1,inplace=True)"
combine[0].iloc[0]['Name']
df.loc[df['TicketNumber'].isnull()]
df[numerical_columns].describe()
df['Age'].describe(include=all)
df[col_num].describe()
"df['SocialGroup'],"
"df.drop(columns='Age',inplace=True)"
df.drop('Salutation')
"df.drop(labels='Cabin',inplace=True,axis=1)"
"df.loc[df.Embarked.isnull(),'Name']"
"df.drop(['Ticket','Name','Fare','Age','Parch','SibSp'],axis=1,
inplace=True)"
"df.drop(['Name','Embarked'],axis=1,inplace=True)"
df.head(25)
"df.drop(labels=['Cabin','Ticket','Child'],axis=1,inplace=True)"
"df.drop(labels='Cabin',axis='columns',inplace=True)"
df.head(5)
df[df.Cabin=='T']
"df.drop(['Ticket','Name','family_size','Fare','Cabin'],axis=1,inplace
=True)"
df['Embarked'].head()
df[df.Fare_bin.isnull()]
"df.drop(['Name','PassengerId'],axis=1,inplace=True)"
df['Name'].head(100)
"df.loc[index,'random_for'],"
"df.drop(labels=['PassengerId','Cabin','Name','Ticket'],axis=1,inplace=True
)"
df.Family_Size.describe()
"df.drop(['Sex','Embarked'],axis=1,inplace=True)"
df['Survived'].sort_values(ascending=False)
"df.drop('Median_age',axis=1)"
df.Sex.head(5)
"df.drop(['PassengerId'],axis=1,inplace=True)"
"df.drop(['Sex','Person'],axis=1,inplace=True)"
"df.drop(['Cabin'],axis=1,inplace=True)"
"df.drop(['Title','Embarked'],axis=1,inplace=True)"
"df[(df['Sex']=='female')&(df['SibSp']==0)&(df['Parch']==0)].describe(
)"
df[df['Fare']>400]
df[-4:]
"df.drop(columns=drop_columns,inplace=True)"
"df.loc[[61,829]]"
"df.drop('Male',axis=1,inplace=True)"
df.loc[0].loc[3]
df[(df.PassengerId==27)|(df.PassengerId==88)]
"ship_numeric.loc[(lambdadf:df.Age_was_missing==1),:][:5]"
"df[~((df.Title=='Mr')|(df.Title=='Mrs')|(df.Title=='Master')|(
df.Title=='Miss'))]"
"df.drop('Title_Royal',axis=1,inplace=True)"
"df.drop('Fare_category',axis=1,inplace=True)"
"df.describe(percentiles=[0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99])"
"df.loc[:,(['Age*Class','AgeFill','Pclass'])].head(10)"
df.sort_values
"df[['Name','Sex','Age']].sort_values('Age')"
"df[(df['NoPerTicket']==1)&(df['Age']<13)&(df['Sex']=='male')&(
df['Title']=='Mr')].sort_values('Age')"
"df.drop(labels='Ticket',axis='columns',inplace=True)"
df.stats.describe(kpca_X[0])
"df.drop(['PassengerId','Ticket','Cabin','Name'],inplace=True,axis=1)"
df[df['Cabin']=='F4']
df[:3]
"df.drop(cols,axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Ticket','Embarked','Cabin'],axis=1,
inplace=True)"
"df.iloc[:,(0)]"
"df[df.Title.isin(['Rev','Dr','Col','Capt','Major'])&(df.Sex!='male')]"
df['cabin_initial'].head(10)
df['Survived'].head(15)
"df.drop('fareband',axis=1,inplace=True)"
"df['mean_test_score'][candidate],"
"df.drop(columns=['PassengerId','Ticket','Pclass','Name','Sex','Cabin',
'Embarked'],axis=1,inplace=True)"
"df[['Age','Pclass']].head()"
df[df['Embarked'].isnull()|df['Fare'].isnull()]
"df.drop(['Name'],axis=1,inplace=True)"
"df.sort_values('LDACoef',ascending=False,inplace=True)"
"df.drop('Pclass',axis=1,inplace=True)"
"df.drop(['Name','Age','Ticket','Fare','Cabin'],axis=1,inplace=True)"
df[(df['Parch']>=1)&(df['Age']<=18)&(df['Sex']=='female')]
df['Name'].head(5)
df[:]
"df.drop(col,axis=1,inplace=True)"
"df.drop(['Name','FName'],axis=1,inplace=True)"
"df.iloc[[4,2,90],[2,4,5]]"
"df.drop(['PassengerId','Name','Sex','Ticket','Cabin','Embarked','Age',
'MMs','Ms','m','Pch','Pc','p','SbS','Sb','s','Fem','F',
'Male'],axis=1,inplace=True)"
df.head().shape
"df.drop('Parch',axis=1,inplace=True)"
df[152:153]
df.shape(X_predict_scale)
"df.sort_values(by='Score',ascending=True)"
df.shape(Y_NumPy_Mat)
df[(df.Sex=='female')&(df.Pclass==3)&(df.Survived==0)].head(20)
df[(df['Age']<=16)&(df['Title']=='Mrs')]
"df[['Name','Title']].head(5)"
"df.drop(['Pclass','Name','Sex','Age','SibSp','Parch','Ticket',
'Cabin','Embarked'],axis=1,inplace=True)"
df[features].head(3)
df.Survived.sort_values(ascending=False)
"df.drop(['Name'],1,inplace=True)"
pd.read_csv('predicted_survived.csv').head()
df[df['Fare'].isnull()==True]
"df.drop('Fare',axis=1)"
"df.drop([xforxintrain.columnsifxnotintest.columns],axis=1,
inplace=True)"
"df.loc[(0),:]"
"df.drop(['Name','family_or_alone','family_type','age_type'],axis=1,
inplace=True)"
df.iloc[0:891]
"df.drop(['Cabin','Name','PassengerId','Ticket','fam_size'],axis=1,
inplace=True)"
df[df['Title']==15]
"df[0]['best_score'],"
"df.drop(['Parch'],axis=1,inplace=True)"
df[(df['Title']=='Lady')|(df['Title']=='Countess')]
df['Family_Size'].head()
"df.drop(['Cabin','Name','Parch','SibSp','Ticket'],axis=1,inplace=True)"
"df.drop('FareBand',axis=1,inplace=True)"
"df[['Age','Child']].head(10)"
df.Fare.loc[50:]
"df.drop(drops,axis=1,inplace=True)"
"df.sort_values(by='optScore',ascending=False)"
"df.drop('Cabin',1,inplace=True)"
"df.drop(['Cabin','Ticket','Name','Age'],axis=1,inplace=True)"
"df.drop(column,axis=axis,inplace=True)"
df.loc[df['Ticket']=='3701']
df['Age'].head()
df.Fare.describe()
"df.loc[0:11,(['Name','Sex','Ticket'])]"
df.Age.describe()
df[df.isnull(test_df['Fare'])]
"df.loc[df['TicketGroupSize']==1,['Survived','TicketGroupSurvivors']]"
"df.drop(['PassengerId','Cabin','SibSp','Parch','Name','Ticket'],axis=
1,inplace=True)"
"df.loc[((df.Pclass==3)&(df.Sex_male==1)&(df.Age>60)),:]"
train.head()['Name']
"df.drop(cols_to_be_dropped,axis=1,inplace=True)"
df.iloc[-1]
"df.drop(['CategoricalAge'],inplace=True,axis=1)"
"df.drop(['Sex','Embarked','Title','Deck'],axis=1,inplace=True)"
"df.drop(i_col,axis=1,inplace=True)"
"df.drop(df[df.PassengerId==767].index,inplace=True)"
df[:10]
"df[(df.Fare==0)&(df.Pclass==2)].shape[0]/(1.0*df[df.Fare==0].
shape[0]),"
"df.drop(['Name','PassengerId','Ticket','Cabin'],inplace=True,axis=1)"
"df.drop([xforxintest.columnsifxnotintrain.columns],axis=1,
inplace=True)"
"df[df.Name.isin(['Connolly,Miss.Kate','Kelly,Mr.James'])].sort_values(by
='Name')"
df.shape(X_NumPy_Mat_NM)
"(df['SharedTicket']==0)&(df['SharedName']==1)&(df['FamilySize']>1),"
"df['Pclass']==j,"
"df.drop(trainset.columns[[0,3,8,10,11]],axis=1,inplace=True)"
"df.drop(['PassengerId','Survived'],axis=1,inplace=True)"
df[['Fare']].describe()
"df.drop(columns=['Name','Ticket','PassengerId','Cabin'],inplace=True)"
"df.drop(columns='Tag',inplace=True)"
"df.drop(['Misc','Mr'],axis=1,inplace=True)"
"df.drop(drop_column_,axis=1,inplace=True)"
"df.drop(['Cabin','family_size','Ticket','Name','Fare'],axis=1,inplace
=True)"
df.age.describe()
df[df['price']>1500]
"df.loc[(df['Pclass']>4)&(df['Parch']>4),'Pclass']"
"df.drop(['PassengerId','Ticket'],inplace=True,axis=1)"
df[[df.Name]].head(10)
"df.drop(df[df.isnull(df['Embarked'])].index,inplace=True)"
"df.drop(column,axis=1,inplace=True)"
df.loc[df.isnull(data['Embarked'])]
df.loc[61]
df[df.SibSp>7]
"df.drop(['istrain','PassengerId'],axis=1,inplace=True)"
"df.drop('Survived',1,inplace=True)"
df[df['PassengerId']==1297]
pd.read_csv('../input/gender_submission.csv').head()
"df.drop('Sex_Class',axis=1,inplace=True)"
"df.drop(['Parch','SibSp','Cabin','Name'],axis=1)"
"df[['FamilySize','Single','Nuclear','Big']].head(10)"
"df.drop(['Name','Ticket','PassengerId'],axis=1,inplace=True,errors=False)"
df['ticket'].head()
"df[train_df['Embarked'].isnull()][['Embarked','EmbarkedFill']].head(10)"
df[null_count>0]
"df.loc[index,'svm'],"
"df.sort_values(['CoefficientEstimate'],ascending=False)"
df.shape(y_train)
"df.drop(columns='SPTE',inplace=True)"
df[categorical].describe()
"df.drop(Feature_to_drop,axis=1,inplace=True)"
"df.drop(['PassengerId','Ticket','Name','Fare','Age','SibSp','Parch'],
axis=1,inplace=True)"
"df.drop(labels=['PassengerId'],inplace=True,axis=1)"
"df.drop('Guess',axis=1,inplace=True)"
df['Ticket'].head(20)
(df['Title']=='Rev')|(df['Title']=='Sir')
df[(df.Sex=='female')&(df.Pclass==1)&(df.Survived==1)].shape
"df[df.missing_values.index.values],"
"df.drop('Title',inplace=True,axis=1)"
df[df['surname']=='Fortune']
"df.drop(columns=['Pclass','Sex'],axis=1,inplace=True)"
df['Pclass'].head()
df['Age'][0:15]
"df.drop(['Sibling_Spouse','Parent_Children'],axis=1,inplace=True)"
"df['Sex']==gender,"
"df.drop(colunas_to_drop,axis=1,inplace=True)"
"df.drop(['Mr'],inplace=True,axis=1)"
"df.drop(columns=['PassengerId','Cabin','Name','SibSp','Parch','Ticket'
],inplace=True)"
"df[df['type']=='transform'].head(primitives[primitives['type']==
'transform'].shape[0])"
df[df.TicketButLast=='34708']
df['len_name'].describe()
"df.drop(titanic_test.columns[[2,7,9]],axis=1,inplace=True)"
"df.drop(drop_cols,1,inplace=True)"
"df.loc[df.Cabin.notnull(),('Cabin','Cabin_Letter')]"
"df['price'],"
df['Embarked'].describe()
"df.drop(['Age','Fare','Name_length','FamilySize'],axis=1,inplace=True)"
df.head(8)
df[df.qtd_same_ticket==11]
df['Age'][0]
"df.drop(['PassengerId','is_train','Initial'],axis=1,inplace=True)"
"df.drop(['Survived'],axis=1),"
"df.drop(labels='AgeBand',axis='columns',inplace=True)"
df.Embarked.describe()
"df.drop(['Sex','Embarked','Name','Ticket','Cabin'],axis=1,inplace=True)"
"df.drop('CorrectGuess',axis=1,inplace=True)"
"df.drop(columns=DROP_COLUMNS,inplace=True)"
df[numerical_data].head(5)
"df.drop(['PassengerId','Survived','Ticket'],axis=1,inplace=True)"
"df.drop(['PassengerId','Name','Age','SibSp','Parch','Ticket','Fare',
'Cabin'],axis=1,inplace=True)"
df.sort_values(by='Name').head(10)
"df.drop(['Age','AgeBin'],axis=1,inplace=True)"
"df.drop(drop_list,axis=1,inplace=True)"
"df.drop(['ElitePerson'],axis=1,inplace=True)"
"survived_class/df.loc['coltotal','rowtotal']"
"df.drop(['Age_Group','Fare_Cat'],axis=1,inplace=True)"
df[df.isnull(titanic['Age'])]
"df['num_items'],"
df.head(n=4)
"df.drop(['PassengerId','Ticket','Cabin','Name'],axis=1,inplace=True)"
"df.sort_values(['Age'],ascending=True).head(3)"
"df.drop('Survived',axis=1,inplace=True)"
"df.drop(['Fare'],1,inplace=True)"
df[vd['PassengerId']==1284]['Survived']
"df.describe(percentiles=[0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,
0.99])"
"df.drop(['IsTrain','PassengerId','Survived'],axis=1,inplace=True)"
df.shape(y_predict_test)
"df.drop(['Last_Name','Fare','Age'],axis=1,inplace=True)"
"df.drop(['S'],axis=1,inplace=True)"
"df.iloc[:,([0,2,4])]"
"df.drop(labels=['Survived','PassengerId'],axis=1,inplace=True)"
"df.drop(['Name','Age','Ticket','Fare','Cabin','Fare_range',
'PassengerId'],axis=1,inplace=True)"
df[(df.Age>75.0)&(df.Survived==1)]
"df.drop(['PassengerId','Age','SibSp','Parch','Fare'],axis=1,inplace=True)"
"df.drop(columns=col_drop,axis=1,inplace=True)"
"df.drop(labels='FareBand',axis='columns',inplace=True)"
"df.drop(['Others'],axis=1,inplace=True)"
"df.loc[index,'Fare']>8"
df[829:830]
df['Family'].describe()
"df.sort_values(by='ValidAcc',ascending=False)"
df[df.isnull().fareband].head()
"df.loc[[0,5,10,20,50],['Name','Sex','Ticket']]"
train_data.head()['Cabin']
"df.drop(['Cabin','FamilyName','Name','Ticket','Title'],axis=1,inplace
=True)"
"df.describe(percentiles=[0.61,0.62])"
df['Cabin_num']
df[df.isnull(df_train['Embarked'])]
df['Age'].describe()
df[df['Age']>7.2]
"df.drop(['SibSp','Parch'],axis=1,inplace=True)"
"df.drop(['SibSp','Parch','FamilySize'],axis=1,inplace=True)"
"df.loc[5:8,('Fare')]"
