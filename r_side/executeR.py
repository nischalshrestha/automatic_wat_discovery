import time
import multiprocessing
import pickle
import pandas as pd

import sys
sys.path.append("../")
from generate import generate_args

NUM_WORKERS=4
PICKLE_PATH = '/Volumes/TarDisk/snippets/'
RSNIPS_PATH = "rsnips.csv"

flatten = lambda l: [item for sublist in l for item in sublist]

generated_args = generate_args(100)

class DataframeStore:
    """Just a class to store a dict of <snippet, output> so it can be pickled"""
    pairs = {}
    def __init__(self, pairs):
        self.pairs = pairs
    def get_output(self):
       return self.pairs
    
# TODO implement R's version of eval
def eval_expr(mslacc, expr):
    pass
    
def execute_statement(snip):
    test_results = []
    for i, arg in enumerate(generated_args):
        result = eval_expr(arg, snip)
        if type(result) == tuple:
            test_results.append(result[1])
            # executed += 1
        else:
            err = str(result)
            # if "not defined" in str(result) \
            #     or "not contained" in err \
            #     or "no attribute" in err \
            #     or "does not exist" in err: 
                # return snip, ["ERROR: "+str(result)]
            test_results.append("ERROR: "+err)
            # failed += 1
    return snip, test_results
    
def execute_statements():
    """Execute R snippets with random dataframes"""
    # Read python snippets generated by filer.py
    snips = pd.read_csv(RSNIPS_PATH)
    snippets = flatten(snips.values)[0:1]
    # Eval expressions and collect successful ones paired with output: (expr, output)
    start_time = time.time()
    failed, executed = 0, 0
    with multiprocessing.Pool(processes=NUM_WORKERS) as pool:
        results = pool.map_async(execute_statement, snippets)
        results.wait()
        result = dict(results.get())
    end_time = time.time()
    # successful_snips = list(filter(None, successful_snips)) # just in case
    print(f"Time taken: {round((end_time - start_time), 2)} secs")
    return result

if __name__ == '__main__':
    executions = execute_statements()
    df_store = DataframeStore(executions)



